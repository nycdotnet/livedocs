{
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.NpgsqlNodaTimeMethodCallTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.NpgsqlNodaTimeMethodCallTranslator.html",
    "title": "Class NpgsqlNodaTimeMethodCallTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeMethodCallTranslator Provides translation services for NodaTime method calls. Inheritance System.Object NpgsqlNodaTimeMethodCallTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeMethodCallTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlNodaTimeMethodCallTranslator(NpgsqlSqlExpressionFactory) Declaration public NpgsqlNodaTimeMethodCallTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>) Declaration public SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description SqlExpression instance System.Reflection.MethodInfo method System.Collections.Generic.IReadOnlyList < SqlExpression > arguments Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimeTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimeTypeMapping.html",
    "title": "Class NpgsqlTimeTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTimeTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlTimeTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTimeTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlTimeTypeMapping() Declaration public NpgsqlTimeTypeMapping() | Improve this Doc View Source NpgsqlTimeTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlTimeTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCircleTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCircleTypeMapping.html",
    "title": "Class NpgsqlCircleTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlCircleTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlCircleTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCircleTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlCircleTypeMapping() Declaration public NpgsqlCircleTypeMapping() | Improve this Doc View Source NpgsqlCircleTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlCircleTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.ArrayAnyAllExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.ArrayAnyAllExpression.html",
    "title": "Class ArrayAnyAllExpression | Npgsql Documentation",
    "keywords": "Class ArrayAnyAllExpression Represents a PostgreSQL array ANY or ALL expression. Inheritance System.Object ArrayAnyAllExpression Implements System.IEquatable < ArrayAnyAllExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class ArrayAnyAllExpression : SqlExpression, IEquatable<ArrayAnyAllExpression> Remarks See https://www.postgresql.org/docs/current/static/functions-comparisons.html Examples 1 = ANY ('{0,1,2}'), 'cat' LIKE ANY ('{a%,b%,c%}') Constructors | Improve this Doc View Source ArrayAnyAllExpression(SqlExpression, SqlExpression, ArrayComparisonType, String, RelationalTypeMapping) Constructs a ArrayAnyAllExpression . Declaration public ArrayAnyAllExpression(SqlExpression operand, SqlExpression array, ArrayComparisonType arrayComparisonType, string operator, RelationalTypeMapping typeMapping) Parameters Type Name Description SqlExpression operand The value to find. SqlExpression array The array to search. ArrayComparisonType arrayComparisonType The comparison type. System.String operator The operator symbol to the array expression. RelationalTypeMapping typeMapping The type mapping for the expression. Properties | Improve this Doc View Source Array The array of values or patterns to test for the Operand . Declaration public virtual SqlExpression Array { get; } Property Value Type Description SqlExpression | Improve this Doc View Source ArrayComparisonType The comparison type. Declaration public virtual ArrayComparisonType ArrayComparisonType { get; } Property Value Type Description ArrayComparisonType | Improve this Doc View Source Operand The value to test against the Array . Declaration public virtual SqlExpression Operand { get; } Property Value Type Description SqlExpression | Improve this Doc View Source Operator The operator. Declaration public virtual string Operator { get; } Property Value Type Description System.String | Improve this Doc View Source Type Declaration public override Type Type { get; } Property Value Type Description System.Type Methods | Improve this Doc View Source Accept(ExpressionVisitor) Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source Equals(ArrayAnyAllExpression) Declaration public bool Equals(ArrayAnyAllExpression other) Parameters Type Name Description ArrayAnyAllExpression other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration public override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source Update(SqlExpression, SqlExpression) Declaration public ArrayAnyAllExpression Update(SqlExpression operand, SqlExpression array) Parameters Type Name Description SqlExpression operand SqlExpression array Returns Type Description ArrayAnyAllExpression | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression Implements System.IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlArrayMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlArrayMethodTranslator.html",
    "title": "Class NpgsqlArrayMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlArrayMethodTranslator Translates functions on arrays into their corresponding PostgreSQL operations. Inheritance System.Object NpgsqlArrayMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlArrayMethodTranslator : IMethodCallTranslator Remarks https://www.postgresql.org/docs/current/static/functions-array.html Constructors | Improve this Doc View Source NpgsqlArrayMethodTranslator(NpgsqlSqlExpressionFactory, NpgsqlJsonPocoTranslator) Declaration public NpgsqlArrayMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, NpgsqlJsonPocoTranslator jsonPocoTranslator) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory NpgsqlJsonPocoTranslator jsonPocoTranslator Methods | Improve this Doc View Source Translate(SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>) Declaration public SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description SqlExpression instance System.Reflection.MethodInfo method System.Collections.Generic.IReadOnlyList < SqlExpression > arguments Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal Classes NpgsqlLoggingDefinitions"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlStringTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlStringTypeMapping.html",
    "title": "Class NpgsqlStringTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlStringTypeMapping The base class for mapping Npgsql-specific string types. It configures parameters with the NpgsqlDbType provider-specific type enum. Inheritance System.Object NpgsqlStringTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlStringTypeMapping : StringTypeMapping Constructors | Improve this Doc View Source NpgsqlStringTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType) Declaration protected NpgsqlStringTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType) Parameters Type Name Description RelationalTypeMappingParameters parameters NpgsqlDbType npgsqlDbType | Improve this Doc View Source NpgsqlStringTypeMapping(String, NpgsqlDbType) Constructs an instance of the NpgsqlTypeMapping class. Declaration public NpgsqlStringTypeMapping(string storeType, NpgsqlDbType npgsqlDbType) Parameters Type Name Description System.String storeType The database type to map. NpgsqlDbType npgsqlDbType The database type used by Npgsql. Properties | Improve this Doc View Source NpgsqlDbType The database type used by Npgsql. Declaration public NpgsqlDbType NpgsqlDbType { get; } Property Value Type Description NpgsqlDbType Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source ConfigureParameter(DbParameter) Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description System.Data.Common.DbParameter parameter"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.NpgsqlDbContextOptionsBuilder.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.NpgsqlDbContextOptionsBuilder.html",
    "title": "Class NpgsqlDbContextOptionsBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlDbContextOptionsBuilder Allows for options specific to PostgreSQL to be configured for a . Inheritance System.Object NpgsqlDbContextOptionsBuilder Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDbContextOptionsBuilder : RelationalDbContextOptionsBuilder<NpgsqlDbContextOptionsBuilder, NpgsqlOptionsExtension> Constructors | Improve this Doc View Source NpgsqlDbContextOptionsBuilder(DbContextOptionsBuilder) Initializes a new instance of the NpgsqlDbContextOptionsBuilder class. Declaration public NpgsqlDbContextOptionsBuilder(DbContextOptionsBuilder optionsBuilder) Parameters Type Name Description DbContextOptionsBuilder optionsBuilder The core options builder. Methods | Improve this Doc View Source EnableRetryOnFailure() Configures the context to use the default retrying . Declaration public virtual NpgsqlDbContextOptionsBuilder EnableRetryOnFailure() Returns Type Description NpgsqlDbContextOptionsBuilder An instance of NpgsqlDbContextOptionsBuilder configured to use the default retrying . | Improve this Doc View Source EnableRetryOnFailure(Int32) Configures the context to use the default retrying . Declaration public virtual NpgsqlDbContextOptionsBuilder EnableRetryOnFailure(int maxRetryCount) Parameters Type Name Description System.Int32 maxRetryCount Returns Type Description NpgsqlDbContextOptionsBuilder An instance of NpgsqlDbContextOptionsBuilder with the specified parameters. | Improve this Doc View Source EnableRetryOnFailure(Int32, TimeSpan, ICollection<String>) Configures the context to use the default retrying . Declaration public virtual NpgsqlDbContextOptionsBuilder EnableRetryOnFailure(int maxRetryCount, TimeSpan maxRetryDelay, ICollection<string> errorCodesToAdd) Parameters Type Name Description System.Int32 maxRetryCount The maximum number of retry attempts. System.TimeSpan maxRetryDelay The maximum delay between retries. System.Collections.Generic.ICollection < System.String > errorCodesToAdd Additional error codes that should be considered transient. Returns Type Description NpgsqlDbContextOptionsBuilder An instance of NpgsqlDbContextOptionsBuilder with the specified parameters. | Improve this Doc View Source MapRange(String, Type, String, String) Maps a user-defined PostgreSQL range type for use. Declaration public virtual void MapRange(string rangeName, Type subtypeClrType, string schemaName = null, string subtypeName = null) Parameters Type Name Description System.String rangeName The name of the PostgreSQL range type to be mapped. System.Type subtypeClrType The CLR type of the range's subtype (or element). The actual mapped type will be an over this type. System.String schemaName The name of the PostgreSQL schema in which the range is defined. System.String subtypeName Optionally, the name of the range's PostgreSQL subtype (or element). This is usually not needed - the subtype will be inferred based on subtypeClrType . Examples To map a range of PostgreSQL real, use the following: NpgsqlTypeMappingSource.MapRange(\"floatrange\", typeof(float)); | Improve this Doc View Source MapRange<TSubtype>(String, String, String) Maps a user-defined PostgreSQL range type for use. Declaration public virtual void MapRange<TSubtype>(string rangeName, string schemaName = null, string subtypeName = null) Parameters Type Name Description System.String rangeName The name of the PostgreSQL range type to be mapped. System.String schemaName The name of the PostgreSQL schema in which the range is defined. System.String subtypeName Optionally, the name of the range's PostgreSQL subtype (or element). This is usually not needed - the subtype will be inferred based on TSubtype . Type Parameters Name Description TSubtype The CLR type of the range's subtype (or element). The actual mapped type will be an over this type. Examples To map a range of PostgreSQL real, use the following: NpgsqlTypeMappingSource.MapRange{float}(\"floatrange\"); | Improve this Doc View Source ProvideClientCertificatesCallback(ProvideClientCertificatesCallback) Configures the to use the specified ProvideClientCertificatesCallback(ProvideClientCertificatesCallback) . Declaration public virtual void ProvideClientCertificatesCallback(ProvideClientCertificatesCallback callback) Parameters Type Name Description ProvideClientCertificatesCallback callback The callback to use. | Improve this Doc View Source ProvidePasswordCallback(ProvidePasswordCallback) Configures the to use the specified ProvidePasswordCallback(ProvidePasswordCallback) . Declaration public virtual void ProvidePasswordCallback(ProvidePasswordCallback callback) Parameters Type Name Description ProvidePasswordCallback callback The callback to use. | Improve this Doc View Source RemoteCertificateValidationCallback(RemoteCertificateValidationCallback) Configures the to use the specified RemoteCertificateValidationCallback(RemoteCertificateValidationCallback) . Declaration public virtual void RemoteCertificateValidationCallback(RemoteCertificateValidationCallback callback) Parameters Type Name Description System.Net.Security.RemoteCertificateValidationCallback callback The callback to use. | Improve this Doc View Source SetPostgresVersion(Int32, Int32) Configures the backend version to target. Declaration public virtual void SetPostgresVersion(int major, int minor) Parameters Type Name Description System.Int32 major The PostgreSQL major version to target. System.Int32 minor The PostgreSQL minor version to target. | Improve this Doc View Source SetPostgresVersion(Version) Configures the backend version to target. Declaration public virtual void SetPostgresVersion(Version postgresVersion) Parameters Type Name Description System.Version postgresVersion The backend version to target. | Improve this Doc View Source UseAdminDatabase(String) Connect to this database for administrative operations (creating/dropping databases). Declaration public virtual void UseAdminDatabase(string dbName) Parameters Type Name Description System.String dbName The name of the database for administrative operations. Extension Methods NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions.UseNetTopologySuite(NpgsqlDbContextOptionsBuilder, CoordinateSequenceFactory, PrecisionModel, Ordinates, Boolean) NpgsqlNodaTimeDbContextOptionsBuilderExtensions.UseNodaTime(NpgsqlDbContextOptionsBuilder)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTidTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTidTypeMapping.html",
    "title": "Class NpgsqlTidTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTidTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlTidTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTidTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlTidTypeMapping() Declaration public NpgsqlTidTypeMapping() | Improve this Doc View Source NpgsqlTidTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlTidTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlUpdateSqlGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlUpdateSqlGenerator.html",
    "title": "Class NpgsqlUpdateSqlGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlUpdateSqlGenerator Inheritance System.Object NpgsqlUpdateSqlGenerator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlUpdateSqlGenerator : UpdateSqlGenerator Constructors | Improve this Doc View Source NpgsqlUpdateSqlGenerator(UpdateSqlGeneratorDependencies) Declaration public NpgsqlUpdateSqlGenerator(UpdateSqlGeneratorDependencies dependencies) Parameters Type Name Description UpdateSqlGeneratorDependencies dependencies Methods | Improve this Doc View Source AppendBatchHeader(StringBuilder) Declaration public override void AppendBatchHeader(StringBuilder commandStringBuilder) Parameters Type Name Description System.Text.StringBuilder commandStringBuilder | Improve this Doc View Source AppendIdentityWhereCondition(StringBuilder, ColumnModification) Declaration protected override void AppendIdentityWhereCondition(StringBuilder commandStringBuilder, ColumnModification columnModification) Parameters Type Name Description System.Text.StringBuilder commandStringBuilder ColumnModification columnModification | Improve this Doc View Source AppendInsertOperation(StringBuilder, ModificationCommand, Int32) Declaration public override ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, ModificationCommand command, int commandPosition) Parameters Type Name Description System.Text.StringBuilder commandStringBuilder ModificationCommand command System.Int32 commandPosition Returns Type Description ResultSetMapping | Improve this Doc View Source AppendInsertOperation(StringBuilder, ModificationCommand, Int32, Boolean) Declaration public ResultSetMapping AppendInsertOperation(StringBuilder commandStringBuilder, ModificationCommand command, int commandPosition, bool overridingSystemValue) Parameters Type Name Description System.Text.StringBuilder commandStringBuilder ModificationCommand command System.Int32 commandPosition System.Boolean overridingSystemValue Returns Type Description ResultSetMapping | Improve this Doc View Source AppendNextSequenceValueOperation(StringBuilder, String, String) Declaration public override void AppendNextSequenceValueOperation(StringBuilder commandStringBuilder, string name, string schema) Parameters Type Name Description System.Text.StringBuilder commandStringBuilder System.String name System.String schema | Improve this Doc View Source AppendRowsAffectedWhereCondition(StringBuilder, Int32) Declaration protected override void AppendRowsAffectedWhereCondition(StringBuilder commandStringBuilder, int expectedRowsAffected) Parameters Type Name Description System.Text.StringBuilder commandStringBuilder System.Int32 expectedRowsAffected | Improve this Doc View Source AppendUpdateOperation(StringBuilder, ModificationCommand, Int32) Declaration public override ResultSetMapping AppendUpdateOperation(StringBuilder commandStringBuilder, ModificationCommand command, int commandPosition) Parameters Type Name Description System.Text.StringBuilder commandStringBuilder ModificationCommand command System.Int32 commandPosition Returns Type Description ResultSetMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.NpgsqlValueConverterSelector.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.NpgsqlValueConverterSelector.html",
    "title": "Class NpgsqlValueConverterSelector | Npgsql Documentation",
    "keywords": "Class NpgsqlValueConverterSelector Inheritance System.Object NpgsqlValueConverterSelector Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlValueConverterSelector : ValueConverterSelector Constructors | Improve this Doc View Source NpgsqlValueConverterSelector(ValueConverterSelectorDependencies) Declaration public NpgsqlValueConverterSelector(ValueConverterSelectorDependencies dependencies) Parameters Type Name Description ValueConverterSelectorDependencies dependencies Methods | Improve this Doc View Source Select(Type, Type) Declaration public override IEnumerable<ValueConverterInfo> Select(Type modelArrayClrType, Type providerArrayClrType = null) Parameters Type Name Description System.Type modelArrayClrType System.Type providerArrayClrType Returns Type Description System.Collections.Generic.IEnumerable < ValueConverterInfo >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DateMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.DateMapping.html",
    "title": "Class DateMapping | Npgsql Documentation",
    "keywords": "Class DateMapping Inheritance System.Object NpgsqlTypeMapping DateMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class DateMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source DateMapping() Declaration public DateMapping() | Improve this Doc View Source DateMapping(RelationalTypeMappingParameters) Declaration protected DateMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description System.String storeType System.Nullable < System.Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(ValueConverter) Declaration public override CoreTypeMapping Clone(ValueConverter converter) Parameters Type Name Description ValueConverter converter Returns Type Description CoreTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresCompositeType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresCompositeType.html",
    "title": "Class PostgresCompositeType | Npgsql Documentation",
    "keywords": "Class PostgresCompositeType Represents a PostgreSQL composite data type, which can hold multiple fields of varying types in a single column. Inheritance System.Object PostgresType PostgresCompositeType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class PostgresCompositeType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/rowtypes.html . Properties | Improve this Doc View Source Fields Holds the name and types for all fields. Declaration public IReadOnlyList<PostgresCompositeType.Field> Fields { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < PostgresCompositeType.Field >"
  },
  "doc/api/Npgsql.TypeHandlers.GeometricHandlers.LineSegmentHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.GeometricHandlers.LineSegmentHandler.html",
    "title": "Class LineSegmentHandler | Npgsql Documentation",
    "keywords": "Class LineSegmentHandler A type handler for the PostgreSQL lseg data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlLSeg > NpgsqlSimpleTypeHandler < NpgsqlLSeg > LineSegmentHandler Implements INpgsqlTypeHandler < NpgsqlLSeg > INpgsqlSimpleTypeHandler < NpgsqlLSeg > Inherited Members NpgsqlSimpleTypeHandler<NpgsqlLSeg>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<NpgsqlLSeg>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<NpgsqlLSeg>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<NpgsqlLSeg>.Write(NpgsqlLSeg, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<NpgsqlLSeg>.ValidateAndGetLength(NpgsqlLSeg, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<NpgsqlLSeg>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<NpgsqlLSeg>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlLSeg>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlLSeg>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<NpgsqlLSeg>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.GeometricHandlers Assembly : Npgsql.dll Syntax public class LineSegmentHandler : NpgsqlSimpleTypeHandler<NpgsqlLSeg>, INpgsqlTypeHandler<NpgsqlLSeg>, INpgsqlSimpleTypeHandler<NpgsqlLSeg> Remarks See http://www.postgresql.org/docs/current/static/datatype-geometric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source LineSegmentHandler(PostgresType) Declaration public LineSegmentHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override NpgsqlLSeg Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description NpgsqlLSeg Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlLSeg>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlLSeg, NpgsqlParameter) Declaration public override int ValidateAndGetLength(NpgsqlLSeg value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlLSeg value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlLSeg>.ValidateAndGetLength(NpgsqlTypes.NpgsqlLSeg, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlLSeg, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(NpgsqlLSeg value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlLSeg value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlLSeg>.Write(NpgsqlTypes.NpgsqlLSeg, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresBaseType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresBaseType.html",
    "title": "Class PostgresBaseType | Npgsql Documentation",
    "keywords": "Class PostgresBaseType Represents a PostgreSQL base data type, which is a simple scalar value. Inheritance System.Object PostgresType PostgresBaseType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class PostgresBaseType : PostgresType Constructors | Improve this Doc View Source PostgresBaseType(String, String, UInt32) Declaration protected PostgresBaseType(string ns, string internalName, uint oid) Parameters Type Name Description System.String ns System.String internalName System.UInt32 oid"
  },
  "doc/api/Npgsql.TypeHandlers.NetworkHandlers.CidrHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.NetworkHandlers.CidrHandler.html",
    "title": "Class CidrHandler | Npgsql Documentation",
    "keywords": "Class CidrHandler A type handler for the PostgreSQL cidr data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.ValueTuple < System.Net.IPAddress , System.Int32 >> NpgsqlSimpleTypeHandler < System.ValueTuple < System.Net.IPAddress , System.Int32 >> CidrHandler Implements INpgsqlTypeHandler < System.ValueTuple < System.Net.IPAddress , System.Int32 >> INpgsqlSimpleTypeHandler < System.ValueTuple < System.Net.IPAddress , System.Int32 >> INpgsqlSimpleTypeHandler < NpgsqlInet > Inherited Members NpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.Read(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.ValidateAndGetLength(ValueTuple<IPAddress, Int32>, NpgsqlParameter) NpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.Write(ValueTuple<IPAddress, Int32>, NpgsqlWriteBuffer, NpgsqlParameter) NpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.Write(ValueTuple<IPAddress, Int32>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.ValidateAndGetLength(ValueTuple<IPAddress, Int32>, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<(IPAddress Address, Int32 Subnet)>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<(IPAddress Address, Int32 Subnet)>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<(IPAddress Address, Int32 Subnet)>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.NetworkHandlers Assembly : Npgsql.dll Syntax public class CidrHandler : NpgsqlSimpleTypeHandler<(IPAddress Address, int Subnet)>, INpgsqlTypeHandler<(IPAddress Address, int Subnet)>, INpgsqlSimpleTypeHandler<(IPAddress Address, int Subnet)>, INpgsqlSimpleTypeHandler<NpgsqlInet> Remarks See http://www.postgresql.org/docs/current/static/datatype-net-types.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source CidrHandler(PostgresType) Declaration public CidrHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override (IPAddress Address, int Subnet) Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.ValueTuple < System.Net.IPAddress , System.Int32 > Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.ValueTuple<System.Net.IPAddress, System.Int32>>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlInet, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlInet value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlInet value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength((IPAddress Address, Int32 Subnet), NpgsqlParameter) Declaration public override int ValidateAndGetLength((IPAddress Address, int Subnet) value, NpgsqlParameter parameter) Parameters Type Name Description System.ValueTuple < System.Net.IPAddress , System.Int32 > value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.ValueTuple<System.Net.IPAddress, System.Int32>>.ValidateAndGetLength(System.ValueTuple<System.Net.IPAddress, System.Int32>, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlInet, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(NpgsqlInet value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlInet value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write((IPAddress Address, Int32 Subnet), NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write((IPAddress Address, int Subnet) value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.ValueTuple < System.Net.IPAddress , System.Int32 > value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.ValueTuple<System.Net.IPAddress, System.Int32>>.Write(System.ValueTuple<System.Net.IPAddress, System.Int32>, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<NpgsqlInet>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration NpgsqlInet INpgsqlSimpleTypeHandler<NpgsqlInet>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description NpgsqlInet Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Logging.NpgsqlLogger.html": {
    "href": "doc/api/Npgsql.Logging.NpgsqlLogger.html",
    "title": "Class NpgsqlLogger | Npgsql Documentation",
    "keywords": "Class NpgsqlLogger A generic interface for logging. Inheritance System.Object NpgsqlLogger Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.Logging Assembly : Npgsql.dll Syntax public abstract class NpgsqlLogger Methods | Improve this Doc View Source IsEnabled(NpgsqlLogLevel) Declaration public abstract bool IsEnabled(NpgsqlLogLevel level) Parameters Type Name Description NpgsqlLogLevel level Returns Type Description System.Boolean | Improve this Doc View Source Log(NpgsqlLogLevel, Int32, String, Exception) Declaration public abstract void Log(NpgsqlLogLevel level, int connectorId, string msg, Exception exception = null) Parameters Type Name Description NpgsqlLogLevel level System.Int32 connectorId System.String msg System.Exception exception"
  },
  "doc/api/Npgsql.LegacyPostgis.PostgisMultiPolygon.html": {
    "href": "doc/api/Npgsql.LegacyPostgis.PostgisMultiPolygon.html",
    "title": "Class PostgisMultiPolygon | Npgsql Documentation",
    "keywords": "Class PostgisMultiPolygon Represents a Postgis 2D MultiPolygon. Inheritance System.Object PostgisGeometry PostgisMultiPolygon Implements System.IEquatable < PostgisMultiPolygon > System.Collections.Generic.IEnumerable < PostgisPolygon > System.Collections.IEnumerable Inherited Members PostgisGeometry.SRID System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.LegacyPostgis Assembly : Npgsql.LegacyPostgis.dll Syntax public class PostgisMultiPolygon : PostgisGeometry, IEquatable<PostgisMultiPolygon>, IEnumerable<PostgisPolygon>, IEnumerable Constructors | Improve this Doc View Source PostgisMultiPolygon(PostgisPolygon[]) Declaration public PostgisMultiPolygon(PostgisPolygon[] polygons) Parameters Type Name Description PostgisPolygon [] polygons | Improve this Doc View Source PostgisMultiPolygon(IEnumerable<PostgisPolygon>) Declaration public PostgisMultiPolygon(IEnumerable<PostgisPolygon> polygons) Parameters Type Name Description System.Collections.Generic.IEnumerable < PostgisPolygon > polygons | Improve this Doc View Source PostgisMultiPolygon(IEnumerable<IEnumerable<IEnumerable<Coordinate2D>>>) Declaration public PostgisMultiPolygon(IEnumerable<IEnumerable<IEnumerable<Coordinate2D>>> ringList) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < Coordinate2D >>> ringList Properties | Improve this Doc View Source Item[Int32] Declaration public PostgisPolygon this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description PostgisPolygon | Improve this Doc View Source PolygonCount Declaration public int PolygonCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(PostgisMultiPolygon) Declaration public bool Equals(PostgisMultiPolygon other) Parameters Type Name Description PostgisMultiPolygon other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<PostgisPolygon> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < PostgisPolygon > | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetLenHelper() Declaration protected override int GetLenHelper() Returns Type Description System.Int32 Overrides PostgisGeometry.GetLenHelper() Operators | Improve this Doc View Source Equality(PostgisMultiPolygon, PostgisMultiPolygon) Declaration public static bool operator ==(PostgisMultiPolygon x, PostgisMultiPolygon y) Parameters Type Name Description PostgisMultiPolygon x PostgisMultiPolygon y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(PostgisMultiPolygon, PostgisMultiPolygon) Declaration public static bool operator !=(PostgisMultiPolygon x, PostgisMultiPolygon y) Parameters Type Name Description PostgisMultiPolygon x PostgisMultiPolygon y Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.IEquatable<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "doc/api/Npgsql.NpgsqlTransaction.html": {
    "href": "doc/api/Npgsql.NpgsqlTransaction.html",
    "title": "Class NpgsqlTransaction | Npgsql Documentation",
    "keywords": "Class NpgsqlTransaction Represents a transaction to be made in a PostgreSQL database. This class cannot be inherited. Inheritance System.Object System.MarshalByRefObject System.Data.Common.DbTransaction NpgsqlTransaction Implements System.Data.IDbTransaction System.IDisposable System.IAsyncDisposable Inherited Members System.Data.Common.DbTransaction.Dispose() System.Data.Common.DbTransaction.System.Data.IDbTransaction.Connection System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlTransaction : DbTransaction, IDbTransaction, IDisposable, IAsyncDisposable Properties | Improve this Doc View Source Connection Specifies the NpgsqlConnection object associated with the transaction. Declaration public NpgsqlConnection Connection { get; } Property Value Type Description NpgsqlConnection The NpgsqlConnection object associated with the transaction. | Improve this Doc View Source DbConnection Specifies the NpgsqlConnection object associated with the transaction. Declaration protected override DbConnection DbConnection { get; } Property Value Type Description System.Data.Common.DbConnection The NpgsqlConnection object associated with the transaction. Overrides System.Data.Common.DbTransaction.DbConnection | Improve this Doc View Source IsCompleted Specifies the completion state of the transaction. Declaration public bool IsCompleted { get; } Property Value Type Description System.Boolean The completion state of the transaction. | Improve this Doc View Source IsolationLevel Specifies the System.Data.IsolationLevel for this transaction. Declaration public override IsolationLevel IsolationLevel { get; } Property Value Type Description System.Data.IsolationLevel The System.Data.IsolationLevel for this transaction. The default is ReadCommitted . Overrides System.Data.Common.DbTransaction.IsolationLevel Methods | Improve this Doc View Source Commit() Commits the database transaction. Declaration public override void Commit() Overrides System.Data.Common.DbTransaction.Commit() | Improve this Doc View Source CommitAsync() Commits the database transaction. Declaration public Task CommitAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source CommitAsync(CancellationToken) Commits the database transaction. Declaration public override Task CommitAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task Overrides System.Data.Common.DbTransaction.CommitAsync(System.Threading.CancellationToken) | Improve this Doc View Source Dispose(Boolean) Disposes the transaction, rolling it back if it is still pending. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides System.Data.Common.DbTransaction.Dispose(System.Boolean) | Improve this Doc View Source DisposeAsync() Disposes the transaction, rolling it back if it is still pending. Declaration public override ValueTask DisposeAsync() Returns Type Description System.Threading.Tasks.ValueTask Overrides System.Data.Common.DbTransaction.DisposeAsync() | Improve this Doc View Source Release(String) Releases a transaction from a pending savepoint state. Declaration public void Release(string name) Parameters Type Name Description System.String name The name of the savepoint. | Improve this Doc View Source ReleaseAsync(String, CancellationToken) Releases a transaction from a pending savepoint state. Declaration public Task ReleaseAsync(string name, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String name The name of the savepoint. System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Rollback() Rolls back a transaction from a pending state. Declaration public override void Rollback() Overrides System.Data.Common.DbTransaction.Rollback() | Improve this Doc View Source Rollback(String) Rolls back a transaction from a pending savepoint state. Declaration public void Rollback(string name) Parameters Type Name Description System.String name The name of the savepoint. | Improve this Doc View Source RollbackAsync() Rolls back a transaction from a pending state. Declaration public Task RollbackAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source RollbackAsync(String, CancellationToken) Rolls back a transaction from a pending savepoint state. Declaration public Task RollbackAsync(string name, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String name The name of the savepoint. System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source RollbackAsync(CancellationToken) Rolls back a transaction from a pending state. Declaration public override Task RollbackAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task Overrides System.Data.Common.DbTransaction.RollbackAsync(System.Threading.CancellationToken) | Improve this Doc View Source Save(String) Creates a transaction save point. Declaration public void Save(string name) Parameters Type Name Description System.String name The name of the savepoint. | Improve this Doc View Source SaveAsync(String, CancellationToken) Creates a transaction save point. Declaration public Task SaveAsync(string name, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String name The name of the savepoint. System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task Implements System.Data.IDbTransaction System.IDisposable System.IAsyncDisposable"
  },
  "doc/api/Npgsql.LegacyPostgis.Coordinate2D.html": {
    "href": "doc/api/Npgsql.LegacyPostgis.Coordinate2D.html",
    "title": "Struct Coordinate2D | Npgsql Documentation",
    "keywords": "Struct Coordinate2D A structure representing a 2D double precision floating point coordinate; Implements System.IEquatable < Coordinate2D > Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql.LegacyPostgis Assembly : Npgsql.LegacyPostgis.dll Syntax public struct Coordinate2D : IEquatable<Coordinate2D> Constructors | Improve this Doc View Source Coordinate2D(Double, Double) Generates a new BBpoint with the specified coordinates. Declaration public Coordinate2D(double x, double y) Parameters Type Name Description System.Double x X coordinate System.Double y Y coordinate Properties | Improve this Doc View Source X X coordinate. Declaration public double X { get; } Property Value Type Description System.Double | Improve this Doc View Source Y Y coordinate. Declaration public double Y { get; } Property Value Type Description System.Double Methods | Improve this Doc View Source Equals(Coordinate2D) Declaration public bool Equals(Coordinate2D c) Parameters Type Name Description Coordinate2D c Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(Coordinate2D, Coordinate2D) Declaration public static bool operator ==(Coordinate2D left, Coordinate2D right) Parameters Type Name Description Coordinate2D left Coordinate2D right Returns Type Description System.Boolean | Improve this Doc View Source Inequality(Coordinate2D, Coordinate2D) Declaration public static bool operator !=(Coordinate2D left, Coordinate2D right) Parameters Type Name Description Coordinate2D left Coordinate2D right Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "doc/api/Npgsql.TypeHandling.INpgsqlSimpleTypeHandler-1.html": {
    "href": "doc/api/Npgsql.TypeHandling.INpgsqlSimpleTypeHandler-1.html",
    "title": "Interface INpgsqlSimpleTypeHandler<T> | Npgsql Documentation",
    "keywords": "Interface INpgsqlSimpleTypeHandler<T> Type handlers that wish to support reading other types in additional to the main one can implement this interface for all those types. Namespace : Npgsql.TypeHandling Assembly : Npgsql.dll Syntax public interface INpgsqlSimpleTypeHandler<T> Type Parameters Name Description T Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type T with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration T Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. System.Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description T The fully-read value. | Improve this Doc View Source ValidateAndGetLength(T, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration int ValidateAndGetLength(T value, NpgsqlParameter parameter) Parameters Type Name Description T value The value to be written to PostgreSQL NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description System.Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(T, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration void Write(T value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description T value The value to write. NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size )."
  },
  "doc/api/Npgsql.TypeHandlers.JsonbHandlerFactory.html": {
    "href": "doc/api/Npgsql.TypeHandlers.JsonbHandlerFactory.html",
    "title": "Class JsonbHandlerFactory | Npgsql Documentation",
    "keywords": "Class JsonbHandlerFactory A factory for type handlers for the PostgreSQL jsonb data type. Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < System.String > JsonbHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<String>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<String>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public class JsonbHandlerFactory : NpgsqlTypeHandlerFactory<string> Remarks See https://www.postgresql.org/docs/current/datatype-json.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source JsonbHandlerFactory() Declaration public JsonbHandlerFactory() | Improve this Doc View Source JsonbHandlerFactory(JsonSerializerOptions) Declaration public JsonbHandlerFactory(JsonSerializerOptions serializerOptions) Parameters Type Name Description JsonSerializerOptions serializerOptions Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<string> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < System.String > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<System.String>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.TypeHandlers.NumericHandlers.Int32Handler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.NumericHandlers.Int32Handler.html",
    "title": "Class Int32Handler | Npgsql Documentation",
    "keywords": "Class Int32Handler A type handler for the PostgreSQL integer data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.Int32 > NpgsqlSimpleTypeHandler < System.Int32 > Int32Handler Implements INpgsqlTypeHandler < System.Int32 > INpgsqlSimpleTypeHandler < System.Int32 > INpgsqlSimpleTypeHandler < System.Byte > INpgsqlSimpleTypeHandler < System.Int16 > INpgsqlSimpleTypeHandler < System.Int64 > INpgsqlSimpleTypeHandler < System.Single > INpgsqlSimpleTypeHandler < System.Double > INpgsqlSimpleTypeHandler < System.Decimal > Inherited Members NpgsqlSimpleTypeHandler<Int32>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Int32>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Int32>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Int32>.Write(Int32, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<Int32>.ValidateAndGetLength(Int32, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Int32>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Int32>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Int32>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Int32>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<Int32>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class Int32Handler : NpgsqlSimpleTypeHandler<int>, INpgsqlTypeHandler<int>, INpgsqlSimpleTypeHandler<int>, INpgsqlSimpleTypeHandler<byte>, INpgsqlSimpleTypeHandler<short>, INpgsqlSimpleTypeHandler<long>, INpgsqlSimpleTypeHandler<float>, INpgsqlSimpleTypeHandler<double>, INpgsqlSimpleTypeHandler<decimal> Remarks See http://www.postgresql.org/docs/current/static/datatype-numeric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source Int32Handler(PostgresType) Declaration public Int32Handler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override int Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Int32>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Byte, NpgsqlParameter) Declaration public int ValidateAndGetLength(byte value, NpgsqlParameter parameter) Parameters Type Name Description System.Byte value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Decimal, NpgsqlParameter) Declaration public int ValidateAndGetLength(decimal value, NpgsqlParameter parameter) Parameters Type Name Description System.Decimal value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Double, NpgsqlParameter) Declaration public int ValidateAndGetLength(double value, NpgsqlParameter parameter) Parameters Type Name Description System.Double value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Int16, NpgsqlParameter) Declaration public int ValidateAndGetLength(short value, NpgsqlParameter parameter) Parameters Type Name Description System.Int16 value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Int32, NpgsqlParameter) Declaration public override int ValidateAndGetLength(int value, NpgsqlParameter parameter) Parameters Type Name Description System.Int32 value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Int32>.ValidateAndGetLength(System.Int32, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(Int64, NpgsqlParameter) Declaration public int ValidateAndGetLength(long value, NpgsqlParameter parameter) Parameters Type Name Description System.Int64 value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Single, NpgsqlParameter) Declaration public int ValidateAndGetLength(float value, NpgsqlParameter parameter) Parameters Type Name Description System.Single value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source Write(Byte, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(byte value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Byte value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Decimal, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(decimal value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Decimal value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Double, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(double value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Double value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Int16, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(short value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Int16 value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Int32, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(int value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Int32 value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Int32>.Write(System.Int32, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Int64, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Int64 value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Single, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(float value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Single value NpgsqlWriteBuffer buf NpgsqlParameter parameter Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<Byte>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration byte INpgsqlSimpleTypeHandler<byte>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Byte | Improve this Doc View Source INpgsqlSimpleTypeHandler<Decimal>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration decimal INpgsqlSimpleTypeHandler<decimal>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Decimal | Improve this Doc View Source INpgsqlSimpleTypeHandler<Double>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration double INpgsqlSimpleTypeHandler<double>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Double | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int16>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration short INpgsqlSimpleTypeHandler<short>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Int16 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int64>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration long INpgsqlSimpleTypeHandler<long>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Int64 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Single>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration float INpgsqlSimpleTypeHandler<float>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Single Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.INpgsqlNameTranslator.html": {
    "href": "doc/api/Npgsql.INpgsqlNameTranslator.html",
    "title": "Interface INpgsqlNameTranslator | Npgsql Documentation",
    "keywords": "Interface INpgsqlNameTranslator A component which translates a CLR name (e.g. SomeClass) into a database name (e.g. some_class) according to some scheme. Used for mapping enum and composite types. Namespace : Npgsql Assembly : Npgsql.dll Syntax public interface INpgsqlNameTranslator Methods | Improve this Doc View Source TranslateMemberName(String) Given a CLR member name (property or field), translates its name to a database type name. Declaration string TranslateMemberName(string clrName) Parameters Type Name Description System.String clrName Returns Type Description System.String | Improve this Doc View Source TranslateTypeName(String) Given a CLR type name (e.g class, struct, enum), translates its name to a database type name. Declaration string TranslateTypeName(string clrName) Parameters Type Name Description System.String clrName Returns Type Description System.String"
  },
  "doc/api/Npgsql.TypeHandlers.GeometricHandlers.PathHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.GeometricHandlers.PathHandler.html",
    "title": "Class PathHandler | Npgsql Documentation",
    "keywords": "Class PathHandler A type handler for the PostgreSQL path data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlPath > PathHandler Implements INpgsqlTypeHandler < NpgsqlPath > Inherited Members NpgsqlTypeHandler<NpgsqlPath>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlPath>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlPath>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlPath>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlPath>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlPath>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<NpgsqlPath>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.GeometricHandlers Assembly : Npgsql.dll Syntax public class PathHandler : NpgsqlTypeHandler<NpgsqlPath>, INpgsqlTypeHandler<NpgsqlPath> Remarks See http://www.postgresql.org/docs/current/static/datatype-geometric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source PathHandler(PostgresType) Declaration public PathHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override ValueTask<NpgsqlPath> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < NpgsqlPath > Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlPath>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlPath, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(NpgsqlPath value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlPath value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlPath>.ValidateAndGetLength(NpgsqlTypes.NpgsqlPath, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlPath, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public override Task Write(NpgsqlPath value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description NpgsqlPath value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlPath>.Write(NpgsqlTypes.NpgsqlPath, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean) Implements INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.FullTextSearchHandlers.TsQueryHandler.html",
    "title": "Class TsQueryHandler | Npgsql Documentation",
    "keywords": "Class TsQueryHandler A type handler for the PostgreSQL tsquery data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlTsQuery > TsQueryHandler Implements INpgsqlTypeHandler < NpgsqlTsQuery > INpgsqlTypeHandler < NpgsqlTsQueryEmpty > INpgsqlTypeHandler < NpgsqlTsQueryLexeme > INpgsqlTypeHandler < NpgsqlTsQueryNot > INpgsqlTypeHandler < NpgsqlTsQueryAnd > INpgsqlTypeHandler < NpgsqlTsQueryOr > INpgsqlTypeHandler < NpgsqlTsQueryFollowedBy > Inherited Members NpgsqlTypeHandler<NpgsqlTsQuery>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlTsQuery>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlTsQuery>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlTsQuery>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlTsQuery>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlTsQuery>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<NpgsqlTsQuery>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.FullTextSearchHandlers Assembly : Npgsql.dll Syntax public class TsQueryHandler : NpgsqlTypeHandler<NpgsqlTsQuery>, INpgsqlTypeHandler<NpgsqlTsQuery>, INpgsqlTypeHandler<NpgsqlTsQueryEmpty>, INpgsqlTypeHandler<NpgsqlTsQueryLexeme>, INpgsqlTypeHandler<NpgsqlTsQueryNot>, INpgsqlTypeHandler<NpgsqlTsQueryAnd>, INpgsqlTypeHandler<NpgsqlTsQueryOr>, INpgsqlTypeHandler<NpgsqlTsQueryFollowedBy> Remarks See http://www.postgresql.org/docs/current/static/datatype-textsearch.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source TsQueryHandler(PostgresType) Declaration public TsQueryHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override ValueTask<NpgsqlTsQuery> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < NpgsqlTsQuery > Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsQuery>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlTsQuery, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(NpgsqlTsQuery value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTsQuery value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsQuery>.ValidateAndGetLength(NpgsqlTypes.NpgsqlTsQuery, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(NpgsqlTsQueryAnd, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlTsQueryAnd value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTsQueryAnd value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(NpgsqlTsQueryEmpty, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlTsQueryEmpty value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTsQueryEmpty value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(NpgsqlTsQueryFollowedBy, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlTsQueryFollowedBy value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTsQueryFollowedBy value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(NpgsqlTsQueryLexeme, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlTsQueryLexeme value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTsQueryLexeme value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(NpgsqlTsQueryNot, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlTsQueryNot value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTsQueryNot value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(NpgsqlTsQueryOr, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlTsQueryOr value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTsQueryOr value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source Write(NpgsqlTsQuery, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public override Task Write(NpgsqlTsQuery query, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description NpgsqlTsQuery query NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsQuery>.Write(NpgsqlTypes.NpgsqlTsQuery, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean) | Improve this Doc View Source Write(NpgsqlTsQueryAnd, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public Task Write(NpgsqlTsQueryAnd value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description NpgsqlTsQueryAnd value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write(NpgsqlTsQueryEmpty, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public Task Write(NpgsqlTsQueryEmpty value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description NpgsqlTsQueryEmpty value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write(NpgsqlTsQueryFollowedBy, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public Task Write(NpgsqlTsQueryFollowedBy value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description NpgsqlTsQueryFollowedBy value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write(NpgsqlTsQueryLexeme, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public Task Write(NpgsqlTsQueryLexeme value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description NpgsqlTsQueryLexeme value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write(NpgsqlTsQueryNot, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public Task Write(NpgsqlTsQueryNot value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description NpgsqlTsQueryNot value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write(NpgsqlTsQueryOr, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public Task Write(NpgsqlTsQueryOr value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description NpgsqlTsQueryOr value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Explicit Interface Implementations | Improve this Doc View Source INpgsqlTypeHandler<NpgsqlTsQueryAnd>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<NpgsqlTsQueryAnd> INpgsqlTypeHandler<NpgsqlTsQueryAnd>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < NpgsqlTsQueryAnd > | Improve this Doc View Source INpgsqlTypeHandler<NpgsqlTsQueryEmpty>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<NpgsqlTsQueryEmpty> INpgsqlTypeHandler<NpgsqlTsQueryEmpty>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < NpgsqlTsQueryEmpty > | Improve this Doc View Source INpgsqlTypeHandler<NpgsqlTsQueryFollowedBy>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<NpgsqlTsQueryFollowedBy> INpgsqlTypeHandler<NpgsqlTsQueryFollowedBy>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < NpgsqlTsQueryFollowedBy > | Improve this Doc View Source INpgsqlTypeHandler<NpgsqlTsQueryLexeme>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<NpgsqlTsQueryLexeme> INpgsqlTypeHandler<NpgsqlTsQueryLexeme>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < NpgsqlTsQueryLexeme > | Improve this Doc View Source INpgsqlTypeHandler<NpgsqlTsQueryNot>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<NpgsqlTsQueryNot> INpgsqlTypeHandler<NpgsqlTsQueryNot>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < NpgsqlTsQueryNot > | Improve this Doc View Source INpgsqlTypeHandler<NpgsqlTsQueryOr>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<NpgsqlTsQueryOr> INpgsqlTypeHandler<NpgsqlTsQueryOr>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < NpgsqlTsQueryOr > Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.TimestampTzHandlerFactory.html": {
    "href": "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.TimestampTzHandlerFactory.html",
    "title": "Class TimestampTzHandlerFactory | Npgsql Documentation",
    "keywords": "Class TimestampTzHandlerFactory A factory for type handlers for the PostgreSQL timestamptz data type. Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < System.DateTime > TimestampTzHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<DateTime>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<DateTime>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class TimestampTzHandlerFactory : NpgsqlTypeHandlerFactory<DateTime> Remarks See http://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<DateTime> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < System.DateTime > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<System.DateTime>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.NpgsqlRowUpdatedEventArgs.html": {
    "href": "doc/api/Npgsql.NpgsqlRowUpdatedEventArgs.html",
    "title": "Class NpgsqlRowUpdatedEventArgs | Npgsql Documentation",
    "keywords": "Class NpgsqlRowUpdatedEventArgs Inheritance System.Object System.EventArgs System.Data.Common.RowUpdatedEventArgs NpgsqlRowUpdatedEventArgs Inherited Members System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[]) System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[], System.Int32) System.Data.Common.RowUpdatedEventArgs.Command System.Data.Common.RowUpdatedEventArgs.Errors System.Data.Common.RowUpdatedEventArgs.RecordsAffected System.Data.Common.RowUpdatedEventArgs.Row System.Data.Common.RowUpdatedEventArgs.RowCount System.Data.Common.RowUpdatedEventArgs.StatementType System.Data.Common.RowUpdatedEventArgs.Status System.Data.Common.RowUpdatedEventArgs.TableMapping System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public class NpgsqlRowUpdatedEventArgs : RowUpdatedEventArgs Constructors | Improve this Doc View Source NpgsqlRowUpdatedEventArgs(DataRow, IDbCommand, StatementType, DataTableMapping) Declaration public NpgsqlRowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping) Parameters Type Name Description System.Data.DataRow dataRow System.Data.IDbCommand command System.Data.StatementType statementType System.Data.Common.DataTableMapping tableMapping"
  },
  "doc/api/Npgsql.TypeMapping.NpgsqlTypeMapping.html": {
    "href": "doc/api/Npgsql.TypeMapping.NpgsqlTypeMapping.html",
    "title": "Class NpgsqlTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTypeMapping Represents a type mapping for a PostgreSQL data type, which can be added to a type mapper, managing when that data type will be read and written and how. Inheritance System.Object NpgsqlTypeMapping Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql.TypeMapping Assembly : Npgsql.dll Syntax public sealed class NpgsqlTypeMapping Properties | Improve this Doc View Source ClrTypes A set of CLR types that correspond to this type. Setting an NpgsqlParameter 's Value property to one of these types will make Npgsql write its value to PostgreSQL with this mapping. Declaration public Type[] ClrTypes { get; } Property Value Type Description System.Type [] | Improve this Doc View Source DbTypes A set of System.Data.DbType s that correspond to this type. Setting an NpgsqlParameter 's DbType property to one of these values will make Npgsql write its value to PostgreSQL with this mapping. Declaration public DbType[] DbTypes { get; } Property Value Type Description System.Data.DbType [] | Improve this Doc View Source InferredDbType Determines what is returned from DbType when this mapping is used. Declaration public DbType? InferredDbType { get; } Property Value Type Description System.Nullable < System.Data.DbType > | Improve this Doc View Source NpgsqlDbType The NpgsqlDbType that corresponds to this type. Setting an NpgsqlParameter 's NpgsqlDbType property to this value will make Npgsql write its value to PostgreSQL with this mapping. Declaration public NpgsqlDbType? NpgsqlDbType { get; } Property Value Type Description System.Nullable < NpgsqlDbType > | Improve this Doc View Source PgTypeName The name of the PostgreSQL type name, as it appears in the pg_type catalog. Declaration public string PgTypeName { get; } Property Value Type Description System.String Remarks This can a a partial name (without the schema), or a fully-qualified name (schema.typename) - the latter can be used if you have two types with the same name in different schemas. | Improve this Doc View Source TypeHandlerFactory A factory for a type handler that will be used to read and write values for PostgreSQL type. Declaration public NpgsqlTypeHandlerFactory TypeHandlerFactory { get; } Property Value Type Description NpgsqlTypeHandlerFactory Methods | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() See Also GlobalTypeMapper TypeMapper"
  },
  "doc/api/Npgsql.NpgsqlOperationInProgressException.html": {
    "href": "doc/api/Npgsql.NpgsqlOperationInProgressException.html",
    "title": "Class NpgsqlOperationInProgressException | Npgsql Documentation",
    "keywords": "Class NpgsqlOperationInProgressException Thrown when trying to use a connection that is already busy performing some other operation. Provides information on the already-executing operation to help with debugging. Inheritance System.Object System.Exception System.SystemException System.InvalidOperationException NpgsqlOperationInProgressException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlOperationInProgressException : InvalidOperationException, ISerializable Properties | Improve this Doc View Source CommandInProgress If the connection is busy with another command, this will contain a reference to that command. Otherwise, if the connection if busy with another type of operation (e.g. COPY), contains null. Declaration public NpgsqlCommand CommandInProgress { get; } Property Value Type Description NpgsqlCommand Implements System.Runtime.Serialization.ISerializable"
  },
  "doc/api/Npgsql.NodaTime.TimestampTzHandlerFactory.html": {
    "href": "doc/api/Npgsql.NodaTime.TimestampTzHandlerFactory.html",
    "title": "Class TimestampTzHandlerFactory | Npgsql Documentation",
    "keywords": "Class TimestampTzHandlerFactory Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < Instant > TimestampTzHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<Instant>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<Instant>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.NodaTime Assembly : Npgsql.NodaTime.dll Syntax public class TimestampTzHandlerFactory : NpgsqlTypeHandlerFactory<Instant> Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<Instant> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < Instant > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<Instant>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/NpgsqlTypes.NpgsqlLine.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlLine.html",
    "title": "Struct NpgsqlLine | Npgsql Documentation",
    "keywords": "Struct NpgsqlLine Represents a PostgreSQL line type. Implements System.IEquatable < NpgsqlLine > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlLine : IEquatable<NpgsqlLine> Remarks See http://www.postgresql.org/docs/current/static/datatype-geometric.html Constructors | Improve this Doc View Source NpgsqlLine(Double, Double, Double) Declaration public NpgsqlLine(double a, double b, double c) Parameters Type Name Description System.Double a System.Double b System.Double c Properties | Improve this Doc View Source A Declaration public double A { get; set; } Property Value Type Description System.Double | Improve this Doc View Source B Declaration public double B { get; set; } Property Value Type Description System.Double | Improve this Doc View Source C Declaration public double C { get; set; } Property Value Type Description System.Double Methods | Improve this Doc View Source Equals(NpgsqlLine) Declaration public bool Equals(NpgsqlLine other) Parameters Type Name Description NpgsqlLine other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Parse(String) Declaration public static NpgsqlLine Parse(string s) Parameters Type Name Description System.String s Returns Type Description NpgsqlLine | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlLine, NpgsqlLine) Declaration public static bool operator ==(NpgsqlLine x, NpgsqlLine y) Parameters Type Name Description NpgsqlLine x NpgsqlLine y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlLine, NpgsqlLine) Declaration public static bool operator !=(NpgsqlLine x, NpgsqlLine y) Parameters Type Name Description NpgsqlLine x NpgsqlLine y Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "doc/api/Npgsql.ProvidePasswordCallback.html": {
    "href": "doc/api/Npgsql.ProvidePasswordCallback.html",
    "title": "Delegate ProvidePasswordCallback | Npgsql Documentation",
    "keywords": "Delegate ProvidePasswordCallback Represents the method that allows the application to provide a password at connection time in code rather than configuration Namespace : Npgsql Assembly : Npgsql.dll Syntax public delegate string ProvidePasswordCallback(string host, int port, string database, string username); Parameters Type Name Description System.String host Hostname System.Int32 port Port System.String database Database Name System.String username User Returns Type Description System.String A valid password for connecting to the database"
  },
  "doc/api/Npgsql.PostgresException.html": {
    "href": "doc/api/Npgsql.PostgresException.html",
    "title": "Class PostgresException | Npgsql Documentation",
    "keywords": "Class PostgresException The exception that is thrown when the PostgreSQL backend reports errors (e.g. query SQL issues, constraint violations). Inheritance System.Object System.Exception System.SystemException System.Runtime.InteropServices.ExternalException System.Data.Common.DbException NpgsqlException PostgresException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Runtime.InteropServices.ExternalException.ErrorCode System.Exception.GetBaseException() System.Exception.GetType() System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql Assembly : Npgsql.dll Syntax [Serializable] public sealed class PostgresException : NpgsqlException, ISerializable Remarks This exception only corresponds to a PostgreSQL-delivered error. Other errors (e.g. network issues) will be raised via NpgsqlException , and purely Npgsql-related issues which aren't related to the server will be raised via the standard CLR exceptions (e.g. ArgumentException). See http://www.postgresql.org/docs/current/static/errcodes-appendix.html , http://www.postgresql.org/docs/current/static/protocol-error-fields.html Constructors | Improve this Doc View Source PostgresException() Creates a new instance. Declaration [Obsolete] public PostgresException() Remarks Exists for backwards compat with 4.0, has been removed for 5.0. | Improve this Doc View Source PostgresException(String, String, String, String) Creates a new instance. Declaration public PostgresException(string messageText, string severity, string invariantSeverity, string sqlState) Parameters Type Name Description System.String messageText System.String severity System.String invariantSeverity System.String sqlState Properties | Improve this Doc View Source Code The SQLSTATE code for the error. Declaration [Obsolete(\"Use SqlState instead\")] public string Code { get; } Property Value Type Description System.String Remarks Always present. Constants are defined in PostgresErrorCodes . See http://www.postgresql.org/docs/current/static/errcodes-appendix.html | Improve this Doc View Source ColumnName If the error was associated with a specific table column, the name of the column. (Refer to the schema and table name fields to identify the table.) Declaration public string ColumnName { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source ConstraintName If the error was associated with a specific constraint, the name of the constraint. Refer to fields listed above for the associated table or domain. (For this purpose, indexes are treated as constraints, even if they weren't created with constraint syntax.) Declaration public string ConstraintName { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Data Gets a collection of key/value pairs that provide additional PostgreSQL fields about the exception. Declaration public override IDictionary Data { get; } Property Value Type Description System.Collections.IDictionary Overrides System.Exception.Data | Improve this Doc View Source DataTypeName If the error was associated with a specific data type, the name of the data type. (Refer to the schema name field for the name of the data type's schema.) Declaration public string DataTypeName { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Detail An optional secondary error message carrying more detail about the problem. May run to multiple lines. Declaration public string Detail { get; } Property Value Type Description System.String | Improve this Doc View Source File The file name of the source-code location where the error was reported. Declaration public string File { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Hint An optional suggestion what to do about the problem. This is intended to differ from Detail in that it offers advice (potentially inappropriate) rather than hard facts. May run to multiple lines. Declaration public string Hint { get; } Property Value Type Description System.String | Improve this Doc View Source InternalPosition This is defined the same as the Position field, but it is used when the cursor position refers to an internally generated command rather than the one submitted by the client. The InternalQuery field will always appear when this field appears. 0 means not provided. Declaration public int InternalPosition { get; } Property Value Type Description System.Int32 | Improve this Doc View Source InternalQuery The text of a failed internally-generated command. This could be, for example, a SQL query issued by a PL/pgSQL function. Declaration public string InternalQuery { get; } Property Value Type Description System.String | Improve this Doc View Source InvariantSeverity Severity of the error or notice, not localized. Always present since PostgreSQL 9.6. Declaration public string InvariantSeverity { get; } Property Value Type Description System.String | Improve this Doc View Source IsTransient Specifies whether the exception is considered transient, that is, whether retrying to operation could succeed (e.g. a network error). Check SqlState . Declaration public override bool IsTransient { get; } Property Value Type Description System.Boolean Overrides NpgsqlException.IsTransient | Improve this Doc View Source Line The line number of the source-code location where the error was reported. Declaration public string Line { get; } Property Value Type Description System.String | Improve this Doc View Source Message Gets a the PostgreSQL error message and code. Declaration public override string Message { get; } Property Value Type Description System.String Overrides System.Exception.Message | Improve this Doc View Source MessageText The primary human-readable error message. This should be accurate but terse. Declaration public string MessageText { get; } Property Value Type Description System.String Remarks Always present. | Improve this Doc View Source Position The field value is a decimal ASCII integer, indicating an error cursor position as an index into the original query string. The first character has index 1, and positions are measured in characters not bytes. 0 means not provided. Declaration public int Position { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Routine The name of the source-code routine reporting the error. Declaration public string Routine { get; } Property Value Type Description System.String | Improve this Doc View Source SchemaName If the error was associated with a specific database object, the name of the schema containing that object, if any. Declaration public string SchemaName { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Severity Severity of the error or notice. Always present. Declaration public string Severity { get; } Property Value Type Description System.String | Improve this Doc View Source SqlState The SQLSTATE code for the error. Declaration public string SqlState { get; } Property Value Type Description System.String Remarks Always present. Constants are defined in PostgresErrorCodes . See http://www.postgresql.org/docs/current/static/errcodes-appendix.html | Improve this Doc View Source Statement Returns the statement which triggered this exception. Declaration public NpgsqlStatement Statement { get; } Property Value Type Description NpgsqlStatement | Improve this Doc View Source TableName Table name: if the error was associated with a specific table, the name of the table. (Refer to the schema name field for the name of the table's schema.) Declaration public string TableName { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Where An indication of the context in which the error occurred. Presently this includes a call stack traceback of active PL functions. The trace is one entry per line, most recent first. Declaration public string Where { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo to populate with data. System.Runtime.Serialization.StreamingContext context The destination (see System.Runtime.Serialization.StreamingContext ) for this serialization. Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Runtime.InteropServices.ExternalException.ToString() Implements System.Runtime.Serialization.ISerializable"
  },
  "doc/api/Npgsql.INpgsqlDatabaseInfoFactory.html": {
    "href": "doc/api/Npgsql.INpgsqlDatabaseInfoFactory.html",
    "title": "Interface INpgsqlDatabaseInfoFactory | Npgsql Documentation",
    "keywords": "Interface INpgsqlDatabaseInfoFactory A factory which get generate instances of NpgsqlDatabaseInfo , which describe a database and the types it contains. When first connecting to a database, Npgsql will attempt to load information about it via this factory. Namespace : Npgsql Assembly : Npgsql.dll Syntax public interface INpgsqlDatabaseInfoFactory Methods | Improve this Doc View Source Load(NpgsqlConnection, NpgsqlTimeout, Boolean) Given a connection, loads all necessary information about the connected database, e.g. its types. A factory should only handle the exact database type it was meant for, and return null otherwise. Declaration Task<NpgsqlDatabaseInfo> Load(NpgsqlConnection conn, NpgsqlTimeout timeout, bool async) Parameters Type Name Description NpgsqlConnection conn NpgsqlTimeout timeout System.Boolean async Returns Type Description System.Threading.Tasks.Task < NpgsqlDatabaseInfo > An object describing the database to which conn is connected, or null if the database isn't of the correct type and isn't handled by this factory."
  },
  "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.TimeHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.TimeHandler.html",
    "title": "Class TimeHandler | Npgsql Documentation",
    "keywords": "Class TimeHandler A type handler for the PostgreSQL time data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.TimeSpan > NpgsqlSimpleTypeHandler < System.TimeSpan > TimeHandler Implements INpgsqlTypeHandler < System.TimeSpan > INpgsqlSimpleTypeHandler < System.TimeSpan > Inherited Members NpgsqlSimpleTypeHandler<TimeSpan>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<TimeSpan>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<TimeSpan>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<TimeSpan>.Write(TimeSpan, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<TimeSpan>.ValidateAndGetLength(TimeSpan, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<TimeSpan>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<TimeSpan>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<TimeSpan>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<TimeSpan>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<TimeSpan>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class TimeHandler : NpgsqlSimpleTypeHandler<TimeSpan>, INpgsqlTypeHandler<TimeSpan>, INpgsqlSimpleTypeHandler<TimeSpan> Remarks See http://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override TimeSpan Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.TimeSpan Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.TimeSpan>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(TimeSpan, NpgsqlParameter) Declaration public override int ValidateAndGetLength(TimeSpan value, NpgsqlParameter parameter) Parameters Type Name Description System.TimeSpan value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.TimeSpan>.ValidateAndGetLength(System.TimeSpan, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(TimeSpan, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(TimeSpan value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.TimeSpan value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.TimeSpan>.Write(System.TimeSpan, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.NetTopologySuite.html": {
    "href": "doc/api/Npgsql.NetTopologySuite.html",
    "title": "Namespace Npgsql.NetTopologySuite | Npgsql Documentation",
    "keywords": "Namespace Npgsql.NetTopologySuite Classes NetTopologySuiteHandlerFactory"
  },
  "doc/api/Npgsql.TypeHandling.NpgsqlTypeHandler.html": {
    "href": "doc/api/Npgsql.TypeHandling.NpgsqlTypeHandler.html",
    "title": "Class NpgsqlTypeHandler | Npgsql Documentation",
    "keywords": "Class NpgsqlTypeHandler Base class for all type handlers, which read and write CLR types into their PostgreSQL binary representation. Type handler writers shouldn't inherit from this class, inherit NpgsqlTypeHandler or NpgsqlSimpleTypeHandler<TDefault> instead. Inheritance System.Object NpgsqlTypeHandler ArrayHandler RangeHandler NpgsqlTypeHandler<TDefault> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandling Assembly : Npgsql.dll Syntax public abstract class NpgsqlTypeHandler Constructors | Improve this Doc View Source NpgsqlTypeHandler(PostgresType) Constructs a NpgsqlTypeHandler . Declaration protected NpgsqlTypeHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source CreateArrayHandler(PostgresArrayType) Creates a type handler for arrays of this handler's type. Declaration public abstract ArrayHandler CreateArrayHandler(PostgresArrayType arrayBackendType) Parameters Type Name Description PostgresArrayType arrayBackendType Returns Type Description ArrayHandler | Improve this Doc View Source CreateConversionButNoParamException(Type) Used to create an exception when the provided type can be converted and written, but an instance of NpgsqlParameter is required for caching of the converted value (in ConvertedValue . Declaration protected Exception CreateConversionButNoParamException(Type clrType) Parameters Type Name Description System.Type clrType Returns Type Description System.Exception | Improve this Doc View Source CreateRangeHandler(PostgresRangeType) Creates a type handler for ranges of this handler's type. Declaration public abstract RangeHandler CreateRangeHandler(PostgresRangeType rangeBackendType) Parameters Type Name Description PostgresRangeType rangeBackendType Returns Type Description RangeHandler | Improve this Doc View Source Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TAny with the given length from the provided buffer, using either sync or async I/O. Declaration protected abstract ValueTask<TAny> Read<TAny>(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. System.Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. System.Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description System.Threading.Tasks.ValueTask <TAny> The fully-read value. Type Parameters Name Description TAny | Improve this Doc View Source ValidateAndGetLength<TAny>(TAny, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a generic NpgsqlParameter<T> . Declaration protected abstract int ValidateAndGetLength<TAny>(TAny value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description TAny value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Type Parameters Name Description TAny | Improve this Doc View Source ValidateObjectAndGetLength(Object, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration protected abstract int ValidateObjectAndGetLength(object value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Object value The value to be written to PostgreSQL NpgsqlLengthCache lengthCache If the byte length calculation is costly (e.g. for UTF-8 strings), its result can be stored in the length cache to be reused in the writing process, preventing recalculation. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description System.Int32 The number of bytes required to write the value. | Improve this Doc View Source WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Writes a value to the provided buffer, using either sync or async I/O. Declaration protected abstract Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Object value The value to write. NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). System.Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. Returns Type Description System.Threading.Tasks.Task"
  },
  "doc/api/Npgsql.NodaTime.html": {
    "href": "doc/api/Npgsql.NodaTime.html",
    "title": "Namespace Npgsql.NodaTime | Npgsql Documentation",
    "keywords": "Namespace Npgsql.NodaTime Classes DateHandlerFactory IntervalHandlerFactory TimeHandlerFactory TimestampHandlerFactory TimestampTzHandlerFactory TimeTzHandlerFactory"
  },
  "doc/api/Npgsql.NpgsqlNotificationEventArgs.html": {
    "href": "doc/api/Npgsql.NpgsqlNotificationEventArgs.html",
    "title": "Class NpgsqlNotificationEventArgs | Npgsql Documentation",
    "keywords": "Class NpgsqlNotificationEventArgs Provides information on a PostgreSQL notification. Notifications are sent when your connection has registered for notifications on a specific channel via the LISTEN command. NOTIFY can be used to generate such notifications, allowing for an inter-connection communication channel. Inheritance System.Object System.EventArgs NpgsqlNotificationEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlNotificationEventArgs : EventArgs Properties | Improve this Doc View Source AdditionalInformation An optional payload string that was sent with this notification. Declaration [Obsolete(\"Use Payload instead\")] public string AdditionalInformation { get; } Property Value Type Description System.String | Improve this Doc View Source Channel The channel on which the notification was sent. Declaration public string Channel { get; } Property Value Type Description System.String | Improve this Doc View Source Condition The channel on which the notification was sent. Declaration [Obsolete(\"Use Channel instead\")] public string Condition { get; } Property Value Type Description System.String | Improve this Doc View Source Payload An optional payload string that was sent with this notification. Declaration public string Payload { get; } Property Value Type Description System.String | Improve this Doc View Source PID Process ID of the PostgreSQL backend that sent this notification. Declaration public int PID { get; } Property Value Type Description System.Int32"
  },
  "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandlerFactory.html": {
    "href": "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandlerFactory.html",
    "title": "Class IntervalHandlerFactory | Npgsql Documentation",
    "keywords": "Class IntervalHandlerFactory A factory for type handlers for the PostgreSQL interval data type. Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < System.TimeSpan > IntervalHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<TimeSpan>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<TimeSpan>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class IntervalHandlerFactory : NpgsqlTypeHandlerFactory<TimeSpan> Remarks See http://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<TimeSpan> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < System.TimeSpan > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<System.TimeSpan>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.IntervalHandler.html",
    "title": "Class IntervalHandler | Npgsql Documentation",
    "keywords": "Class IntervalHandler A type handler for the PostgreSQL date interval type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.TimeSpan > NpgsqlSimpleTypeHandler < System.TimeSpan > NpgsqlSimpleTypeHandlerWithPsv < System.TimeSpan , NpgsqlTimeSpan > IntervalHandler Implements INpgsqlTypeHandler < System.TimeSpan > INpgsqlSimpleTypeHandler < System.TimeSpan > INpgsqlSimpleTypeHandler < NpgsqlTimeSpan > Inherited Members NpgsqlSimpleTypeHandlerWithPsv<TimeSpan, NpgsqlTimeSpan>.ReadPsv(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlSimpleTypeHandlerWithPsv<TimeSpan, NpgsqlTimeSpan>.INpgsqlSimpleTypeHandler<NpgsqlTimeSpan>.Read(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlSimpleTypeHandlerWithPsv<TimeSpan, NpgsqlTimeSpan>.ValidateAndGetLength(NpgsqlTimeSpan, NpgsqlParameter) NpgsqlSimpleTypeHandlerWithPsv<TimeSpan, NpgsqlTimeSpan>.Write(NpgsqlTimeSpan, NpgsqlWriteBuffer, NpgsqlParameter) NpgsqlSimpleTypeHandlerWithPsv<TimeSpan, NpgsqlTimeSpan>.CreateArrayHandler(PostgresArrayType) NpgsqlSimpleTypeHandler<TimeSpan>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<TimeSpan>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<TimeSpan>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<TimeSpan>.Write(TimeSpan, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<TimeSpan>.ValidateAndGetLength(TimeSpan, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<TimeSpan>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<TimeSpan>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<TimeSpan>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<TimeSpan>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<TimeSpan>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class IntervalHandler : NpgsqlSimpleTypeHandlerWithPsv<TimeSpan, NpgsqlTimeSpan>, INpgsqlTypeHandler<TimeSpan>, INpgsqlSimpleTypeHandler<TimeSpan>, INpgsqlSimpleTypeHandler<NpgsqlTimeSpan> Remarks See http://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override TimeSpan Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.TimeSpan Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.TimeSpan>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ReadPsv(NpgsqlReadBuffer, Int32, FieldDescription) Declaration protected override NpgsqlTimeSpan ReadPsv(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description NpgsqlTimeSpan Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<System.TimeSpan, NpgsqlTypes.NpgsqlTimeSpan>.ReadPsv(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlTimeSpan, NpgsqlParameter) Declaration public override int ValidateAndGetLength(NpgsqlTimeSpan value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTimeSpan value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<System.TimeSpan, NpgsqlTypes.NpgsqlTimeSpan>.ValidateAndGetLength(NpgsqlTypes.NpgsqlTimeSpan, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(TimeSpan, NpgsqlParameter) Declaration public override int ValidateAndGetLength(TimeSpan value, NpgsqlParameter parameter) Parameters Type Name Description System.TimeSpan value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.TimeSpan>.ValidateAndGetLength(System.TimeSpan, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlTimeSpan, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(NpgsqlTimeSpan value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTimeSpan value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<System.TimeSpan, NpgsqlTypes.NpgsqlTimeSpan>.Write(NpgsqlTypes.NpgsqlTimeSpan, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(TimeSpan, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(TimeSpan value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.TimeSpan value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.TimeSpan>.Write(System.TimeSpan, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.NpgsqlLegacyPostgisExtensions.html": {
    "href": "doc/api/Npgsql.NpgsqlLegacyPostgisExtensions.html",
    "title": "Class NpgsqlLegacyPostgisExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlLegacyPostgisExtensions Extension adding the legacy PostGIS types to an Npgsql type mapper. Inheritance System.Object NpgsqlLegacyPostgisExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.LegacyPostgis.dll Syntax public static class NpgsqlLegacyPostgisExtensions Methods | Improve this Doc View Source UseLegacyPostgis(INpgsqlTypeMapper) Sets up the legacy PostGIS types to an Npgsql type mapper. Declaration public static INpgsqlTypeMapper UseLegacyPostgis(this INpgsqlTypeMapper mapper) Parameters Type Name Description INpgsqlTypeMapper mapper The type mapper to set up (global or connection-specific) Returns Type Description INpgsqlTypeMapper"
  },
  "doc/api/Npgsql.TypeHandlers.TextHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.TextHandler.html",
    "title": "Class TextHandler | Npgsql Documentation",
    "keywords": "Class TextHandler A type handler for PostgreSQL character data types (text, char, varchar, xml...). Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.String > TextHandler Implements INpgsqlTypeHandler < System.String > INpgsqlTypeHandler < System.Char []> INpgsqlTypeHandler < System.ArraySegment < System.Char >> INpgsqlTypeHandler < System.Char > INpgsqlTypeHandler < System.Byte []> Inherited Members NpgsqlTypeHandler<String>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<String>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<String>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<String>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<String>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<String>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<String>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public class TextHandler : NpgsqlTypeHandler<string>, INpgsqlTypeHandler<string>, INpgsqlTypeHandler<char[]>, INpgsqlTypeHandler<ArraySegment<char>>, INpgsqlTypeHandler<char>, INpgsqlTypeHandler<byte[]>, ITextReaderHandler Remarks See https://www.postgresql.org/docs/current/datatype-character.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source TextHandler(PostgresType, NpgsqlConnection) Declaration protected TextHandler(PostgresType postgresType, NpgsqlConnection connection) Parameters Type Name Description PostgresType postgresType NpgsqlConnection connection | Improve this Doc View Source TextHandler(PostgresType, Encoding) Declaration protected TextHandler(PostgresType postgresType, Encoding encoding) Parameters Type Name Description PostgresType postgresType System.Text.Encoding encoding Methods | Improve this Doc View Source GetTextReader(Stream) Declaration public virtual TextReader GetTextReader(Stream stream) Parameters Type Name Description System.IO.Stream stream Returns Type Description System.IO.TextReader | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override ValueTask<string> Read(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 byteLen System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < System.String > Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.String>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(ArraySegment<Char>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public virtual int ValidateAndGetLength(ArraySegment<char> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.ArraySegment < System.Char > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Byte[], ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(byte[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Byte [] value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Char, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(char value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Char value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Char[], ref NpgsqlLengthCache, NpgsqlParameter) Declaration public virtual int ValidateAndGetLength(char[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Char [] value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(String, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(string value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.String value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.String>.ValidateAndGetLength(System.String, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(ArraySegment<Char>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public virtual Task Write(ArraySegment<char> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.ArraySegment < System.Char > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write(Byte[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public Task Write(byte[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Byte [] value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write(Char, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public Task Write(char value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Char value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write(Char[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public virtual Task Write(char[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Char [] value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write(String, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public override Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.String value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.String>.Write(System.String, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean) Explicit Interface Implementations | Improve this Doc View Source INpgsqlTypeHandler<ArraySegment<Char>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<ArraySegment<char>> INpgsqlTypeHandler<ArraySegment<char>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < System.ArraySegment < System.Char >> | Improve this Doc View Source INpgsqlTypeHandler<Byte[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<byte[]> INpgsqlTypeHandler<byte[]>.Read(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 byteLen System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < System.Byte []> | Improve this Doc View Source INpgsqlTypeHandler<Char[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<char[]> INpgsqlTypeHandler<char[]>.Read(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 byteLen System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < System.Char []> | Improve this Doc View Source INpgsqlTypeHandler<Char>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<char> INpgsqlTypeHandler<char>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < System.Char > Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.TypeMapping.INpgsqlTypeMapper.html": {
    "href": "doc/api/Npgsql.TypeMapping.INpgsqlTypeMapper.html",
    "title": "Interface INpgsqlTypeMapper | Npgsql Documentation",
    "keywords": "Interface INpgsqlTypeMapper A type mapper, managing how to read and write CLR values to PostgreSQL data types. A type mapper exists for each connection, as well as a single global type mapper (accessible via NpgsqlConnection.GlobalTypeMapper ). Namespace : Npgsql.TypeMapping Assembly : Npgsql.dll Syntax public interface INpgsqlTypeMapper Properties | Improve this Doc View Source DefaultNameTranslator The default name translator to convert CLR type names and member names. Declaration INpgsqlNameTranslator DefaultNameTranslator { get; } Property Value Type Description INpgsqlNameTranslator | Improve this Doc View Source Mappings Enumerates all mappings currently set up on this type mapper. Declaration IEnumerable<NpgsqlTypeMapping> Mappings { get; } Property Value Type Description System.Collections.Generic.IEnumerable < NpgsqlTypeMapping > Methods | Improve this Doc View Source AddMapping(NpgsqlTypeMapping) Adds a new type mapping to this mapper, overwriting any existing mapping in the process. Declaration INpgsqlTypeMapper AddMapping(NpgsqlTypeMapping mapping) Parameters Type Name Description NpgsqlTypeMapping mapping Returns Type Description INpgsqlTypeMapper | Improve this Doc View Source MapComposite<T>(String, INpgsqlNameTranslator) Maps a CLR type to a PostgreSQL composite type. Declaration INpgsqlTypeMapper MapComposite<T>(string pgName = null, INpgsqlNameTranslator nameTranslator = null) Parameters Type Name Description System.String pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Returns Type Description INpgsqlTypeMapper Type Parameters Name Description T The .NET type to be mapped Remarks CLR fields and properties by string to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator . You can also use the PgNameAttribute on your members to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while a composite is read or written, an exception will be raised. | Improve this Doc View Source MapEnum<TEnum>(String, INpgsqlNameTranslator) Maps a CLR enum to a PostgreSQL enum type. Declaration INpgsqlTypeMapper MapEnum<TEnum>(string pgName = null, INpgsqlNameTranslator nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description System.String pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Returns Type Description INpgsqlTypeMapper Type Parameters Name Description TEnum The .NET enum type to be mapped Remarks CLR enum labels are mapped by name to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator . You can also use the PgNameAttribute on your enum fields to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while an enum is read or written, an exception will be raised. | Improve this Doc View Source RemoveMapping(String) Removes an existing mapping from this mapper. Attempts to read or write this type after removal will result in an exception. Declaration bool RemoveMapping(string pgTypeName) Parameters Type Name Description System.String pgTypeName A PostgreSQL type name for the type in the database. Returns Type Description System.Boolean | Improve this Doc View Source Reset() Resets all mapping changes performed on this type mapper and reverts it to its original, starting state. Declaration void Reset() | Improve this Doc View Source UnmapComposite<T>(String, INpgsqlNameTranslator) Removes an existing enum mapping. Declaration bool UnmapComposite<T>(string pgName = null, INpgsqlNameTranslator nameTranslator = null) Parameters Type Name Description System.String pgName A PostgreSQL type name for the corresponding composite type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Returns Type Description System.Boolean Type Parameters Name Description T | Improve this Doc View Source UnmapEnum<TEnum>(String, INpgsqlNameTranslator) Removes an existing enum mapping. Declaration bool UnmapEnum<TEnum>(string pgName = null, INpgsqlNameTranslator nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description System.String pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Returns Type Description System.Boolean Type Parameters Name Description TEnum Extension Methods NpgsqlNetTopologySuiteExtensions.UseNetTopologySuite(INpgsqlTypeMapper, Nullable<CoordinateSequenceFactory>, Nullable<PrecisionModel>, Ordinates, Boolean) NpgsqlLegacyPostgisExtensions.UseLegacyPostgis(INpgsqlTypeMapper) NpgsqlNodaTimeExtensions.UseNodaTime(INpgsqlTypeMapper) NpgsqlGeoJSONExtensions.UseGeoJson(INpgsqlTypeMapper, GeoJSONOptions, Boolean) NpgsqlRawPostgisExtensions.UseRawPostgis(INpgsqlTypeMapper) NpgsqlJsonNetExtensions.UseJsonNet(INpgsqlTypeMapper, Type[], Type[], Nullable<JsonSerializerSettings>)"
  },
  "doc/api/Npgsql.NoticeEventHandler.html": {
    "href": "doc/api/Npgsql.NoticeEventHandler.html",
    "title": "Delegate NoticeEventHandler | Npgsql Documentation",
    "keywords": "Delegate NoticeEventHandler Represents a method that handles the Notice event. Namespace : Npgsql Assembly : Npgsql.dll Syntax public delegate void NoticeEventHandler(object sender, NpgsqlNoticeEventArgs e); Parameters Type Name Description System.Object sender The source of the event. NpgsqlNoticeEventArgs e A NpgsqlNoticeEventArgs that contains the notice information (e.g. message, severity...)."
  },
  "doc/api/Npgsql.NpgsqlRawPostgisExtensions.html": {
    "href": "doc/api/Npgsql.NpgsqlRawPostgisExtensions.html",
    "title": "Class NpgsqlRawPostgisExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlRawPostgisExtensions Extension adding the legacy PostGIS types to an Npgsql type mapper. Inheritance System.Object NpgsqlRawPostgisExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.RawPostgis.dll Syntax public static class NpgsqlRawPostgisExtensions Methods | Improve this Doc View Source UseRawPostgis(INpgsqlTypeMapper) Sets up the legacy PostGIS types to an Npgsql type mapper. Declaration public static INpgsqlTypeMapper UseRawPostgis(this INpgsqlTypeMapper mapper) Parameters Type Name Description INpgsqlTypeMapper mapper The type mapper to set up (global or connection-specific) Returns Type Description INpgsqlTypeMapper"
  },
  "doc/api/Npgsql.NpgsqlCopyTextReader.html": {
    "href": "doc/api/Npgsql.NpgsqlCopyTextReader.html",
    "title": "Class NpgsqlCopyTextReader | Npgsql Documentation",
    "keywords": "Class NpgsqlCopyTextReader Reader for a text export, initiated by BeginTextExport(String) . Inheritance System.Object System.MarshalByRefObject System.IO.TextReader System.IO.StreamReader NpgsqlCopyTextReader Implements System.IDisposable Inherited Members System.IO.StreamReader.Null System.IO.StreamReader.Close() System.IO.StreamReader.DiscardBufferedData() System.IO.StreamReader.Dispose(System.Boolean) System.IO.StreamReader.Peek() System.IO.StreamReader.Read() System.IO.StreamReader.Read(System.Char[], System.Int32, System.Int32) System.IO.StreamReader.Read(System.Span<System.Char>) System.IO.StreamReader.ReadAsync(System.Char[], System.Int32, System.Int32) System.IO.StreamReader.ReadAsync(System.Memory<System.Char>, System.Threading.CancellationToken) System.IO.StreamReader.ReadBlock(System.Char[], System.Int32, System.Int32) System.IO.StreamReader.ReadBlock(System.Span<System.Char>) System.IO.StreamReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32) System.IO.StreamReader.ReadBlockAsync(System.Memory<System.Char>, System.Threading.CancellationToken) System.IO.StreamReader.ReadLine() System.IO.StreamReader.ReadLineAsync() System.IO.StreamReader.ReadToEnd() System.IO.StreamReader.ReadToEndAsync() System.IO.StreamReader.BaseStream System.IO.StreamReader.CurrentEncoding System.IO.StreamReader.EndOfStream System.IO.TextReader.Dispose() System.IO.TextReader.Synchronized(System.IO.TextReader) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlCopyTextReader : StreamReader, ICancelable, IDisposable Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . Methods | Improve this Doc View Source Cancel() Cancels and terminates an ongoing import. Declaration public void Cancel() | Improve this Doc View Source CancelAsync() Cancels and terminates an ongoing import. Any data already written will be discarded. Declaration public Task CancelAsync() Returns Type Description System.Threading.Tasks.Task Implements System.IDisposable"
  },
  "doc/api/Npgsql.NpgsqlBinaryImporter.html": {
    "href": "doc/api/Npgsql.NpgsqlBinaryImporter.html",
    "title": "Class NpgsqlBinaryImporter | Npgsql Documentation",
    "keywords": "Class NpgsqlBinaryImporter Provides an API for a binary COPY FROM operation, a high-performance data import mechanism to a PostgreSQL table. Initiated by BeginBinaryImport(String) Inheritance System.Object NpgsqlBinaryImporter Implements System.IDisposable System.IAsyncDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlBinaryImporter : ICancelable, IDisposable, IAsyncDisposable Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . Methods | Improve this Doc View Source Close() Completes the import process and signals to the database to write everything. Declaration public void Close() | Improve this Doc View Source CloseAsync(CancellationToken) Async completes the import process and signals to the database to write everything. Declaration public ValueTask CloseAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.ValueTask Exceptions Type Condition System.Exception | Improve this Doc View Source Complete() Completes the import operation. The writer is unusable after this operation. Declaration public void Complete() | Improve this Doc View Source CompleteAsync(CancellationToken) Completes the import operation. The writer is unusable after this operation. Declaration public ValueTask<ulong> CompleteAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.ValueTask < System.UInt64 > | Improve this Doc View Source Dispose() Cancels that binary import and sets the connection back to idle state Declaration public void Dispose() | Improve this Doc View Source DisposeAsync() Async cancels that binary import and sets the connection back to idle state Declaration public ValueTask DisposeAsync() Returns Type Description System.Threading.Tasks.ValueTask | Improve this Doc View Source StartRow() Starts writing a single row, must be invoked before writing any columns. Declaration public void StartRow() | Improve this Doc View Source StartRowAsync(CancellationToken) Starts writing a single row, must be invoked before writing any columns. Declaration public Task StartRowAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write<T>(T) Writes a single column in the current row. Declaration public void Write<T>(T value) Parameters Type Name Description T value The value to be written Type Parameters Name Description T The type of the column to be written. This must correspond to the actual type or data corruption will occur. If in doubt, use Write<T>(T, NpgsqlDbType) to manually specify the type. | Improve this Doc View Source Write<T>(T, NpgsqlDbType) Writes a single column in the current row as type npgsqlDbType . Declaration public void Write<T>(T value, NpgsqlDbType npgsqlDbType) Parameters Type Name Description T value The value to be written NpgsqlDbType npgsqlDbType In some cases T isn't enough to infer the data type to be written to the database. This parameter and be used to unambiguously specify the type. An example is the JSONB type, for which T will be a simple string but for which npgsqlDbType must be specified as Jsonb . Type Parameters Name Description T The .NET type of the column to be written. | Improve this Doc View Source Write<T>(T, String) Writes a single column in the current row as type dataTypeName . Declaration public void Write<T>(T value, string dataTypeName) Parameters Type Name Description T value The value to be written System.String dataTypeName In some cases T isn't enough to infer the data type to be written to the database. This parameter and be used to unambiguously specify the type. Type Parameters Name Description T The .NET type of the column to be written. | Improve this Doc View Source WriteAsync<T>(T, NpgsqlDbType, CancellationToken) Writes a single column in the current row as type npgsqlDbType . Declaration public Task WriteAsync<T>(T value, NpgsqlDbType npgsqlDbType, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description T value The value to be written NpgsqlDbType npgsqlDbType In some cases T isn't enough to infer the data type to be written to the database. This parameter and be used to unambiguously specify the type. An example is the JSONB type, for which T will be a simple string but for which npgsqlDbType must be specified as Jsonb . System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T The .NET type of the column to be written. | Improve this Doc View Source WriteAsync<T>(T, String, CancellationToken) Writes a single column in the current row as type dataTypeName . Declaration public Task WriteAsync<T>(T value, string dataTypeName, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description T value The value to be written System.String dataTypeName In some cases T isn't enough to infer the data type to be written to the database. This parameter and be used to unambiguously specify the type. System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T The .NET type of the column to be written. | Improve this Doc View Source WriteAsync<T>(T, CancellationToken) Writes a single column in the current row. Declaration public Task WriteAsync<T>(T value, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description T value The value to be written System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description T The type of the column to be written. This must correspond to the actual type or data corruption will occur. If in doubt, use Write<T>(T, NpgsqlDbType) to manually specify the type. | Improve this Doc View Source WriteNull() Writes a single null column value. Declaration public void WriteNull() | Improve this Doc View Source WriteNullAsync(CancellationToken) Writes a single null column value. Declaration public Task WriteNullAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source WriteRow(Object[]) Writes an entire row of columns. Equivalent to calling StartRow() , followed by multiple Write<T>(T) on each value. Declaration public void WriteRow(params object[] values) Parameters Type Name Description System.Object [] values An array of column values to be written as a single row | Improve this Doc View Source WriteRowAsync(CancellationToken, Object[]) Writes an entire row of columns. Equivalent to calling StartRow() , followed by multiple Write<T>(T) on each value. Declaration public Task WriteRowAsync(CancellationToken cancellationToken = default(CancellationToken), params object[] values) Parameters Type Name Description System.Threading.CancellationToken cancellationToken System.Object [] values An array of column values to be written as a single row Returns Type Description System.Threading.Tasks.Task Implements System.IDisposable System.IAsyncDisposable"
  },
  "doc/api/Npgsql.TypeHandlers.InternalCharHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.InternalCharHandler.html",
    "title": "Class InternalCharHandler | Npgsql Documentation",
    "keywords": "Class InternalCharHandler A type handler for the PostgreSQL \"char\" type, used only internally. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.Char > NpgsqlSimpleTypeHandler < System.Char > InternalCharHandler Implements INpgsqlTypeHandler < System.Char > INpgsqlSimpleTypeHandler < System.Char > INpgsqlSimpleTypeHandler < System.Byte > INpgsqlSimpleTypeHandler < System.Int16 > INpgsqlSimpleTypeHandler < System.Int32 > INpgsqlSimpleTypeHandler < System.Int64 > Inherited Members NpgsqlSimpleTypeHandler<Char>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Char>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Char>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Char>.Write(Char, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<Char>.ValidateAndGetLength(Char, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Char>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Char>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Char>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Char>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<Char>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public class InternalCharHandler : NpgsqlSimpleTypeHandler<char>, INpgsqlTypeHandler<char>, INpgsqlSimpleTypeHandler<char>, INpgsqlSimpleTypeHandler<byte>, INpgsqlSimpleTypeHandler<short>, INpgsqlSimpleTypeHandler<int>, INpgsqlSimpleTypeHandler<long> Remarks See http://www.postgresql.org/docs/current/static/datatype-character.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source InternalCharHandler(PostgresType) Declaration public InternalCharHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override char Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Char Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Char>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Byte, NpgsqlParameter) Declaration public int ValidateAndGetLength(byte value, NpgsqlParameter parameter) Parameters Type Name Description System.Byte value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Char, NpgsqlParameter) Declaration public override int ValidateAndGetLength(char value, NpgsqlParameter parameter) Parameters Type Name Description System.Char value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Char>.ValidateAndGetLength(System.Char, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(Int16, NpgsqlParameter) Declaration public int ValidateAndGetLength(short value, NpgsqlParameter parameter) Parameters Type Name Description System.Int16 value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Int32, NpgsqlParameter) Declaration public int ValidateAndGetLength(int value, NpgsqlParameter parameter) Parameters Type Name Description System.Int32 value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Int64, NpgsqlParameter) Declaration public int ValidateAndGetLength(long value, NpgsqlParameter parameter) Parameters Type Name Description System.Int64 value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source Write(Byte, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(byte value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Byte value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Char, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(char value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Char value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Char>.Write(System.Char, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Int16, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(short value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Int16 value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Int32, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(int value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Int32 value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Int64, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Int64 value NpgsqlWriteBuffer buf NpgsqlParameter parameter Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<Byte>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration byte INpgsqlSimpleTypeHandler<byte>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Byte | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int16>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration short INpgsqlSimpleTypeHandler<short>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Int16 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int32>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration int INpgsqlSimpleTypeHandler<int>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Int32 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int64>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration long INpgsqlSimpleTypeHandler<long>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Int64 Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.GeoJSON.GeoJSONHandlerFactory.html": {
    "href": "doc/api/Npgsql.GeoJSON.GeoJSONHandlerFactory.html",
    "title": "Class GeoJSONHandlerFactory | Npgsql Documentation",
    "keywords": "Class GeoJSONHandlerFactory Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < GeoJSONObject > GeoJSONHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<GeoJSONObject>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<GeoJSONObject>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.GeoJSON Assembly : Npgsql.GeoJSON.dll Syntax public sealed class GeoJSONHandlerFactory : NpgsqlTypeHandlerFactory<GeoJSONObject> Constructors | Improve this Doc View Source GeoJSONHandlerFactory(GeoJSONOptions) Declaration public GeoJSONHandlerFactory(GeoJSONOptions options = GeoJSONOptions.None) Parameters Type Name Description GeoJSONOptions options Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<GeoJSONObject> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < GeoJSONObject > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<GeoJSONObject>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandler.html",
    "title": "Class TimestampHandler | Npgsql Documentation",
    "keywords": "Class TimestampHandler A type handler for the PostgreSQL timestamp data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.DateTime > NpgsqlSimpleTypeHandler < System.DateTime > NpgsqlSimpleTypeHandlerWithPsv < System.DateTime , NpgsqlDateTime > TimestampHandler TimestampTzHandler Implements INpgsqlTypeHandler < System.DateTime > INpgsqlSimpleTypeHandler < System.DateTime > INpgsqlSimpleTypeHandler < NpgsqlDateTime > Inherited Members NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDateTime>.ReadPsv(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDateTime>.INpgsqlSimpleTypeHandler<NpgsqlDateTime>.Read(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDateTime>.ValidateAndGetLength(NpgsqlDateTime, NpgsqlParameter) NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDateTime>.Write(NpgsqlDateTime, NpgsqlWriteBuffer, NpgsqlParameter) NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDateTime>.CreateArrayHandler(PostgresArrayType) NpgsqlSimpleTypeHandler<DateTime>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<DateTime>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<DateTime>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<DateTime>.Write(DateTime, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<DateTime>.ValidateAndGetLength(DateTime, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<DateTime>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<DateTime>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<DateTime>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<DateTime>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<DateTime>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class TimestampHandler : NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDateTime>, INpgsqlTypeHandler<DateTime>, INpgsqlSimpleTypeHandler<DateTime>, INpgsqlSimpleTypeHandler<NpgsqlDateTime> Remarks See http://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Fields | Improve this Doc View Source ConvertInfinityDateTime Whether to convert positive and negative infinity values to DateTime.{Max,Min}Value when a DateTime is requested Declaration protected readonly bool ConvertInfinityDateTime Field Value Type Description System.Boolean Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override DateTime Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.DateTime Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.DateTime>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ReadPsv(NpgsqlReadBuffer, Int32, FieldDescription) Declaration protected override NpgsqlDateTime ReadPsv(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description NpgsqlDateTime Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<System.DateTime, NpgsqlTypes.NpgsqlDateTime>.ReadPsv(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ReadTimeStamp(NpgsqlReadBuffer, Int32, FieldDescription) Reads a timestamp from the buffer as an NpgsqlDateTime . Declaration protected NpgsqlDateTime ReadTimeStamp(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description NpgsqlDateTime | Improve this Doc View Source ValidateAndGetLength(NpgsqlDateTime, NpgsqlParameter) Declaration public override int ValidateAndGetLength(NpgsqlDateTime value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlDateTime value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<System.DateTime, NpgsqlTypes.NpgsqlDateTime>.ValidateAndGetLength(NpgsqlTypes.NpgsqlDateTime, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(DateTime, NpgsqlParameter) Declaration public override int ValidateAndGetLength(DateTime value, NpgsqlParameter parameter) Parameters Type Name Description System.DateTime value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.DateTime>.ValidateAndGetLength(System.DateTime, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlDateTime, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(NpgsqlDateTime value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlDateTime value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<System.DateTime, NpgsqlTypes.NpgsqlDateTime>.Write(NpgsqlTypes.NpgsqlDateTime, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(DateTime, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(DateTime value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.DateTime value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.DateTime>.Write(System.DateTime, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Logging.NpgsqlLogManager.html": {
    "href": "doc/api/Npgsql.Logging.NpgsqlLogManager.html",
    "title": "Class NpgsqlLogManager | Npgsql Documentation",
    "keywords": "Class NpgsqlLogManager Manages logging for Npgsql, used to set the logging provider. Inheritance System.Object NpgsqlLogManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.Logging Assembly : Npgsql.dll Syntax public static class NpgsqlLogManager Properties | Improve this Doc View Source IsParameterLoggingEnabled Determines whether parameter contents will be logged alongside SQL statements - this may reveal sensitive information. Defaults to false. Declaration public static bool IsParameterLoggingEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Provider The logging provider used for logging in Npgsql. Declaration public static INpgsqlLoggingProvider Provider { get; set; } Property Value Type Description INpgsqlLoggingProvider"
  },
  "doc/api/Npgsql.TypeHandling.NpgsqlSimpleTypeHandler-1.html": {
    "href": "doc/api/Npgsql.TypeHandling.NpgsqlSimpleTypeHandler-1.html",
    "title": "Class NpgsqlSimpleTypeHandler<TDefault> | Npgsql Documentation",
    "keywords": "Class NpgsqlSimpleTypeHandler<TDefault> Base class for all simple type handlers, which read and write short, non-arbitrary lengthed values to PostgreSQL. Provides a simpler API to implement when compared to NpgsqlTypeHandler - Npgsql takes care of all I/O before calling into this type, so no I/O needs to be performed by it. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler <TDefault> NpgsqlSimpleTypeHandler<TDefault> BoolHandler TimeHandler TimeTzHandler BoxHandler CircleHandler LineHandler LineSegmentHandler PointHandler InternalCharHandler CidrHandler MacaddrHandler DoubleHandler Int16Handler Int32Handler Int64Handler MoneyHandler NumericHandler SingleHandler UInt32Handler UuidHandler NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv> Implements INpgsqlTypeHandler <TDefault> INpgsqlSimpleTypeHandler <TDefault> Inherited Members NpgsqlTypeHandler<TDefault>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<TDefault>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<TDefault>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandling Assembly : Npgsql.dll Syntax public abstract class NpgsqlSimpleTypeHandler<TDefault> : NpgsqlTypeHandler<TDefault>, INpgsqlTypeHandler<TDefault>, INpgsqlSimpleTypeHandler<TDefault> Type Parameters Name Description TDefault The default CLR type that this handler will read and write. For example, calling System.Data.Common.DbDataReader.GetValue(System.Int32) on a column with this handler will return a value with type TDefault . Type handlers can support additional types by implementing INpgsqlTypeHandler<T> . Constructors | Improve this Doc View Source NpgsqlSimpleTypeHandler(PostgresType) Constructs an NpgsqlSimpleTypeHandler<TDefault> . Declaration protected NpgsqlSimpleTypeHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration public abstract TDefault Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. System.Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description TDefault The fully-read value. | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, using either sync or async I/O. This method is sealed for NpgsqlSimpleTypeHandler<TDefault> , override Read(NpgsqlReadBuffer, Int32, FieldDescription) . Declaration public override sealed ValueTask<TDefault> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. System.Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. System.Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description System.Threading.Tasks.ValueTask <TDefault> The fully-read value. Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, using either sync or async I/O. This method is sealed for NpgsqlSimpleTypeHandler<TDefault> . Declaration protected override sealed ValueTask<TAny> Read<TAny>(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. System.Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. System.Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description System.Threading.Tasks.ValueTask <TAny> The fully-read value. Type Parameters Name Description TAny Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.Read<TAny>(Npgsql.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(TDefault, ref NpgsqlLengthCache, NpgsqlParameter) Simple type handlers override ValidateAndGetLength(TDefault, NpgsqlParameter) instead of this. Declaration public override sealed int ValidateAndGetLength(TDefault value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description TDefault value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.ValidateAndGetLength(TDefault, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(TDefault, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public abstract int ValidateAndGetLength(TDefault value, NpgsqlParameter parameter) Parameters Type Name Description TDefault value The value to be written to PostgreSQL NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description System.Int32 The number of bytes required to write the value. | Improve this Doc View Source ValidateAndGetLength<TAny>(TAny, ref NpgsqlLengthCache, NpgsqlParameter) This method is sealed, override ValidateAndGetLength(TDefault, NpgsqlParameter) . Declaration protected override int ValidateAndGetLength<TAny>(TAny value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description TAny value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Type Parameters Name Description TAny Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.ValidateAndGetLength<TAny>(TAny, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateObjectAndGetLength(Object, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a non-generic NpgsqlParameter . Type handlers generally don't need to override this. Declaration protected override int ValidateObjectAndGetLength(object value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Object value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.ValidateObjectAndGetLength(System.Object, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(TDefault, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Simple type handlers override Write(TDefault, NpgsqlWriteBuffer, NpgsqlParameter) instead of this. Declaration public override sealed Task Write(TDefault value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description TDefault value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.Write(TDefault, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean) | Improve this Doc View Source Write(TDefault, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public abstract void Write(TDefault value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description TDefault value The value to write. NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). | Improve this Doc View Source WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Called to write the value of a non-generic NpgsqlParameter . Type handlers generally don't need to override this. Declaration protected override Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Object value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.WriteObjectWithLength(System.Object, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryAnd.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryAnd.html",
    "title": "Class NpgsqlTsQueryAnd | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryAnd TsQuery And node. Inheritance System.Object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryAnd Inherited Members NpgsqlTsQueryBinOp.Left NpgsqlTsQueryBinOp.Right NpgsqlTsQuery.Kind NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public sealed class NpgsqlTsQueryAnd : NpgsqlTsQueryBinOp Constructors | Improve this Doc View Source NpgsqlTsQueryAnd(NpgsqlTsQuery, NpgsqlTsQuery) Creates an and operator, with two given child nodes. Declaration public NpgsqlTsQueryAnd(NpgsqlTsQuery left, NpgsqlTsQuery right) Parameters Type Name Description NpgsqlTsQuery left NpgsqlTsQuery right"
  },
  "doc/api/Npgsql.TypeHandling.NpgsqlTypeHandlerFactory-1.html": {
    "href": "doc/api/Npgsql.TypeHandling.NpgsqlTypeHandlerFactory-1.html",
    "title": "Class NpgsqlTypeHandlerFactory<TDefault> | Npgsql Documentation",
    "keywords": "Class NpgsqlTypeHandlerFactory<TDefault> Base class for all type handler factories, which construct type handlers that know how to read and write CLR types from/to PostgreSQL types. Type handler factories are set up via NpgsqlTypeMapping in either the global or connection-specific type mapper. Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory<TDefault> GeoJSONHandlerFactory JsonbHandlerFactory JsonHandlerFactory LegacyPostgisHandlerFactory NetTopologySuiteHandlerFactory DateHandlerFactory IntervalHandlerFactory TimeHandlerFactory TimestampHandlerFactory TimestampTzHandlerFactory TimeTzHandlerFactory PostgisRawHandlerFactory DateHandlerFactory IntervalHandlerFactory TimeHandlerFactory TimestampHandlerFactory TimestampTzHandlerFactory TimeTzHandlerFactory HstoreHandlerFactory JsonbHandlerFactory JsonHandlerFactory TextHandlerFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandling Assembly : Npgsql.dll Syntax public abstract class NpgsqlTypeHandlerFactory<TDefault> : NpgsqlTypeHandlerFactory Type Parameters Name Description TDefault The default CLR type that handlers produced by this factory will read and write. Properties | Improve this Doc View Source DefaultValueType The default CLR type that handlers produced by this factory will read and write. Declaration public override Type DefaultValueType { get; } Property Value Type Description System.Type Overrides NpgsqlTypeHandlerFactory.DefaultValueType Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Creates a type handler. Declaration public abstract NpgsqlTypeHandler<TDefault> Create(PostgresType pgType, NpgsqlConnection conn) Parameters Type Name Description PostgresType pgType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler <TDefault> | Improve this Doc View Source CreateNonGeneric(PostgresType, NpgsqlConnection) Creates a type handler. Declaration public override NpgsqlTypeHandler CreateNonGeneric(PostgresType pgType, NpgsqlConnection conn) Parameters Type Name Description PostgresType pgType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler Overrides NpgsqlTypeHandlerFactory.CreateNonGeneric(PostgresType, NpgsqlConnection) See Also NpgsqlTypeMapping GlobalTypeMapper TypeMapper"
  },
  "doc/api/Npgsql.NpgsqlNoticeEventArgs.html": {
    "href": "doc/api/Npgsql.NpgsqlNoticeEventArgs.html",
    "title": "Class NpgsqlNoticeEventArgs | Npgsql Documentation",
    "keywords": "Class NpgsqlNoticeEventArgs Provides data for a PostgreSQL notice event. Inheritance System.Object System.EventArgs NpgsqlNoticeEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlNoticeEventArgs : EventArgs Properties | Improve this Doc View Source Notice The Notice that was sent from the database. Declaration public PostgresNotice Notice { get; } Property Value Type Description PostgresNotice"
  },
  "doc/api/Npgsql.TypeHandlers.GeometricHandlers.CircleHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.GeometricHandlers.CircleHandler.html",
    "title": "Class CircleHandler | Npgsql Documentation",
    "keywords": "Class CircleHandler A type handler for the PostgreSQL circle data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlCircle > NpgsqlSimpleTypeHandler < NpgsqlCircle > CircleHandler Implements INpgsqlTypeHandler < NpgsqlCircle > INpgsqlSimpleTypeHandler < NpgsqlCircle > Inherited Members NpgsqlSimpleTypeHandler<NpgsqlCircle>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<NpgsqlCircle>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<NpgsqlCircle>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<NpgsqlCircle>.Write(NpgsqlCircle, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<NpgsqlCircle>.ValidateAndGetLength(NpgsqlCircle, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<NpgsqlCircle>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<NpgsqlCircle>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlCircle>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlCircle>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<NpgsqlCircle>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.GeometricHandlers Assembly : Npgsql.dll Syntax public class CircleHandler : NpgsqlSimpleTypeHandler<NpgsqlCircle>, INpgsqlTypeHandler<NpgsqlCircle>, INpgsqlSimpleTypeHandler<NpgsqlCircle> Remarks See http://www.postgresql.org/docs/current/static/datatype-geometric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source CircleHandler(PostgresType) Declaration public CircleHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override NpgsqlCircle Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description NpgsqlCircle Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlCircle>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlCircle, NpgsqlParameter) Declaration public override int ValidateAndGetLength(NpgsqlCircle value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlCircle value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlCircle>.ValidateAndGetLength(NpgsqlTypes.NpgsqlCircle, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlCircle, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(NpgsqlCircle value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlCircle value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlCircle>.Write(NpgsqlTypes.NpgsqlCircle, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlPoint.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlPoint.html",
    "title": "Struct NpgsqlPoint | Npgsql Documentation",
    "keywords": "Struct NpgsqlPoint Represents a PostgreSQL point type. Implements System.IEquatable < NpgsqlPoint > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlPoint : IEquatable<NpgsqlPoint> Remarks See http://www.postgresql.org/docs/current/static/datatype-geometric.html Constructors | Improve this Doc View Source NpgsqlPoint(Double, Double) Declaration public NpgsqlPoint(double x, double y) Parameters Type Name Description System.Double x System.Double y Properties | Improve this Doc View Source X Declaration public double X { get; set; } Property Value Type Description System.Double | Improve this Doc View Source Y Declaration public double Y { get; set; } Property Value Type Description System.Double Methods | Improve this Doc View Source Equals(NpgsqlPoint) Declaration public bool Equals(NpgsqlPoint other) Parameters Type Name Description NpgsqlPoint other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Parse(String) Declaration public static NpgsqlPoint Parse(string s) Parameters Type Name Description System.String s Returns Type Description NpgsqlPoint | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlPoint, NpgsqlPoint) Declaration public static bool operator ==(NpgsqlPoint x, NpgsqlPoint y) Parameters Type Name Description NpgsqlPoint x NpgsqlPoint y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlPoint, NpgsqlPoint) Declaration public static bool operator !=(NpgsqlPoint x, NpgsqlPoint y) Parameters Type Name Description NpgsqlPoint x NpgsqlPoint y Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "doc/api/Npgsql.TypeHandlers.NumericHandlers.DoubleHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.NumericHandlers.DoubleHandler.html",
    "title": "Class DoubleHandler | Npgsql Documentation",
    "keywords": "Class DoubleHandler A type handler for the PostgreSQL double precision data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.Double > NpgsqlSimpleTypeHandler < System.Double > DoubleHandler Implements INpgsqlTypeHandler < System.Double > INpgsqlSimpleTypeHandler < System.Double > Inherited Members NpgsqlSimpleTypeHandler<Double>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Double>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Double>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Double>.Write(Double, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<Double>.ValidateAndGetLength(Double, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Double>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Double>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Double>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Double>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<Double>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class DoubleHandler : NpgsqlSimpleTypeHandler<double>, INpgsqlTypeHandler<double>, INpgsqlSimpleTypeHandler<double> Remarks See http://www.postgresql.org/docs/current/static/datatype-numeric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source DoubleHandler(PostgresType) Declaration public DoubleHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override double Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Double Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Double>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Double, NpgsqlParameter) Declaration public override int ValidateAndGetLength(double value, NpgsqlParameter parameter) Parameters Type Name Description System.Double value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Double>.ValidateAndGetLength(System.Double, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Double, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(double value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Double value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Double>.Write(System.Double, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.TypeHandlers.NumericHandlers.NumericHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.NumericHandlers.NumericHandler.html",
    "title": "Class NumericHandler | Npgsql Documentation",
    "keywords": "Class NumericHandler A type handler for the PostgreSQL numeric data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.Decimal > NpgsqlSimpleTypeHandler < System.Decimal > NumericHandler Implements INpgsqlTypeHandler < System.Decimal > INpgsqlSimpleTypeHandler < System.Decimal > INpgsqlSimpleTypeHandler < System.Byte > INpgsqlSimpleTypeHandler < System.Int16 > INpgsqlSimpleTypeHandler < System.Int32 > INpgsqlSimpleTypeHandler < System.Int64 > INpgsqlSimpleTypeHandler < System.Single > INpgsqlSimpleTypeHandler < System.Double > Inherited Members NpgsqlSimpleTypeHandler<Decimal>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Decimal>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Decimal>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Decimal>.Write(Decimal, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<Decimal>.ValidateAndGetLength(Decimal, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Decimal>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Decimal>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Decimal>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Decimal>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<Decimal>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class NumericHandler : NpgsqlSimpleTypeHandler<decimal>, INpgsqlTypeHandler<decimal>, INpgsqlSimpleTypeHandler<decimal>, INpgsqlSimpleTypeHandler<byte>, INpgsqlSimpleTypeHandler<short>, INpgsqlSimpleTypeHandler<int>, INpgsqlSimpleTypeHandler<long>, INpgsqlSimpleTypeHandler<float>, INpgsqlSimpleTypeHandler<double> Remarks See http://www.postgresql.org/docs/current/static/datatype-numeric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source NumericHandler(PostgresType) Declaration public NumericHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override decimal Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Decimal Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Decimal>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Byte, NpgsqlParameter) Declaration public int ValidateAndGetLength(byte value, NpgsqlParameter parameter) Parameters Type Name Description System.Byte value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Decimal, NpgsqlParameter) Declaration public override int ValidateAndGetLength(decimal value, NpgsqlParameter parameter) Parameters Type Name Description System.Decimal value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Decimal>.ValidateAndGetLength(System.Decimal, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(Double, NpgsqlParameter) Declaration public int ValidateAndGetLength(double value, NpgsqlParameter parameter) Parameters Type Name Description System.Double value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Int16, NpgsqlParameter) Declaration public int ValidateAndGetLength(short value, NpgsqlParameter parameter) Parameters Type Name Description System.Int16 value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Int32, NpgsqlParameter) Declaration public int ValidateAndGetLength(int value, NpgsqlParameter parameter) Parameters Type Name Description System.Int32 value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Int64, NpgsqlParameter) Declaration public int ValidateAndGetLength(long value, NpgsqlParameter parameter) Parameters Type Name Description System.Int64 value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Single, NpgsqlParameter) Declaration public int ValidateAndGetLength(float value, NpgsqlParameter parameter) Parameters Type Name Description System.Single value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source Write(Byte, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(byte value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Byte value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Decimal, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(decimal value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Decimal value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Decimal>.Write(System.Decimal, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Double, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(double value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Double value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Int16, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(short value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Int16 value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Int32, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(int value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Int32 value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Int64, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Int64 value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Single, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(float value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Single value NpgsqlWriteBuffer buf NpgsqlParameter parameter Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<Byte>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration byte INpgsqlSimpleTypeHandler<byte>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Byte | Improve this Doc View Source INpgsqlSimpleTypeHandler<Double>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration double INpgsqlSimpleTypeHandler<double>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Double | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int16>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration short INpgsqlSimpleTypeHandler<short>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Int16 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int32>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration int INpgsqlSimpleTypeHandler<int>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Int32 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int64>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration long INpgsqlSimpleTypeHandler<long>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Int64 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Single>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration float INpgsqlSimpleTypeHandler<float>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Single Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.LegacyPostgis.PostgisMultiLineString.html": {
    "href": "doc/api/Npgsql.LegacyPostgis.PostgisMultiLineString.html",
    "title": "Class PostgisMultiLineString | Npgsql Documentation",
    "keywords": "Class PostgisMultiLineString Represents a Postgis 2D MultiLineString Inheritance System.Object PostgisGeometry PostgisMultiLineString Implements System.IEquatable < PostgisMultiLineString > System.Collections.Generic.IEnumerable < PostgisLineString > System.Collections.IEnumerable Inherited Members PostgisGeometry.SRID System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.LegacyPostgis Assembly : Npgsql.LegacyPostgis.dll Syntax public sealed class PostgisMultiLineString : PostgisGeometry, IEquatable<PostgisMultiLineString>, IEnumerable<PostgisLineString>, IEnumerable Constructors | Improve this Doc View Source PostgisMultiLineString(PostgisLineString[]) Declaration public PostgisMultiLineString(PostgisLineString[] linestrings) Parameters Type Name Description PostgisLineString [] linestrings | Improve this Doc View Source PostgisMultiLineString(IEnumerable<PostgisLineString>) Declaration public PostgisMultiLineString(IEnumerable<PostgisLineString> linestrings) Parameters Type Name Description System.Collections.Generic.IEnumerable < PostgisLineString > linestrings | Improve this Doc View Source PostgisMultiLineString(IEnumerable<IEnumerable<Coordinate2D>>) Declaration public PostgisMultiLineString(IEnumerable<IEnumerable<Coordinate2D>> pointList) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < Coordinate2D >> pointList Properties | Improve this Doc View Source Item[Int32] Declaration public PostgisLineString this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description PostgisLineString | Improve this Doc View Source LineCount Declaration public int LineCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(PostgisMultiLineString) Declaration public bool Equals(PostgisMultiLineString other) Parameters Type Name Description PostgisMultiLineString other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<PostgisLineString> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < PostgisLineString > | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetLenHelper() Declaration protected override int GetLenHelper() Returns Type Description System.Int32 Overrides PostgisGeometry.GetLenHelper() Operators | Improve this Doc View Source Equality(PostgisMultiLineString, PostgisMultiLineString) Declaration public static bool operator ==(PostgisMultiLineString x, PostgisMultiLineString y) Parameters Type Name Description PostgisMultiLineString x PostgisMultiLineString y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(PostgisMultiLineString, PostgisMultiLineString) Declaration public static bool operator !=(PostgisMultiLineString x, PostgisMultiLineString y) Parameters Type Name Description PostgisMultiLineString x PostgisMultiLineString y Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.IEquatable<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "doc/api/Npgsql.TypeHandlers.JsonHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.JsonHandler.html",
    "title": "Class JsonHandler | Npgsql Documentation",
    "keywords": "Class JsonHandler A type handler for the PostgreSQL json and jsonb data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.String > JsonHandler Implements INpgsqlTypeHandler < System.String > Inherited Members NpgsqlTypeHandler<String>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<String>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public class JsonHandler : NpgsqlTypeHandler<string>, INpgsqlTypeHandler<string>, ITextReaderHandler Remarks See https://www.postgresql.org/docs/current/datatype-json.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source JsonHandler(PostgresType, NpgsqlConnection, Boolean, Nullable<JsonSerializerOptions>) Declaration protected JsonHandler(PostgresType postgresType, NpgsqlConnection connection, bool isJsonb, JsonSerializerOptions? serializerOptions = default(JsonSerializerOptions? )) Parameters Type Name Description PostgresType postgresType NpgsqlConnection connection System.Boolean isJsonb System.Nullable < JsonSerializerOptions > serializerOptions Methods | Improve this Doc View Source GetTextReader(Stream) Declaration public TextReader GetTextReader(Stream stream) Parameters Type Name Description System.IO.Stream stream Returns Type Description System.IO.TextReader | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override ValueTask<string> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < System.String > Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.String>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source Read<T>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration protected override ValueTask<T> Read<T>(NpgsqlReadBuffer buf, int byteLen, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 byteLen System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask <T> Type Parameters Name Description T Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.String>.Read<TAny>(Npgsql.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(String, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(string value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.String value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.String>.ValidateAndGetLength(System.String, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength<TAny>(TAny, ref NpgsqlLengthCache, NpgsqlParameter) Declaration protected override int ValidateAndGetLength<TAny>(TAny value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description TAny value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Type Parameters Name Description TAny Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.String>.ValidateAndGetLength<TAny>(TAny, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateObjectAndGetLength(Object, ref NpgsqlLengthCache, NpgsqlParameter) Declaration protected override int ValidateObjectAndGetLength(object value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Object value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.String>.ValidateObjectAndGetLength(System.Object, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(String, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public override Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.String value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.String>.Write(System.String, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean) | Improve this Doc View Source WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration protected override Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Object value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.String>.WriteObjectWithLength(System.Object, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean) | Improve this Doc View Source WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration protected override Task WriteWithLength<TAny>(TAny value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description TAny value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TAny Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.String>.WriteWithLength<TAny>(TAny, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean) Implements INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.ProvideClientCertificatesCallback.html": {
    "href": "doc/api/Npgsql.ProvideClientCertificatesCallback.html",
    "title": "Delegate ProvideClientCertificatesCallback | Npgsql Documentation",
    "keywords": "Delegate ProvideClientCertificatesCallback Represents the method that allows the application to provide a certificate collection to be used for SSL client authentication Namespace : Npgsql Assembly : Npgsql.dll Syntax public delegate void ProvideClientCertificatesCallback(X509CertificateCollection certificates); Parameters Type Name Description System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates A System.Security.Cryptography.X509Certificates.X509CertificateCollection to be filled with one or more client certificates."
  },
  "doc/api/Npgsql.PostgresTypes.PostgresType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresType.html",
    "title": "Class PostgresType | Npgsql Documentation",
    "keywords": "Class PostgresType Represents a PostgreSQL data type, such as int4 or text, as discovered from pg_type. This class is abstract, see derived classes for concrete types of PostgreSQL types. Inheritance System.Object PostgresType PostgresArrayType PostgresBaseType PostgresCompositeType PostgresDomainType PostgresEnumType PostgresRangeType UnknownBackendType Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public abstract class PostgresType Remarks Instances of this class are shared between connections to the same databases. For more info about what this class and its subclasses represent, see https://www.postgresql.org/docs/current/static/catalog-pg-type.html . Constructors | Improve this Doc View Source PostgresType(String, String, String, UInt32) Constructs a representation of a PostgreSQL data type. Declaration protected PostgresType(string ns, string name, string internalName, uint oid) Parameters Type Name Description System.String ns The data type's namespace (or schema). System.String name The data type's name. System.String internalName The data type's internal name (e.g. _int4 for integer[]). System.UInt32 oid The data type's OID. | Improve this Doc View Source PostgresType(String, String, UInt32) Constructs a representation of a PostgreSQL data type. Declaration protected PostgresType(string ns, string name, uint oid) Parameters Type Name Description System.String ns The data type's namespace (or schema). System.String name The data type's name. System.UInt32 oid The data type's OID. Properties | Improve this Doc View Source Array If a PostgreSQL array type exists for this type, it will be referenced here. Otherwise null. Declaration public PostgresArrayType Array { get; } Property Value Type Description PostgresArrayType | Improve this Doc View Source DisplayName A display name for this backend type, including the namespace unless it is pg_catalog (the namespace for all built-in types). Declaration public string DisplayName { get; } Property Value Type Description System.String | Improve this Doc View Source FullName The full name of the backend type, including its namespace. Declaration public string FullName { get; } Property Value Type Description System.String | Improve this Doc View Source InternalName The data type's internal PostgreSQL name (e.g. integer[] not _int4). See Name for a more user-friendly name. Declaration public string InternalName { get; } Property Value Type Description System.String | Improve this Doc View Source Name The data type's name. Declaration public string Name { get; } Property Value Type Description System.String Remarks Note that this is the standard, user-displayable type name (e.g. integer[]) rather than the internal PostgreSQL name as it is in pg_type (_int4). See InternalName for the latter. | Improve this Doc View Source Namespace The data type's namespace (or schema). Declaration public string Namespace { get; } Property Value Type Description System.String | Improve this Doc View Source OID The data type's OID - a unique id identifying the data type in a given database (in pg_type). Declaration public uint OID { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source Range If a PostgreSQL range type exists for this type, it will be referenced here. Otherwise null. Declaration public PostgresRangeType Range { get; } Property Value Type Description PostgresRangeType Methods | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "doc/api/Npgsql.TypeHandling.html": {
    "href": "doc/api/Npgsql.TypeHandling.html",
    "title": "Namespace Npgsql.TypeHandling | Npgsql Documentation",
    "keywords": "Namespace Npgsql.TypeHandling Classes NpgsqlSafeReadException Can be thrown by readers to indicate that interpreting the value failed, but the value was read wholly and it is safe to continue reading. Any other exception is assumed to leave the buffer in an unknown position, losing protocol sync and therefore setting the connector to state Broken. Note that an inner exception is mandatory, and will get thrown to the user instead of the NpgsqlSafeReadException. NpgsqlSimpleTypeHandler<TDefault> Base class for all simple type handlers, which read and write short, non-arbitrary lengthed values to PostgreSQL. Provides a simpler API to implement when compared to NpgsqlTypeHandler - Npgsql takes care of all I/O before calling into this type, so no I/O needs to be performed by it. NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv> A simple type handler that supports a provider-specific value in addition to its default value. This is necessary mainly in cases where the CLR type cannot represent the full range of the PostgreSQL type, and a custom CLR type is needed (e.g. System.DateTime and NpgsqlDateTime ). The provider-specific type TPsv will be returned from calls to System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32) . NpgsqlTypeHandler Base class for all type handlers, which read and write CLR types into their PostgreSQL binary representation. Type handler writers shouldn't inherit from this class, inherit NpgsqlTypeHandler or NpgsqlSimpleTypeHandler<TDefault> instead. NpgsqlTypeHandler<TDefault> Base class for all type handlers, which read and write CLR types into their PostgreSQL binary representation. Unless your type is arbitrary-length, consider inheriting from NpgsqlSimpleTypeHandler<TDefault> instead. NpgsqlTypeHandlerFactory Base class for all type handler factories, which construct type handlers that know how to read and write CLR types from/to PostgreSQL types. NpgsqlTypeHandlerFactory<TDefault> Base class for all type handler factories, which construct type handlers that know how to read and write CLR types from/to PostgreSQL types. Type handler factories are set up via NpgsqlTypeMapping in either the global or connection-specific type mapper. Interfaces INpgsqlSimpleTypeHandler<T> Type handlers that wish to support reading other types in additional to the main one can implement this interface for all those types. INpgsqlTypeHandler<T> Type handlers that wish to support reading other types in additional to the main one can implement this interface for all those types."
  },
  "doc/api/Npgsql.TypeHandlers.NetworkHandlers.html": {
    "href": "doc/api/Npgsql.TypeHandlers.NetworkHandlers.html",
    "title": "Namespace Npgsql.TypeHandlers.NetworkHandlers | Npgsql Documentation",
    "keywords": "Namespace Npgsql.TypeHandlers.NetworkHandlers Classes CidrHandler A type handler for the PostgreSQL cidr data type. InetHandler A type handler for the PostgreSQL cidr data type. MacaddrHandler A type handler for the PostgreSQL macaddr and macaddr8 data types."
  },
  "doc/api/Npgsql.GeoJSON.html": {
    "href": "doc/api/Npgsql.GeoJSON.html",
    "title": "Namespace Npgsql.GeoJSON | Npgsql Documentation",
    "keywords": "Namespace Npgsql.GeoJSON Classes GeoJSONHandlerFactory Enums GeoJSONOptions"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.html",
    "title": "Struct NpgsqlTsVector.Lexeme | Npgsql Documentation",
    "keywords": "Struct NpgsqlTsVector.Lexeme Represents a lexeme. A lexeme consists of a text string and optional word entry positions. Implements System.IEquatable < NpgsqlTsVector.Lexeme > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct Lexeme : IEquatable<NpgsqlTsVector.Lexeme> Constructors | Improve this Doc View Source Lexeme(String) Creates a lexeme with no word entry positions. Declaration public Lexeme(string text) Parameters Type Name Description System.String text | Improve this Doc View Source Lexeme(String, List<NpgsqlTsVector.Lexeme.WordEntryPos>) Creates a lexeme with word entry positions. Declaration public Lexeme(string text, List<NpgsqlTsVector.Lexeme.WordEntryPos> wordEntryPositions) Parameters Type Name Description System.String text System.Collections.Generic.List < NpgsqlTsVector.Lexeme.WordEntryPos > wordEntryPositions Properties | Improve this Doc View Source Count Gets the number of word entry positions. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Gets a word entry position. Declaration public NpgsqlTsVector.Lexeme.WordEntryPos this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description NpgsqlTsVector.Lexeme.WordEntryPos | Improve this Doc View Source Text Gets or sets the text. Declaration public string Text { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source Equals(NpgsqlTsVector.Lexeme) Determines whether the specified object is equal to the current object. Declaration public bool Equals(NpgsqlTsVector.Lexeme o) Parameters Type Name Description NpgsqlTsVector.Lexeme o Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets a hash code for the current object. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Creates a string representation in PostgreSQL's format. Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlTsVector.Lexeme, NpgsqlTsVector.Lexeme) Determines whether the specified object is equal to the current object. Declaration public static bool operator ==(NpgsqlTsVector.Lexeme left, NpgsqlTsVector.Lexeme right) Parameters Type Name Description NpgsqlTsVector.Lexeme left NpgsqlTsVector.Lexeme right Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlTsVector.Lexeme, NpgsqlTsVector.Lexeme) Determines whether the specified object is unequal to the current object. Declaration public static bool operator !=(NpgsqlTsVector.Lexeme left, NpgsqlTsVector.Lexeme right) Parameters Type Name Description NpgsqlTsVector.Lexeme left NpgsqlTsVector.Lexeme right Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryOr.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryOr.html",
    "title": "Class NpgsqlTsQueryOr | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryOr TsQuery Or Node. Inheritance System.Object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryOr Inherited Members NpgsqlTsQueryBinOp.Left NpgsqlTsQueryBinOp.Right NpgsqlTsQuery.Kind NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public sealed class NpgsqlTsQueryOr : NpgsqlTsQueryBinOp Constructors | Improve this Doc View Source NpgsqlTsQueryOr(NpgsqlTsQuery, NpgsqlTsQuery) Creates an or operator, with two given child nodes. Declaration public NpgsqlTsQueryOr(NpgsqlTsQuery left, NpgsqlTsQuery right) Parameters Type Name Description NpgsqlTsQuery left NpgsqlTsQuery right"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlGeometryMemberTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlGeometryMemberTranslator.html",
    "title": "Class NpgsqlGeometryMemberTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlGeometryMemberTranslator Inheritance System.Object NpgsqlGeometryMemberTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlGeometryMemberTranslator : IMemberTranslator Constructors | Improve this Doc View Source NpgsqlGeometryMemberTranslator(ISqlExpressionFactory, IRelationalTypeMappingSource) Declaration public NpgsqlGeometryMemberTranslator(ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Improve this Doc View Source Translate(SqlExpression, MemberInfo, Type) Declaration public SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType) Parameters Type Name Description SqlExpression instance System.Reflection.MemberInfo member System.Type returnType Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlInetTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlInetTypeMapping.html",
    "title": "Class NpgsqlInetTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlInetTypeMapping The type mapping for the PostgreSQL inet type. Inheritance System.Object NpgsqlTypeMapping NpgsqlInetTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlInetTypeMapping : NpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-net-types.html#DATATYPE-INET Constructors | Improve this Doc View Source NpgsqlInetTypeMapping() Constructs an instance of the NpgsqlInetTypeMapping class. Declaration public NpgsqlInetTypeMapping() | Improve this Doc View Source NpgsqlInetTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlInetTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlArrayTypeMapping.html",
    "title": "Class NpgsqlArrayTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlArrayTypeMapping Maps PostgreSQL arrays to .NET arrays. Only single-dimensional arrays are supported. Inheritance System.Object NpgsqlArrayTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlArrayTypeMapping : RelationalTypeMapping Remarks Note that mapping PostgreSQL arrays to .NET List{T} is also supported via NpgsqlListTypeMapping . See: https://www.postgresql.org/docs/current/static/arrays.html Constructors | Improve this Doc View Source NpgsqlArrayTypeMapping(RelationalTypeMapping, Type) Creates the default array mapping (i.e. for the single-dimensional CLR array type) Declaration public NpgsqlArrayTypeMapping(RelationalTypeMapping elementMapping, Type arrayType) Parameters Type Name Description RelationalTypeMapping elementMapping The element type mapping. System.Type arrayType The array type to map. | Improve this Doc View Source NpgsqlArrayTypeMapping(RelationalTypeMappingParameters, RelationalTypeMapping) Declaration protected NpgsqlArrayTypeMapping(RelationalTypeMappingParameters parameters, RelationalTypeMapping elementMapping) Parameters Type Name Description RelationalTypeMappingParameters parameters RelationalTypeMapping elementMapping | Improve this Doc View Source NpgsqlArrayTypeMapping(String, RelationalTypeMapping) Creates the default array mapping (i.e. for the single-dimensional CLR array type) Declaration public NpgsqlArrayTypeMapping(string storeType, RelationalTypeMapping elementMapping) Parameters Type Name Description System.String storeType The database type to map. RelationalTypeMapping elementMapping The element type mapping. Properties | Improve this Doc View Source ElementMapping The relational type mapping used to initialize the array mapping. Declaration public RelationalTypeMapping ElementMapping { get; } Property Value Type Description RelationalTypeMapping Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NpgsqlValueGenerationStrategyExtensions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NpgsqlValueGenerationStrategyExtensions.html",
    "title": "Class NpgsqlValueGenerationStrategyExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlValueGenerationStrategyExtensions Inheritance System.Object NpgsqlValueGenerationStrategyExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlValueGenerationStrategyExtensions Methods | Improve this Doc View Source IsIdentity(NpgsqlValueGenerationStrategy) Declaration public static bool IsIdentity(this NpgsqlValueGenerationStrategy strategy) Parameters Type Name Description NpgsqlValueGenerationStrategy strategy Returns Type Description System.Boolean | Improve this Doc View Source IsIdentity(Nullable<NpgsqlValueGenerationStrategy>) Declaration public static bool IsIdentity(this NpgsqlValueGenerationStrategy? strategy) Parameters Type Name Description System.Nullable < NpgsqlValueGenerationStrategy > strategy Returns Type Description System.Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlJsonTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlJsonTypeMapping.html",
    "title": "Class NpgsqlJsonTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonTypeMapping A mapping for an arbitrary user POCO to PostgreSQL jsonb or json. For mapping to .NET string, see NpgsqlStringTypeMapping . Inheritance System.Object NpgsqlTypeMapping NpgsqlJsonTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlJsonTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlJsonTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType) Declaration protected NpgsqlJsonTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType) Parameters Type Name Description RelationalTypeMappingParameters parameters NpgsqlDbType npgsqlDbType | Improve this Doc View Source NpgsqlJsonTypeMapping(String, Type) Declaration public NpgsqlJsonTypeMapping(string storeType, Type clrType) Parameters Type Name Description System.String storeType System.Type clrType Properties | Improve this Doc View Source IsJsonb Declaration public bool IsJsonb { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source EscapeSqlLiteral(String) Declaration protected virtual string EscapeSqlLiteral(string literal) Parameters Type Name Description System.String literal Returns Type Description System.String | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.ILikeExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.ILikeExpression.html",
    "title": "Class ILikeExpression | Npgsql Documentation",
    "keywords": "Class ILikeExpression Represents a PostgreSQL ILIKE expression. Inheritance System.Object ILikeExpression Implements System.IEquatable < ILikeExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class ILikeExpression : SqlExpression, IEquatable<ILikeExpression> Constructors | Improve this Doc View Source ILikeExpression(SqlExpression, SqlExpression, SqlExpression, RelationalTypeMapping) Constructs a ILikeExpression . Declaration public ILikeExpression(SqlExpression match, SqlExpression pattern, SqlExpression escapeChar, RelationalTypeMapping typeMapping) Parameters Type Name Description SqlExpression match The expression to match. SqlExpression pattern The pattern to match. SqlExpression escapeChar The escape character to use in pattern . RelationalTypeMapping typeMapping Exceptions Type Condition System.ArgumentNullException Properties | Improve this Doc View Source EscapeChar The escape character to use in Pattern . Declaration public virtual SqlExpression EscapeChar { get; } Property Value Type Description SqlExpression | Improve this Doc View Source Match The match expression. Declaration public virtual SqlExpression Match { get; } Property Value Type Description SqlExpression | Improve this Doc View Source Pattern The pattern to match. Declaration public virtual SqlExpression Pattern { get; } Property Value Type Description SqlExpression Methods | Improve this Doc View Source Accept(ExpressionVisitor) Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source Equals(ILikeExpression) Declaration public bool Equals(ILikeExpression other) Parameters Type Name Description ILikeExpression other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration public override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source Update(SqlExpression, SqlExpression, SqlExpression) Declaration public ILikeExpression Update(SqlExpression match, SqlExpression pattern, SqlExpression escapeChar) Parameters Type Name Description SqlExpression match SqlExpression pattern SqlExpression escapeChar Returns Type Description ILikeExpression | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression Implements System.IEquatable<T>"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNodaTimeDbContextOptionsBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNodaTimeDbContextOptionsBuilderExtensions.html",
    "title": "Class NpgsqlNodaTimeDbContextOptionsBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeDbContextOptionsBuilderExtensions NodaTime specific extension methods for NpgsqlDbContextOptionsBuilder . Inheritance System.Object NpgsqlNodaTimeDbContextOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public static class NpgsqlNodaTimeDbContextOptionsBuilderExtensions Methods | Improve this Doc View Source UseNodaTime(NpgsqlDbContextOptionsBuilder) Use NetTopologySuite to access SQL Server spatial data. Declaration public static NpgsqlDbContextOptionsBuilder UseNodaTime(this NpgsqlDbContextOptionsBuilder optionsBuilder) Parameters Type Name Description NpgsqlDbContextOptionsBuilder optionsBuilder Returns Type Description NpgsqlDbContextOptionsBuilder The options builder so that further configuration can be chained."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlExpressionFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlExpressionFactory.html",
    "title": "Class NpgsqlSqlExpressionFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlSqlExpressionFactory Inheritance System.Object NpgsqlSqlExpressionFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSqlExpressionFactory : SqlExpressionFactory Constructors | Improve this Doc View Source NpgsqlSqlExpressionFactory(SqlExpressionFactoryDependencies) Declaration public NpgsqlSqlExpressionFactory(SqlExpressionFactoryDependencies dependencies) Parameters Type Name Description SqlExpressionFactoryDependencies dependencies Methods | Improve this Doc View Source ApplyTypeMapping(SqlExpression, RelationalTypeMapping) Declaration public override SqlExpression ApplyTypeMapping(SqlExpression sqlExpression, RelationalTypeMapping typeMapping) Parameters Type Name Description SqlExpression sqlExpression RelationalTypeMapping typeMapping Returns Type Description SqlExpression | Improve this Doc View Source ArrayAnyAll(SqlExpression, SqlExpression, ArrayComparisonType, String) Declaration public ArrayAnyAllExpression ArrayAnyAll(SqlExpression operand, SqlExpression array, ArrayComparisonType arrayComparisonType, string operator) Parameters Type Name Description SqlExpression operand SqlExpression array ArrayComparisonType arrayComparisonType System.String operator Returns Type Description ArrayAnyAllExpression | Improve this Doc View Source ArrayIndex(SqlExpression, SqlExpression, RelationalTypeMapping) Declaration public ArrayIndexExpression ArrayIndex(SqlExpression array, SqlExpression index, RelationalTypeMapping typeMapping = null) Parameters Type Name Description SqlExpression array SqlExpression index RelationalTypeMapping typeMapping Returns Type Description ArrayIndexExpression | Improve this Doc View Source AtTimeZone(SqlExpression, SqlExpression, Type, RelationalTypeMapping) Declaration public AtTimeZoneExpression AtTimeZone(SqlExpression timestamp, SqlExpression timeZone, Type type, RelationalTypeMapping typeMapping = null) Parameters Type Name Description SqlExpression timestamp SqlExpression timeZone System.Type type RelationalTypeMapping typeMapping Returns Type Description AtTimeZoneExpression | Improve this Doc View Source ILike(SqlExpression, SqlExpression, SqlExpression) Declaration public ILikeExpression ILike(SqlExpression match, SqlExpression pattern, SqlExpression escapeChar = null) Parameters Type Name Description SqlExpression match SqlExpression pattern SqlExpression escapeChar Returns Type Description ILikeExpression | Improve this Doc View Source JsonTraversal(SqlExpression, IEnumerable<SqlExpression>, Boolean, Type, RelationalTypeMapping) Declaration public JsonTraversalExpression JsonTraversal(SqlExpression expression, IEnumerable<SqlExpression> path, bool returnsText, Type type, RelationalTypeMapping typeMapping = null) Parameters Type Name Description SqlExpression expression System.Collections.Generic.IEnumerable < SqlExpression > path System.Boolean returnsText System.Type type RelationalTypeMapping typeMapping Returns Type Description JsonTraversalExpression | Improve this Doc View Source RegexMatch(SqlExpression, SqlExpression, RegexOptions) Declaration public RegexMatchExpression RegexMatch(SqlExpression match, SqlExpression pattern, RegexOptions options) Parameters Type Name Description SqlExpression match SqlExpression pattern System.Text.RegularExpressions.RegexOptions options Returns Type Description RegexMatchExpression"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlIndexExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlIndexExtensions.html",
    "title": "Class NpgsqlIndexExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlIndexExtensions Extension methods for for Npgsql-specific metadata. Inheritance System.Object NpgsqlIndexExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlIndexExtensions Methods | Improve this Doc View Source GetCollation(IIndex) Returns the column collations to be used, or null if they have not been specified. Declaration public static IReadOnlyList<string> GetCollation(this IIndex index) Parameters Type Name Description IIndex index Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source GetIncludeProperties(IIndex) Returns included property names, or null if they have not been specified. Declaration public static IReadOnlyList<string> GetIncludeProperties(this IIndex index) Parameters Type Name Description IIndex index The index. Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > The included property names, or null if they have not been specified. | Improve this Doc View Source GetIncludePropertiesConfigurationSource(IConventionIndex) Returns the for the included property names. Declaration public static ConfigurationSource? GetIncludePropertiesConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description System.Nullable < ConfigurationSource > The for the included property names. | Improve this Doc View Source GetIsCreatedConcurrentlyConfigurationSource(IConventionIndex) Returns the for whether the index is created concurrently. Declaration public static ConfigurationSource? GetIsCreatedConcurrentlyConfigurationSource(this IConventionIndex index) Parameters Type Name Description IConventionIndex index The index. Returns Type Description System.Nullable < ConfigurationSource > The for whether the index is created concurrently. | Improve this Doc View Source GetMethod(IIndex) Returns the index method to be used, or null if it hasn't been specified. null selects the default (currently btree ). Declaration public static string GetMethod(this IIndex index) Parameters Type Name Description IIndex index Returns Type Description System.String Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source GetNullSortOrder(IIndex) Returns the column NULL sort orders to be used, or null if they have not been specified. Declaration public static IReadOnlyList<NullSortOrder> GetNullSortOrder(this IIndex index) Parameters Type Name Description IIndex index Returns Type Description System.Collections.Generic.IReadOnlyList < NullSortOrder > Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source GetOperators(IIndex) Returns the column operators to be used, or null if they have not been specified. Declaration public static IReadOnlyList<string> GetOperators(this IIndex index) Parameters Type Name Description IIndex index Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Improve this Doc View Source GetSortOrder(IIndex) Returns the column sort orders to be used, or null if they have not been specified. Declaration public static IReadOnlyList<SortOrder> GetSortOrder(this IIndex index) Parameters Type Name Description IIndex index Returns Type Description System.Collections.Generic.IReadOnlyList < SortOrder > Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source IsCreatedConcurrently(IIndex) Returns a value indicating whether the index is created concurrently. Declaration public static bool? IsCreatedConcurrently(this IIndex index) Parameters Type Name Description IIndex index The index. Returns Type Description System.Nullable < System.Boolean > true if the index is created concurrently. | Improve this Doc View Source SetCollation(IConventionIndex, IReadOnlyList<String>, Boolean) Sets the column collations to be used, or null if they have not been specified. Declaration public static void SetCollation(this IConventionIndex index, IReadOnlyList<string> collations, bool fromDataAnnotation) Parameters Type Name Description IConventionIndex index System.Collections.Generic.IReadOnlyList < System.String > collations System.Boolean fromDataAnnotation Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source SetCollation(IMutableIndex, IReadOnlyList<String>) Sets the column collations to be used, or null if they have not been specified. Declaration public static void SetCollation(this IMutableIndex index, IReadOnlyList<string> collations) Parameters Type Name Description IMutableIndex index System.Collections.Generic.IReadOnlyList < System.String > collations Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source SetIncludeProperties(IConventionIndex, IReadOnlyList<String>, Boolean) Sets included property names. Declaration public static void SetIncludeProperties(this IConventionIndex index, IReadOnlyList<string> properties, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index The index. System.Collections.Generic.IReadOnlyList < System.String > properties The value to set. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. | Improve this Doc View Source SetIncludeProperties(IMutableIndex, IReadOnlyList<String>) Sets included property names. Declaration public static void SetIncludeProperties(this IMutableIndex index, IReadOnlyList<string> properties) Parameters Type Name Description IMutableIndex index The index. System.Collections.Generic.IReadOnlyList < System.String > properties The value to set. | Improve this Doc View Source SetIsCreatedConcurrently(IConventionIndex, Nullable<Boolean>, Boolean) Sets a value indicating whether the index is created concurrently. Declaration public static void SetIsCreatedConcurrently(this IConventionIndex index, bool? createdConcurrently, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index The index. System.Nullable < System.Boolean > createdConcurrently The value to set. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. | Improve this Doc View Source SetIsCreatedConcurrently(IMutableIndex, Nullable<Boolean>) Sets a value indicating whether the index is created concurrently. Declaration public static void SetIsCreatedConcurrently(this IMutableIndex index, bool? createdConcurrently) Parameters Type Name Description IMutableIndex index The index. System.Nullable < System.Boolean > createdConcurrently The value to set. | Improve this Doc View Source SetMethod(IConventionIndex, String, Boolean) Sets the index method to be used, or null if it hasn't been specified. null selects the default (currently btree ). Declaration public static void SetMethod(this IConventionIndex index, string method, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndex index System.String method System.Boolean fromDataAnnotation Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source SetMethod(IMutableIndex, String) Sets the index method to be used, or null if it hasn't been specified. null selects the default (currently btree ). Declaration public static void SetMethod(this IMutableIndex index, string method) Parameters Type Name Description IMutableIndex index System.String method Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source SetNullSortOrder(IConventionIndex, IReadOnlyList<NullSortOrder>, Boolean) Sets the column NULL sort orders to be used, or null if they have not been specified. Declaration public static void SetNullSortOrder(this IConventionIndex index, IReadOnlyList<NullSortOrder> nullSortOrder, bool fromDataAnnotation) Parameters Type Name Description IConventionIndex index System.Collections.Generic.IReadOnlyList < NullSortOrder > nullSortOrder System.Boolean fromDataAnnotation Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source SetNullSortOrder(IMutableIndex, IReadOnlyList<NullSortOrder>) Sets the column NULL sort orders to be used, or null if they have not been specified. Declaration public static void SetNullSortOrder(this IMutableIndex index, IReadOnlyList<NullSortOrder> nullSortOrder) Parameters Type Name Description IMutableIndex index System.Collections.Generic.IReadOnlyList < NullSortOrder > nullSortOrder Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source SetOperators(IConventionIndex, IReadOnlyList<String>, Boolean) Sets the column operators to be used, or null if they have not been specified. Declaration public static void SetOperators(this IConventionIndex index, IReadOnlyList<string> operators, bool fromDataAnnotation) Parameters Type Name Description IConventionIndex index System.Collections.Generic.IReadOnlyList < System.String > operators System.Boolean fromDataAnnotation Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Improve this Doc View Source SetOperators(IMutableIndex, IReadOnlyList<String>) Sets the column operators to be used, or null if they have not been specified. Declaration public static void SetOperators(this IMutableIndex index, IReadOnlyList<string> operators) Parameters Type Name Description IMutableIndex index System.Collections.Generic.IReadOnlyList < System.String > operators Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Improve this Doc View Source SetSortOrder(IConventionIndex, IReadOnlyList<SortOrder>, Boolean) Sets the column sort orders to be used, or null if they have not been specified. Declaration public static void SetSortOrder(this IConventionIndex index, IReadOnlyList<SortOrder> sortOrder, bool fromDataAnnotation) Parameters Type Name Description IConventionIndex index System.Collections.Generic.IReadOnlyList < SortOrder > sortOrder System.Boolean fromDataAnnotation Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source SetSortOrder(IMutableIndex, IReadOnlyList<SortOrder>) Sets the column sort orders to be used, or null if they have not been specified. Declaration public static void SetSortOrder(this IMutableIndex index, IReadOnlyList<SortOrder> sortOrder) Parameters Type Name Description IMutableIndex index System.Collections.Generic.IReadOnlyList < SortOrder > sortOrder Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Classes NpgsqlConventionSetBuilder NpgsqlValueGenerationStrategyConvention A convention that configures the default model NpgsqlValueGenerationStrategy as IdentityByDefaultColumn for newer PostgreSQL versions, and SerialColumn for pre-10.0 versions."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlIndexBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlIndexBuilderExtensions.html",
    "title": "Class NpgsqlIndexBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlIndexBuilderExtensions Npgsql specific extension methods for . Inheritance System.Object NpgsqlIndexBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlIndexBuilderExtensions Methods | Improve this Doc View Source CanSetHasCollation(IConventionIndexBuilder, IReadOnlyList<String>, Boolean) Returns a value indicating whether the PostgreSQL index collation can be set. Declaration public static bool CanSetHasCollation(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string> values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. System.Collections.Generic.IReadOnlyList < System.String > values The sort options to use for each column. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description System.Boolean A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source CanSetHasMethod(IConventionIndexBuilder, String, Boolean) The PostgreSQL index method to be used. Null selects the default (currently btree). Declaration public static bool CanSetHasMethod(this IConventionIndexBuilder indexBuilder, string method, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. System.String method The name of the index. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description System.Boolean true if the index can be configured with the method Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source CanSetHasNullSortOrder(IConventionIndexBuilder, IReadOnlyList<NullSortOrder>, Boolean) Returns a value indicating whether the PostgreSQL index null sort ordering can be set. Declaration public static bool CanSetHasNullSortOrder(this IConventionIndexBuilder indexBuilder, IReadOnlyList<NullSortOrder> values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. System.Collections.Generic.IReadOnlyList < NullSortOrder > values The sort order to use for each column. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description System.Boolean A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source CanSetHasOperators(IConventionIndexBuilder, IReadOnlyList<String>, Boolean) Returns a value indicating whether the PostgreSQL index operators can be set. Declaration public static bool CanSetHasOperators(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string> operators, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. System.Collections.Generic.IReadOnlyList < System.String > operators The operators to use for each column. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description System.Boolean true if the index can be configured with the method. Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Improve this Doc View Source CanSetHasSortOrder(IConventionIndexBuilder, IReadOnlyList<SortOrder>, Boolean) Returns a value indicating whether the PostgreSQL index sort ordering can be set. Declaration public static bool CanSetHasSortOrder(this IConventionIndexBuilder indexBuilder, IReadOnlyList<SortOrder> values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. System.Collections.Generic.IReadOnlyList < SortOrder > values The sort order to use for each column. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description System.Boolean A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source CanSetInclude(IConventionIndexBuilder, IReadOnlyList<String>, Boolean) Returns a value indicating whether the given include properties can be set. Declaration public static bool CanSetInclude(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string> propertyNames, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. System.Collections.Generic.IReadOnlyList < System.String > propertyNames An array of property names to be used in 'include' clause. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description System.Boolean true if the given include properties can be set. | Improve this Doc View Source CanSetIsCreatedConcurrently(IConventionIndexBuilder, Nullable<Boolean>, Boolean) Returns a value indicating whether concurrent creation for the index can be set. Declaration public static bool CanSetIsCreatedConcurrently(this IConventionIndexBuilder indexBuilder, bool? createdConcurrently, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. System.Nullable < System.Boolean > createdConcurrently A value indicating whether the index is created with the \"concurrently\" option. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description System.Boolean A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY | Improve this Doc View Source ForNpgsqlHasCollation(IndexBuilder, String[]) The PostgreSQL index collation to be used. Declaration [Obsolete(\"Use HasCollation\")] public static IndexBuilder ForNpgsqlHasCollation(this IndexBuilder indexBuilder, params string[] values) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. System.String [] values The sort options to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source ForNpgsqlHasMethod(IndexBuilder, String) The PostgreSQL index method to be used. Null selects the default (currently btree). Declaration [Obsolete(\"Use HasMethod\")] public static IndexBuilder ForNpgsqlHasMethod(this IndexBuilder indexBuilder, string method) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. System.String method The name of the index. Returns Type Description IndexBuilder A builder to further configure the index. Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source ForNpgsqlHasNullSortOrder(IndexBuilder, NullSortOrder[]) The PostgreSQL index NULL sort ordering to be used. Declaration [Obsolete(\"Use HasNullSortOrder\")] public static IndexBuilder ForNpgsqlHasNullSortOrder(this IndexBuilder indexBuilder, params NullSortOrder[] values) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. NullSortOrder [] values The sort order to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source ForNpgsqlHasOperators(IndexBuilder, String[]) The PostgreSQL index operators to be used. Declaration [Obsolete(\"Use HasOperators\")] public static IndexBuilder ForNpgsqlHasOperators(this IndexBuilder indexBuilder, params string[] operators) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. System.String [] operators The operators to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Improve this Doc View Source ForNpgsqlHasSortOrder(IndexBuilder, SortOrder[]) The PostgreSQL index sort ordering to be used. Declaration [Obsolete(\"Use HasSortOrder\")] public static IndexBuilder ForNpgsqlHasSortOrder(this IndexBuilder indexBuilder, params SortOrder[] values) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. SortOrder [] values The sort order to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source ForNpgsqlInclude(IndexBuilder, String[]) Adds an INCLUDE clause to the index definition with the specified property names. This clause specifies a list of columns which will be included as a non-key part in the index. Declaration [Obsolete(\"Use IncludeProperties\")] public static IndexBuilder ForNpgsqlInclude(this IndexBuilder indexBuilder, params string[] propertyNames) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. System.String [] propertyNames An array of property names to be used in INCLUDE clause. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Improve this Doc View Source ForNpgsqlInclude<TEntity>(IndexBuilder<TEntity>, Expression<Func<TEntity, Object>>) Adds an INCLUDE clause to the index definition with property names from the specified expression. This clause specifies a list of columns which will be included as a non-key part in the index. Declaration [Obsolete(\"Use IncludeProperties\")] public static IndexBuilder<TEntity> ForNpgsqlInclude<TEntity>(this IndexBuilder<TEntity> indexBuilder, Expression<Func<TEntity, object>> includeExpression) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. System.Linq.Expressions.Expression < System.Func <TEntity, System.Object >> includeExpression A lambda expression representing the property(s) to be included in the INCLUDE clause ( blog => blog.Url ). If multiple properties are to be included then specify an anonymous type including the properties ( post => new { post.Title, post.BlogId } ). Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Improve this Doc View Source HasCollation(IConventionIndexBuilder, IReadOnlyList<String>, Boolean) The PostgreSQL index collation to be used. Declaration public static IConventionIndexBuilder HasCollation(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string> values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. System.Collections.Generic.IReadOnlyList < System.String > values The sort options to use for each column. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source HasCollation(IndexBuilder, String[]) The PostgreSQL index collation to be used. Declaration public static IndexBuilder HasCollation(this IndexBuilder indexBuilder, params string[] values) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. System.String [] values The sort options to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source HasCollation<TEntity>(IndexBuilder<TEntity>, String[]) The PostgreSQL index collation to be used. Declaration public static IndexBuilder<TEntity> HasCollation<TEntity>(this IndexBuilder<TEntity> indexBuilder, params string[] values) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. System.String [] values The sort options to use for each column. Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/static/indexes-collations.html | Improve this Doc View Source HasMethod(IConventionIndexBuilder, String, Boolean) The PostgreSQL index method to be used. Null selects the default (currently btree). Declaration public static IConventionIndexBuilder HasMethod(this IConventionIndexBuilder indexBuilder, string method, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. System.String method The name of the index. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder A builder to further configure the index. Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source HasMethod(IndexBuilder, String) The PostgreSQL index method to be used. Null selects the default (currently btree). Declaration public static IndexBuilder HasMethod(this IndexBuilder indexBuilder, string method) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. System.String method The name of the index. Returns Type Description IndexBuilder A builder to further configure the index. Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source HasMethod<TEntity>(IndexBuilder<TEntity>, String) The PostgreSQL index method to be used. Null selects the default (currently btree). Declaration public static IndexBuilder<TEntity> HasMethod<TEntity>(this IndexBuilder<TEntity> indexBuilder, string method) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. System.String method The name of the index. Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks http://www.postgresql.org/docs/current/static/sql-createindex.html | Improve this Doc View Source HasNullSortOrder(IConventionIndexBuilder, IReadOnlyList<NullSortOrder>, Boolean) The PostgreSQL index NULL sort ordering to be used. Declaration public static IConventionIndexBuilder HasNullSortOrder(this IConventionIndexBuilder indexBuilder, IReadOnlyList<NullSortOrder> values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. System.Collections.Generic.IReadOnlyList < NullSortOrder > values The sort order to use for each column. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source HasNullSortOrder(IndexBuilder, NullSortOrder[]) The PostgreSQL index NULL sort ordering to be used. Declaration public static IndexBuilder HasNullSortOrder(this IndexBuilder indexBuilder, params NullSortOrder[] values) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. NullSortOrder [] values The sort order to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source HasNullSortOrder<TEntity>(IndexBuilder<TEntity>, NullSortOrder[]) The PostgreSQL index NULL sort ordering to be used. Declaration public static IndexBuilder<TEntity> HasNullSortOrder<TEntity>(this IndexBuilder<TEntity> indexBuilder, params NullSortOrder[] values) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. NullSortOrder [] values The sort order to use for each column. Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source HasOperators(IConventionIndexBuilder, IReadOnlyList<String>, Boolean) The PostgreSQL index operators to be used. Declaration public static IConventionIndexBuilder HasOperators(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string> operators, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. System.Collections.Generic.IReadOnlyList < System.String > operators The operators to use for each column. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Improve this Doc View Source HasOperators(IndexBuilder, String[]) The PostgreSQL index operators to be used. Declaration public static IndexBuilder HasOperators(this IndexBuilder indexBuilder, params string[] operators) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. System.String [] operators The operators to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Improve this Doc View Source HasOperators<TEntity>(IndexBuilder<TEntity>, String[]) The PostgreSQL index operators to be used. Declaration public static IndexBuilder<TEntity> HasOperators<TEntity>(this IndexBuilder<TEntity> indexBuilder, params string[] operators) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. System.String [] operators The operators to use for each column. Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/static/indexes-opclass.html | Improve this Doc View Source HasSortOrder(IConventionIndexBuilder, IReadOnlyList<SortOrder>, Boolean) The PostgreSQL index sort ordering to be used. Declaration public static IConventionIndexBuilder HasSortOrder(this IConventionIndexBuilder indexBuilder, IReadOnlyList<SortOrder> values, bool fromDataAnnotation) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. System.Collections.Generic.IReadOnlyList < SortOrder > values The sort order to use for each column. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source HasSortOrder(IndexBuilder, SortOrder[]) The PostgreSQL index sort ordering to be used. Declaration public static IndexBuilder HasSortOrder(this IndexBuilder indexBuilder, params SortOrder[] values) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. SortOrder [] values The sort order to use for each column. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source HasSortOrder<TEntity>(IndexBuilder<TEntity>, SortOrder[]) The PostgreSQL index sort ordering to be used. Declaration public static IndexBuilder<TEntity> HasSortOrder<TEntity>(this IndexBuilder<TEntity> indexBuilder, params SortOrder[] values) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. SortOrder [] values The sort order to use for each column. Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/static/indexes-ordering.html | Improve this Doc View Source IncludeProperties(IConventionIndexBuilder, IReadOnlyList<String>, Boolean) Adds an INCLUDE clause to the index definition with the specified property names. This clause specifies a list of columns which will be included as a non-key part in the index. Declaration public static IConventionIndexBuilder IncludeProperties(this IConventionIndexBuilder indexBuilder, IReadOnlyList<string> propertyNames, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. System.Collections.Generic.IReadOnlyList < System.String > propertyNames An array of property names to be used in INCLUDE clause. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Improve this Doc View Source IncludeProperties(IndexBuilder, String[]) Adds an INCLUDE clause to the index definition with the specified property names. This clause specifies a list of columns which will be included as a non-key part in the index. Declaration public static IndexBuilder IncludeProperties(this IndexBuilder indexBuilder, params string[] propertyNames) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. System.String [] propertyNames An array of property names to be used in INCLUDE clause. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Improve this Doc View Source IncludeProperties<TEntity>(IndexBuilder<TEntity>, Expression<Func<TEntity, Object>>) Adds an INCLUDE clause to the index definition with property names from the specified expression. This clause specifies a list of columns which will be included as a non-key part in the index. Declaration public static IndexBuilder<TEntity> IncludeProperties<TEntity>(this IndexBuilder<TEntity> indexBuilder, Expression<Func<TEntity, object>> includeExpression) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. System.Linq.Expressions.Expression < System.Func <TEntity, System.Object >> includeExpression A lambda expression representing the property(s) to be included in the INCLUDE clause ( blog => blog.Url ). If multiple properties are to be included then specify an anonymous type including the properties ( post => new { post.Title, post.BlogId } ). Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/sql-createindex.html | Improve this Doc View Source IsCreatedConcurrently(IConventionIndexBuilder, Nullable<Boolean>, Boolean) When this option is used, PostgreSQL will build the index without taking any locks that prevent concurrent inserts, updates, or deletes on the table; whereas a standard index build locks out writes (but not reads) on the table until it's done. Declaration public static IConventionIndexBuilder IsCreatedConcurrently(this IConventionIndexBuilder indexBuilder, bool? createdConcurrently, bool fromDataAnnotation = false) Parameters Type Name Description IConventionIndexBuilder indexBuilder The builder for the index being configured. System.Nullable < System.Boolean > createdConcurrently A value indicating whether the index is created with the \"concurrently\" option. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionIndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY | Improve this Doc View Source IsCreatedConcurrently(IndexBuilder, Boolean) When this option is used, PostgreSQL will build the index without taking any locks that prevent concurrent inserts, updates, or deletes on the table; whereas a standard index build locks out writes (but not reads) on the table until it's done. Declaration public static IndexBuilder IsCreatedConcurrently(this IndexBuilder indexBuilder, bool createdConcurrently = false) Parameters Type Name Description IndexBuilder indexBuilder The builder for the index being configured. System.Boolean createdConcurrently A value indicating whether the index is created with the \"concurrently\" option. Returns Type Description IndexBuilder A builder to further configure the index. Remarks https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY | Improve this Doc View Source IsCreatedConcurrently<TEntity>(IndexBuilder<TEntity>, Boolean) When this option is used, PostgreSQL will build the index without taking any locks that prevent concurrent inserts, updates, or deletes on the table; whereas a standard index build locks out writes (but not reads) on the table until it's done. Declaration public static IndexBuilder<TEntity> IsCreatedConcurrently<TEntity>(this IndexBuilder<TEntity> indexBuilder, bool createdConcurrently = false) Parameters Type Name Description IndexBuilder <TEntity> indexBuilder The builder for the index being configured. System.Boolean createdConcurrently A value indicating whether the index is created with the \"concurrently\" option. Returns Type Description IndexBuilder <TEntity> A builder to further configure the index. Type Parameters Name Description TEntity Remarks https://www.postgresql.org/docs/current/sql-createindex.html#SQL-CREATEINDEX-CONCURRENTLY"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlEStringTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlEStringTypeMapping.html",
    "title": "Class NpgsqlEStringTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlEStringTypeMapping Represents a so-called PostgreSQL E-string literal string, which allows C-style escape sequences. This is a \"virtual\" type mapping which is never returned by NpgsqlTypeMappingSource . It is only used internally by some method translators to produce literal strings. Inheritance System.Object NpgsqlEStringTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlEStringTypeMapping : StringTypeMapping Remarks See https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS Constructors | Improve this Doc View Source NpgsqlEStringTypeMapping() Declaration public NpgsqlEStringTypeMapping() Methods | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlVarbitTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlVarbitTypeMapping.html",
    "title": "Class NpgsqlVarbitTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlVarbitTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlVarbitTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlVarbitTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlVarbitTypeMapping() Declaration public NpgsqlVarbitTypeMapping() | Improve this Doc View Source NpgsqlVarbitTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlVarbitTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDbFunctionsExtensions.html",
    "title": "Class NpgsqlDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlDbFunctionsExtensions Provides Npgsql-specific extension methods on . Inheritance System.Object NpgsqlDbFunctionsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlDbFunctionsExtensions Methods | Improve this Doc View Source ILike(DbFunctions, String, String) An implementation of the PostgreSQL ILIKE operation, which is an insensitive LIKE. Declaration public static bool ILike(this DbFunctions _, string matchExpression, string pattern) Parameters Type Name Description DbFunctions _ The DbFunctions instance. System.String matchExpression The string that is to be matched. System.String pattern The pattern which may involve wildcards %,_,[,],^. Returns Type Description System.Boolean true if there is a match. | Improve this Doc View Source ILike(DbFunctions, String, String, String) An implementation of the PostgreSQL ILIKE operation, which is an insensitive LIKE. Declaration public static bool ILike(this DbFunctions _, string matchExpression, string pattern, string escapeCharacter) Parameters Type Name Description DbFunctions _ The DbFunctions instance. System.String matchExpression The string that is to be matched. System.String pattern The pattern which may involve wildcards %,_,[,],^. System.String escapeCharacter The escape character (as a single character string) to use in front of %,_,[,],^ if they are not used as wildcards. Returns Type Description System.Boolean true if there is a match."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQuerySqlGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQuerySqlGenerator.html",
    "title": "Class NpgsqlQuerySqlGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlQuerySqlGenerator The default query SQL generator for Npgsql. Inheritance System.Object NpgsqlQuerySqlGenerator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQuerySqlGenerator : QuerySqlGenerator Constructors | Improve this Doc View Source NpgsqlQuerySqlGenerator(QuerySqlGeneratorDependencies, Boolean, Version) Declaration public NpgsqlQuerySqlGenerator(QuerySqlGeneratorDependencies dependencies, bool reverseNullOrderingEnabled, Version postgresVersion) Parameters Type Name Description QuerySqlGeneratorDependencies dependencies System.Boolean reverseNullOrderingEnabled System.Version postgresVersion Methods | Improve this Doc View Source GenerateLimitOffset(SelectExpression) Declaration protected override void GenerateLimitOffset(SelectExpression selectExpression) Parameters Type Name Description SelectExpression selectExpression | Improve this Doc View Source GenerateOperator(SqlBinaryExpression) Declaration protected override string GenerateOperator(SqlBinaryExpression e) Parameters Type Name Description SqlBinaryExpression e Returns Type Description System.String | Improve this Doc View Source GenerateSetOperationOperand(SetOperationBase, SelectExpression) Declaration protected override void GenerateSetOperationOperand(SetOperationBase setOperation, SelectExpression operand) Parameters Type Name Description SetOperationBase setOperation SelectExpression operand | Improve this Doc View Source GenerateTop(SelectExpression) Declaration protected override void GenerateTop(SelectExpression selectExpression) Parameters Type Name Description SelectExpression selectExpression | Improve this Doc View Source VisitArrayAnyAll(ArrayAnyAllExpression) Produces expressions like: 1 = ANY ('{0,1,2}') or 'cat' LIKE ANY ('{a%,b%,c%}'). Declaration public virtual Expression VisitArrayAnyAll(ArrayAnyAllExpression expression) Parameters Type Name Description ArrayAnyAllExpression expression Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source VisitArrayIndex(ArrayIndexExpression) Produces SQL array index expression (e.g. arr[1]). Declaration public virtual Expression VisitArrayIndex(ArrayIndexExpression expression) Parameters Type Name Description ArrayIndexExpression expression Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source VisitArrayIndex(SqlBinaryExpression) Declaration protected virtual Expression VisitArrayIndex(SqlBinaryExpression expression) Parameters Type Name Description SqlBinaryExpression expression Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source VisitAtTimeZone(AtTimeZoneExpression) Visits the children of an AtTimeZoneExpression . Declaration public virtual Expression VisitAtTimeZone(AtTimeZoneExpression expression) Parameters Type Name Description AtTimeZoneExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression An System.Linq.Expressions.Expression . | Improve this Doc View Source VisitCrossApply(CrossApplyExpression) Declaration protected override Expression VisitCrossApply(CrossApplyExpression crossApplyExpression) Parameters Type Name Description CrossApplyExpression crossApplyExpression Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source VisitCustomBinary(SqlCustomBinaryExpression) Visits the children of a SqlCustomBinaryExpression . Declaration public virtual Expression VisitCustomBinary(SqlCustomBinaryExpression expression) Parameters Type Name Description SqlCustomBinaryExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression An System.Linq.Expressions.Expression . | Improve this Doc View Source VisitCustomUnary(CustomUnaryExpression) Visits the children of a CustomUnaryExpression . Declaration public virtual Expression VisitCustomUnary(CustomUnaryExpression expression) Parameters Type Name Description CustomUnaryExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression An System.Linq.Expressions.Expression . | Improve this Doc View Source VisitILike(ILikeExpression) Visits the children of an ILikeExpression . Declaration public virtual Expression VisitILike(ILikeExpression likeExpression) Parameters Type Name Description ILikeExpression likeExpression The expression. Returns Type Description System.Linq.Expressions.Expression An System.Linq.Expressions.Expression . | Improve this Doc View Source VisitJsonPathTraversal(JsonTraversalExpression) Visits the children of an JsonTraversalExpression . Declaration public virtual Expression VisitJsonPathTraversal(JsonTraversalExpression expression) Parameters Type Name Description JsonTraversalExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression An System.Linq.Expressions.Expression . | Improve this Doc View Source VisitOrdering(OrderingExpression) Declaration protected override Expression VisitOrdering(OrderingExpression ordering) Parameters Type Name Description OrderingExpression ordering Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source VisitOuterApply(OuterApplyExpression) Declaration protected override Expression VisitOuterApply(OuterApplyExpression outerApplyExpression) Parameters Type Name Description OuterApplyExpression outerApplyExpression Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source VisitPgFunction(PgFunctionExpression) Visits the children of a PgFunctionExpression . Declaration public virtual Expression VisitPgFunction(PgFunctionExpression sqlFunctionExpression) Parameters Type Name Description PgFunctionExpression sqlFunctionExpression The expression. Returns Type Description System.Linq.Expressions.Expression An System.Linq.Expressions.Expression . | Improve this Doc View Source VisitRegexMatch(RegexMatchExpression) Visits the children of a RegexMatchExpression . Declaration public virtual Expression VisitRegexMatch(RegexMatchExpression expression) Parameters Type Name Description RegexMatchExpression expression The expression. Returns Type Description System.Linq.Expressions.Expression An System.Linq.Expressions.Expression . Remarks See: http://www.postgresql.org/docs/current/static/functions-matching.html | Improve this Doc View Source VisitSqlBinary(SqlBinaryExpression) Declaration protected override Expression VisitSqlBinary(SqlBinaryExpression binary) Parameters Type Name Description SqlBinaryExpression binary Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source VisitSqlUnary(SqlUnaryExpression) Declaration protected override Expression VisitSqlUnary(SqlUnaryExpression sqlUnaryExpression) Parameters Type Name Description SqlUnaryExpression sqlUnaryExpression Returns Type Description System.Linq.Expressions.Expression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Extensions.NpgsqlJsonDbFunctionsExtensions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Extensions.NpgsqlJsonDbFunctionsExtensions.html",
    "title": "Class NpgsqlJsonDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonDbFunctionsExtensions Provides methods for supporting translation to PostgreSQL JSON operators and functions. Inheritance System.Object NpgsqlJsonDbFunctionsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Extensions Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlJsonDbFunctionsExtensions Methods | Improve this Doc View Source JsonContained(DbFunctions, Object, Object) Checks if contained is contained in json as top-level entries. Declaration public static bool JsonContained(this DbFunctions _, object contained, object json) Parameters Type Name Description DbFunctions _ DbFunctions instance System.Object contained A JSON column or value. Can be a , a string, or a user POCO mapped to JSON. System.Object json A JSON column or value. Can be a , a string, or a user POCO mapped to JSON. Returns Type Description System.Boolean Remarks This operation is only supported with PostgreSQL jsonb , not json . See https://www.postgresql.org/docs/current/functions-json.html . | Improve this Doc View Source JsonContains(DbFunctions, Object, Object) Checks if json contains contained as top-level entries. Declaration public static bool JsonContains(this DbFunctions _, object json, object contained) Parameters Type Name Description DbFunctions _ DbFunctions instance System.Object json A JSON column or value. Can be a , a string property mapped to JSON, or a user POCO mapped to JSON. System.Object contained A JSON column or value. Can be a , a string, or a user POCO mapped to JSON. Returns Type Description System.Boolean Remarks This operation is only supported with PostgreSQL jsonb , not json . See https://www.postgresql.org/docs/current/functions-json.html . | Improve this Doc View Source JsonExistAll(DbFunctions, Object, String[]) Checks if all of the given keys exist as top-level keys within json . Declaration public static bool JsonExistAll(this DbFunctions _, object json, params string[] keys) Parameters Type Name Description DbFunctions _ DbFunctions instance System.Object json A JSON column or value. Can be a , a string, or a user POCO mapped to JSON. System.String [] keys A set of keys to be checked inside json . Returns Type Description System.Boolean Remarks This operation is only supported with PostgreSQL jsonb , not json . See https://www.postgresql.org/docs/current/functions-json.html . | Improve this Doc View Source JsonExistAny(DbFunctions, Object, String[]) Checks if any of the given keys exist as top-level keys within json . Declaration public static bool JsonExistAny(this DbFunctions _, object json, params string[] keys) Parameters Type Name Description DbFunctions _ DbFunctions instance System.Object json A JSON column or value. Can be a , a string, or a user POCO mapped to JSON. System.String [] keys A set of keys to be checked inside json . Returns Type Description System.Boolean Remarks This operation is only supported with PostgreSQL jsonb , not json . See https://www.postgresql.org/docs/current/functions-json.html . | Improve this Doc View Source JsonExists(DbFunctions, Object, String) Checks if key exists as a top-level key within json . Declaration public static bool JsonExists(this DbFunctions _, object json, string key) Parameters Type Name Description DbFunctions _ DbFunctions instance System.Object json A JSON column or value. Can be a , a string, or a user POCO mapped to JSON. System.String key A key to be checked inside json . Returns Type Description System.Boolean Remarks This operation is only supported with PostgreSQL jsonb , not json . See https://www.postgresql.org/docs/current/functions-json.html . | Improve this Doc View Source JsonTypeof(DbFunctions, Object) Returns the type of the outermost JSON value as a text string. Possible types are object, array, string, number, boolean, and null. Declaration public static string JsonTypeof(this DbFunctions _, object json) Parameters Type Name Description DbFunctions _ DbFunctions instance System.Object json A JSON column or value. Can be a , a string, or a user POCO mapped to JSON. Returns Type Description System.String Remarks See https://www.postgresql.org/docs/current/functions-json.html ."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlDateTimeMemberTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlDateTimeMemberTranslator.html",
    "title": "Class NpgsqlDateTimeMemberTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlDateTimeMemberTranslator Provides translation services for System.DateTime members. Inheritance System.Object NpgsqlDateTimeMemberTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDateTimeMemberTranslator : IMemberTranslator Remarks See: https://www.postgresql.org/docs/current/static/functions-datetime.html Constructors | Improve this Doc View Source NpgsqlDateTimeMemberTranslator(NpgsqlSqlExpressionFactory) Declaration public NpgsqlDateTimeMemberTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(SqlExpression, MemberInfo, Type) Declaration public SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType) Parameters Type Name Description SqlExpression instance System.Reflection.MemberInfo member System.Type returnType Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.INpgsqlRelationalConnection.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.INpgsqlRelationalConnection.html",
    "title": "Interface INpgsqlRelationalConnection | Npgsql Documentation",
    "keywords": "Interface INpgsqlRelationalConnection Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public interface INpgsqlRelationalConnection : IRelationalConnection Methods | Improve this Doc View Source CreateMasterConnection() Declaration INpgsqlRelationalConnection CreateMasterConnection() Returns Type Description INpgsqlRelationalConnection"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPathTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPathTypeMapping.html",
    "title": "Class NpgsqlPathTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlPathTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlPathTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlPathTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlPathTypeMapping() Declaration public NpgsqlPathTypeMapping() | Improve this Doc View Source NpgsqlPathTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlPathTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Internal Classes NpgsqlLoggerExtensions NpgsqlNetTopologySuiteOptions Represents options for Npgsql NetTopologySuite that can only be set at the System.IServiceProvider singleton level. NpgsqlOptions Represents options for Npgsql that can only be set at the System.IServiceProvider singleton level. NpgsqlResources This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. NpgsqlStrings This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal.NpgsqlNetTopologySuiteCodeGeneratorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal.NpgsqlNetTopologySuiteCodeGeneratorPlugin.html",
    "title": "Class NpgsqlNetTopologySuiteCodeGeneratorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteCodeGeneratorPlugin Inheritance System.Object NpgsqlNetTopologySuiteCodeGeneratorPlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteCodeGeneratorPlugin : ProviderCodeGeneratorPlugin Methods | Improve this Doc View Source GenerateProviderOptions() Declaration public override MethodCallCodeFragment GenerateProviderOptions() Returns Type Description MethodCallCodeFragment"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDatabaseModelExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDatabaseModelExtensions.html",
    "title": "Class NpgsqlDatabaseModelExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlDatabaseModelExtensions Inheritance System.Object NpgsqlDatabaseModelExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlDatabaseModelExtensions Methods | Improve this Doc View Source GetOrAddPostgresExtension(DatabaseModel, String, String, String) Declaration public static PostgresExtension GetOrAddPostgresExtension(this DatabaseModel model, string schema, string name, string version) Parameters Type Name Description DatabaseModel model System.String schema System.String name System.String version Returns Type Description PostgresExtension | Improve this Doc View Source GetPostgresEnums(DatabaseModel) Declaration public static IReadOnlyList<PostgresEnum> GetPostgresEnums(this DatabaseModel model) Parameters Type Name Description DatabaseModel model Returns Type Description System.Collections.Generic.IReadOnlyList < PostgresEnum > | Improve this Doc View Source GetPostgresExtensions(DatabaseModel) Declaration public static IReadOnlyList<PostgresExtension> GetPostgresExtensions(this DatabaseModel model) Parameters Type Name Description DatabaseModel model Returns Type Description System.Collections.Generic.IReadOnlyList < PostgresExtension >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimeTzMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimeTzMapping.html",
    "title": "Class TimeTzMapping | Npgsql Documentation",
    "keywords": "Class TimeTzMapping Inheritance System.Object NpgsqlTypeMapping TimeTzMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimeTzMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source TimeTzMapping() Declaration public TimeTzMapping() | Improve this Doc View Source TimeTzMapping(RelationalTypeMappingParameters) Declaration protected TimeTzMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description System.String storeType System.Nullable < System.Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(ValueConverter) Declaration public override CoreTypeMapping Clone(ValueConverter converter) Parameters Type Name Description ValueConverter converter Returns Type Description CoreTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMemberTranslatorProvider.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMemberTranslatorProvider.html",
    "title": "Class NpgsqlMemberTranslatorProvider | Npgsql Documentation",
    "keywords": "Class NpgsqlMemberTranslatorProvider A composite member translator that dispatches to multiple specialized member translators specific to Npgsql. Inheritance System.Object NpgsqlMemberTranslatorProvider Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMemberTranslatorProvider : RelationalMemberTranslatorProvider Constructors | Improve this Doc View Source NpgsqlMemberTranslatorProvider(RelationalMemberTranslatorProviderDependencies, IRelationalTypeMappingSource) Declaration public NpgsqlMemberTranslatorProvider(RelationalMemberTranslatorProviderDependencies dependencies, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description RelationalMemberTranslatorProviderDependencies dependencies IRelationalTypeMappingSource typeMappingSource Properties | Improve this Doc View Source JsonPocoTranslator Declaration public NpgsqlJsonPocoTranslator JsonPocoTranslator { get; } Property Value Type Description NpgsqlJsonPocoTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Classes DateMapping IntervalMapping NpgsqlDatabaseCreator NpgsqlExecutionStrategy NpgsqlExecutionStrategyFactory NpgsqlGeometryTypeMapping<TGeometry> NpgsqlNetTopologySuiteTypeMappingSourcePlugin NpgsqlNodaTimeTypeMappingSourcePlugin NpgsqlRelationalConnection NpgsqlSqlGenerationHelper NpgsqlTransientExceptionDetector Detects the exceptions caused by PostgreSQL or network transient failures. NpgsqlTypeMappingSource TimeMapping TimestampInstantMapping TimestampLocalDateTimeMapping TimestampTzInstantMapping TimestampTzOffsetDateTimeMapping TimestampTzZonedDateTimeMapping TimeTzMapping Interfaces INpgsqlRelationalConnection"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresExtension.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresExtension.html",
    "title": "Class PostgresExtension | Npgsql Documentation",
    "keywords": "Class PostgresExtension Represents the metadata for a PostgreSQL extension. Inheritance System.Object PostgresExtension Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresExtension Properties | Improve this Doc View Source Annotatable The Annotatable that stores the extension. Declaration public Annotatable Annotatable { get; } Property Value Type Description Annotatable | Improve this Doc View Source Name The extension name. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Schema The extension schema or null to represent the default schema. Declaration public string Schema { get; } Property Value Type Description System.String | Improve this Doc View Source Version The extension version. Declaration public string Version { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source FindPostgresExtension(IAnnotatable, String, String) Finds a PostgresExtension in the , or returns null if not found. Declaration public static PostgresExtension FindPostgresExtension(IAnnotatable annotatable, string schema, string name) Parameters Type Name Description IAnnotatable annotatable The annotatable to search for the extension. System.String schema The extension schema. The default schema is never used. System.String name The extension name. Returns Type Description PostgresExtension The PostgresExtension from the . Exceptions Type Condition System.ArgumentException schema System.ArgumentNullException annotatable System.ArgumentNullException name | Improve this Doc View Source GetOrAddPostgresExtension(IMutableAnnotatable, String, String) Gets or adds a PostgresExtension from or to the . Declaration public static PostgresExtension GetOrAddPostgresExtension(IMutableAnnotatable annotatable, string name, string version) Parameters Type Name Description IMutableAnnotatable annotatable The annotatable from which to get or add the extension. System.String name The extension name. System.String version The extension version. Returns Type Description PostgresExtension The PostgresExtension from the . Exceptions Type Condition System.ArgumentNullException annotatable System.ArgumentNullException name | Improve this Doc View Source GetOrAddPostgresExtension(IMutableAnnotatable, String, String, String) Gets or adds a PostgresExtension from or to the . Declaration public static PostgresExtension GetOrAddPostgresExtension(IMutableAnnotatable annotatable, string schema, string name, string version) Parameters Type Name Description IMutableAnnotatable annotatable The annotatable from which to get or add the extension. System.String schema The extension schema or null to use the model's default schema. System.String name The extension name. System.String version The extension version. Returns Type Description PostgresExtension The PostgresExtension from the . Exceptions Type Condition System.ArgumentException schema System.ArgumentNullException annotatable System.ArgumentNullException name | Improve this Doc View Source GetPostgresExtensions(IAnnotatable) Gets the collection of PostgresExtension stored in the . Declaration public static IEnumerable<PostgresExtension> GetPostgresExtensions(IAnnotatable annotatable) Parameters Type Name Description IAnnotatable annotatable The annotatable to search for PostgresExtension annotations. Returns Type Description System.Collections.Generic.IEnumerable < PostgresExtension > The collection of PostgresExtension stored in the . Exceptions Type Condition System.ArgumentNullException annotatable"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStringMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStringMethodTranslator.html",
    "title": "Class NpgsqlStringMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlStringMethodTranslator Provides translation services for PostgreSQL string functions. Inheritance System.Object NpgsqlStringMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlStringMethodTranslator : IMethodCallTranslator Remarks See: https://www.postgresql.org/docs/current/static/functions-string.html Constructors | Improve this Doc View Source NpgsqlStringMethodTranslator(ISqlExpressionFactory, NpgsqlTypeMappingSource) Declaration public NpgsqlStringMethodTranslator(ISqlExpressionFactory sqlExpressionFactory, NpgsqlTypeMappingSource npgsqlTypeMappingSource) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory NpgsqlTypeMappingSource npgsqlTypeMappingSource Methods | Improve this Doc View Source Translate(SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>) Declaration public SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description SqlExpression instance System.Reflection.MethodInfo method System.Collections.Generic.IReadOnlyList < SqlExpression > arguments Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNodaTimeDesignTimeServices.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNodaTimeDesignTimeServices.html",
    "title": "Class NpgsqlNodaTimeDesignTimeServices | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeDesignTimeServices Inheritance System.Object NpgsqlNodaTimeDesignTimeServices Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeDesignTimeServices : IDesignTimeServices Methods | Improve this Doc View Source ConfigureDesignTimeServices(IServiceCollection) Declaration public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTypeMapping.html",
    "title": "Class NpgsqlTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTypeMapping The base class for mapping Npgsql-specific types. It configures parameters with the NpgsqlDbType provider-specific type enum. Inheritance System.Object NpgsqlTypeMapping DateMapping IntervalMapping NpgsqlBitTypeMapping NpgsqlBoxTypeMapping NpgsqlCidrTypeMapping NpgsqlCircleTypeMapping NpgsqlDateTypeMapping NpgsqlHstoreTypeMapping NpgsqlInetTypeMapping NpgsqlIntervalTypeMapping NpgsqlJsonTypeMapping NpgsqlLineSegmentTypeMapping NpgsqlLineTypeMapping NpgsqlMacaddr8TypeMapping NpgsqlMacaddrTypeMapping NpgsqlPathTypeMapping NpgsqlPointTypeMapping NpgsqlPolygonTypeMapping NpgsqlRangeTypeMapping NpgsqlRegconfigTypeMapping NpgsqlTidTypeMapping NpgsqlTimestampTypeMapping NpgsqlTimestampTzTypeMapping NpgsqlTimeTypeMapping NpgsqlTimeTzTypeMapping NpgsqlTsQueryTypeMapping NpgsqlTsVectorTypeMapping NpgsqlUintTypeMapping NpgsqlVarbitTypeMapping TimeMapping TimestampInstantMapping TimestampLocalDateTimeMapping TimestampTzInstantMapping TimestampTzOffsetDateTimeMapping TimestampTzZonedDateTimeMapping TimeTzMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public abstract class NpgsqlTypeMapping : RelationalTypeMapping Constructors | Improve this Doc View Source NpgsqlTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType) Constructs an instance of the NpgsqlTypeMapping class. Declaration protected NpgsqlTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType) Parameters Type Name Description RelationalTypeMappingParameters parameters The parameters for this mapping. NpgsqlDbType npgsqlDbType The database type of the range subtype. | Improve this Doc View Source NpgsqlTypeMapping(String, Type, NpgsqlDbType) Constructs an instance of the NpgsqlTypeMapping class. Declaration public NpgsqlTypeMapping(string storeType, Type clrType, NpgsqlDbType npgsqlDbType) Parameters Type Name Description System.String storeType The database type to map. System.Type clrType The CLR type to map. NpgsqlDbType npgsqlDbType The database type used by Npgsql. Properties | Improve this Doc View Source NpgsqlDbType The database type used by Npgsql. Declaration public NpgsqlDbType NpgsqlDbType { get; } Property Value Type Description NpgsqlDbType Methods | Improve this Doc View Source ConfigureParameter(DbParameter) Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description System.Data.Common.DbParameter parameter"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.NpgsqlMigrationsAnnotationProvider.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.NpgsqlMigrationsAnnotationProvider.html",
    "title": "Class NpgsqlMigrationsAnnotationProvider | Npgsql Documentation",
    "keywords": "Class NpgsqlMigrationsAnnotationProvider Inheritance System.Object NpgsqlMigrationsAnnotationProvider Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMigrationsAnnotationProvider : MigrationsAnnotationProvider Constructors | Improve this Doc View Source NpgsqlMigrationsAnnotationProvider(MigrationsAnnotationProviderDependencies) Declaration public NpgsqlMigrationsAnnotationProvider(MigrationsAnnotationProviderDependencies dependencies) Parameters Type Name Description MigrationsAnnotationProviderDependencies dependencies Methods | Improve this Doc View Source For(IEntityType) Declaration public override IEnumerable<IAnnotation> For(IEntityType entityType) Parameters Type Name Description IEntityType entityType Returns Type Description System.Collections.Generic.IEnumerable < IAnnotation > | Improve this Doc View Source For(IIndex) Declaration public override IEnumerable<IAnnotation> For(IIndex index) Parameters Type Name Description IIndex index Returns Type Description System.Collections.Generic.IEnumerable < IAnnotation > | Improve this Doc View Source For(IModel) Declaration public override IEnumerable<IAnnotation> For(IModel model) Parameters Type Name Description IModel model Returns Type Description System.Collections.Generic.IEnumerable < IAnnotation > | Improve this Doc View Source For(IProperty) Declaration public override IEnumerable<IAnnotation> For(IProperty property) Parameters Type Name Description IProperty property Returns Type Description System.Collections.Generic.IEnumerable < IAnnotation >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresRange.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresRange.html",
    "title": "Class PostgresRange | Npgsql Documentation",
    "keywords": "Class PostgresRange Represents the metadata for a PostgreSQL range. Inheritance System.Object PostgresRange Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresRange Properties | Improve this Doc View Source Annotatable The Annotatable that stores the range. Declaration public Annotatable Annotatable { get; } Property Value Type Description Annotatable | Improve this Doc View Source CanonicalFunction The function defining a \"step\" in a discrete range. Declaration public string CanonicalFunction { get; set; } Property Value Type Description System.String | Improve this Doc View Source Collation The collation to use. Declaration public string Collation { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name The range name. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Schema The range schema or null to represent the default schema. Declaration public string Schema { get; } Property Value Type Description System.String | Improve this Doc View Source Subtype The subtype of the range. Declaration public string Subtype { get; set; } Property Value Type Description System.String | Improve this Doc View Source SubtypeDiff The function defining a difference in subtype values. Declaration public string SubtypeDiff { get; set; } Property Value Type Description System.String | Improve this Doc View Source SubtypeOpClass The operator class to use. Declaration public string SubtypeOpClass { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source FindPostgresRange(IAnnotatable, String, String) Finds a PostgresRange in the , or returns null if not found. Declaration public static PostgresRange FindPostgresRange(IAnnotatable annotatable, string schema, string name) Parameters Type Name Description IAnnotatable annotatable The annotatable to search for the range. System.String schema The range schema or null to use the model's default schema. System.String name The range name. Returns Type Description PostgresRange The PostgresRange from the . Exceptions Type Condition System.ArgumentException schema System.ArgumentNullException annotatable System.ArgumentNullException name | Improve this Doc View Source GetOrAddPostgresRange(IMutableAnnotatable, String, String, String, String, String, String, String) Gets or adds a PostgresRange from or to the . Declaration public static PostgresRange GetOrAddPostgresRange(IMutableAnnotatable annotatable, string schema, string name, string subtype, string canonicalFunction = null, string subtypeOpClass = null, string collation = null, string subtypeDiff = null) Parameters Type Name Description IMutableAnnotatable annotatable The annotatable from which to get or add the range. System.String schema The range schema or null to use the model's default schema. System.String name The range name. System.String subtype The range subtype. System.String canonicalFunction System.String subtypeOpClass System.String collation System.String subtypeDiff Returns Type Description PostgresRange The PostgresRange from the . Exceptions Type Condition System.ArgumentException schema System.ArgumentNullException annotatable System.ArgumentNullException name System.ArgumentNullException subtype | Improve this Doc View Source GetPostgresRanges(IAnnotatable) Gets the collection of PostgresRange stored in the . Declaration public static IEnumerable<PostgresRange> GetPostgresRanges(IAnnotatable annotatable) Parameters Type Name Description IAnnotatable annotatable The annotatable to search for PostgresRange annotations. Returns Type Description System.Collections.Generic.IEnumerable < PostgresRange > The collection of PostgresRange stored in the . Exceptions Type Condition System.ArgumentNullException annotatable"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlListTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlListTypeMapping.html",
    "title": "Class NpgsqlListTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlListTypeMapping Maps PostgreSQL arrays to System.Collections.Generic.List<T> . Inheritance System.Object NpgsqlListTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlListTypeMapping : RelationalTypeMapping Remarks Note that mapping PostgreSQL arrays to .NET arrays is also supported via NpgsqlArrayTypeMapping . See: https://www.postgresql.org/docs/current/static/arrays.html Constructors | Improve this Doc View Source NpgsqlListTypeMapping(RelationalTypeMapping, Type) Creates the default list mapping. Declaration public NpgsqlListTypeMapping(RelationalTypeMapping elementMapping, Type listType) Parameters Type Name Description RelationalTypeMapping elementMapping The element type mapping. System.Type listType The database type to map. | Improve this Doc View Source NpgsqlListTypeMapping(RelationalTypeMappingParameters, RelationalTypeMapping) Declaration protected NpgsqlListTypeMapping(RelationalTypeMappingParameters parameters, RelationalTypeMapping elementMapping) Parameters Type Name Description RelationalTypeMappingParameters parameters RelationalTypeMapping elementMapping Properties | Improve this Doc View Source ElementMapping The relational type mapping used to initialize the list mapping. Declaration public RelationalTypeMapping ElementMapping { get; } Property Value Type Description RelationalTypeMapping Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlHstoreTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlHstoreTypeMapping.html",
    "title": "Class NpgsqlHstoreTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlHstoreTypeMapping The type mapping for the PostgreSQL hstore type. Inheritance System.Object NpgsqlTypeMapping NpgsqlHstoreTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlHstoreTypeMapping : NpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/hstore.html Constructors | Improve this Doc View Source NpgsqlHstoreTypeMapping() Constructs an instance of the NpgsqlHstoreTypeMapping class. Declaration public NpgsqlHstoreTypeMapping() | Improve this Doc View Source NpgsqlHstoreTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlHstoreTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.UserRangeDefinition.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.UserRangeDefinition.html",
    "title": "Class UserRangeDefinition | Npgsql Documentation",
    "keywords": "Class UserRangeDefinition Inheritance System.Object UserRangeDefinition Implements System.IEquatable < UserRangeDefinition > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class UserRangeDefinition : IEquatable<UserRangeDefinition> Constructors | Improve this Doc View Source UserRangeDefinition(String, String, Type, String) Declaration public UserRangeDefinition(string rangeName, string schemaName, Type subtypeClrType, string subtypeName) Parameters Type Name Description System.String rangeName System.String schemaName System.Type subtypeClrType System.String subtypeName Properties | Improve this Doc View Source RangeName The name of the PostgreSQL range type to be mapped. Declaration public string RangeName { get; } Property Value Type Description System.String | Improve this Doc View Source SchemaName The PostgreSQL schema in which the range is defined. If null, the default schema is used (which is public unless changed on the model). Declaration public string SchemaName { get; } Property Value Type Description System.String | Improve this Doc View Source SubtypeClrType The CLR type of the range's subtype (or element). The actual mapped type will be an over this type. Declaration public Type SubtypeClrType { get; } Property Value Type Description System.Type | Improve this Doc View Source SubtypeName Optionally, the name of the range's PostgreSQL subtype (or element). This is usually not needed - the subtype will be inferred based on SubtypeClrType . Declaration public string SubtypeName { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Deconstruct(out String, out String, out Type, out String) Declaration public void Deconstruct(out string rangeName, out string schemaName, out Type subtypeClrType, out string subtypeName) Parameters Type Name Description System.String rangeName System.String schemaName System.Type subtypeClrType System.String subtypeName | Improve this Doc View Source Equals(UserRangeDefinition) Declaration public bool Equals(UserRangeDefinition other) Parameters Type Name Description UserRangeDefinition other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Implements System.IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsRankingNormalizationTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsRankingNormalizationTypeMapping.html",
    "title": "Class NpgsqlTsRankingNormalizationTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTsRankingNormalizationTypeMapping Inheritance System.Object NpgsqlTsRankingNormalizationTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTsRankingNormalizationTypeMapping : IntTypeMapping Constructors | Improve this Doc View Source NpgsqlTsRankingNormalizationTypeMapping() Declaration public NpgsqlTsRankingNormalizationTypeMapping() | Improve this Doc View Source NpgsqlTsRankingNormalizationTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlTsRankingNormalizationTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.SqlCustomBinaryExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.SqlCustomBinaryExpression.html",
    "title": "Class SqlCustomBinaryExpression | Npgsql Documentation",
    "keywords": "Class SqlCustomBinaryExpression PostgreSQL has quite a few custom operators (full text, JSON and many others). Rather than creating expression types for each, this type represents an arbitrary expression with two operands and an operator. Inheritance System.Object SqlCustomBinaryExpression Implements System.IEquatable < SqlCustomBinaryExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class SqlCustomBinaryExpression : SqlExpression, IEquatable<SqlCustomBinaryExpression> Constructors | Improve this Doc View Source SqlCustomBinaryExpression(SqlExpression, SqlExpression, String, Type, RelationalTypeMapping) Constructs a SqlCustomBinaryExpression . Declaration public SqlCustomBinaryExpression(SqlExpression left, SqlExpression right, string binaryOperator, Type type, RelationalTypeMapping typeMapping = null) Parameters Type Name Description SqlExpression left The left-hand expression. SqlExpression right The right-hand expression. System.String binaryOperator The operator symbol acting on the expression. System.Type type The result type. RelationalTypeMapping typeMapping Exceptions Type Condition System.ArgumentNullException Properties | Improve this Doc View Source Left The left-hand expression. Declaration public SqlExpression Left { get; } Property Value Type Description SqlExpression | Improve this Doc View Source Operator The operator. Declaration public string Operator { get; } Property Value Type Description System.String | Improve this Doc View Source Right The right-hand expression. Declaration public SqlExpression Right { get; } Property Value Type Description SqlExpression Methods | Improve this Doc View Source Accept(ExpressionVisitor) Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source Equals(SqlCustomBinaryExpression) Declaration public bool Equals(SqlCustomBinaryExpression other) Parameters Type Name Description SqlCustomBinaryExpression other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration public override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source Update(SqlExpression, SqlExpression) Declaration public SqlCustomBinaryExpression Update(SqlExpression left, SqlExpression right) Parameters Type Name Description SqlExpression left SqlExpression right Returns Type Description SqlCustomBinaryExpression | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression Implements System.IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.DbDataReaderExtension.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.DbDataReaderExtension.html",
    "title": "Class DbDataReaderExtension | Npgsql Documentation",
    "keywords": "Class DbDataReaderExtension Inheritance System.Object DbDataReaderExtension Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class DbDataReaderExtension Methods | Improve this Doc View Source GetValueOrDefault<T>(DbDataReader, String) Declaration public static T GetValueOrDefault<T>(this DbDataReader reader, string name) Parameters Type Name Description System.Data.Common.DbDataReader reader System.String name Returns Type Description T Type Parameters Name Description T | Improve this Doc View Source GetValueOrDefault<T>(DbDataRecord, String) Declaration public static T GetValueOrDefault<T>(this DbDataRecord record, string name) Parameters Type Name Description System.Data.Common.DbDataRecord record System.String name Returns Type Description T Type Parameters Name Description T"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNewGuidTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNewGuidTranslator.html",
    "title": "Class NpgsqlNewGuidTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNewGuidTranslator Provides translation services for PostgreSQL UUID functions. Inheritance System.Object NpgsqlNewGuidTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlNewGuidTranslator : IMethodCallTranslator Remarks See: https://www.postgresql.org/docs/current/datatype-uuid.html Constructors | Improve this Doc View Source NpgsqlNewGuidTranslator(ISqlExpressionFactory) Declaration public NpgsqlNewGuidTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>) Declaration public SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description SqlExpression instance System.Reflection.MethodInfo method System.Collections.Generic.IReadOnlyList < SqlExpression > arguments Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBitTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBitTypeMapping.html",
    "title": "Class NpgsqlBitTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlBitTypeMapping The type mapping for the PostgreSQL bit string type. Inheritance System.Object NpgsqlTypeMapping NpgsqlBitTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlBitTypeMapping : NpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-bit.html Constructors | Improve this Doc View Source NpgsqlBitTypeMapping() Constructs an instance of the NpgsqlBitTypeMapping class. Declaration public NpgsqlBitTypeMapping() | Improve this Doc View Source NpgsqlBitTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlBitTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlOptionsExtension.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlOptionsExtension.html",
    "title": "Class NpgsqlOptionsExtension | Npgsql Documentation",
    "keywords": "Class NpgsqlOptionsExtension Represents options managed by the Npgsql. Inheritance System.Object NpgsqlOptionsExtension Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlOptionsExtension : RelationalOptionsExtension Constructors | Improve this Doc View Source NpgsqlOptionsExtension() Initializes an instance of NpgsqlOptionsExtension with the default settings. Declaration public NpgsqlOptionsExtension() | Improve this Doc View Source NpgsqlOptionsExtension(NpgsqlOptionsExtension) Initializes an instance of NpgsqlOptionsExtension by copying the specified instance. Declaration public NpgsqlOptionsExtension(NpgsqlOptionsExtension copyFrom) Parameters Type Name Description NpgsqlOptionsExtension copyFrom The instance to copy. Properties | Improve this Doc View Source AdminDatabase The name of the database for administrative operations. Declaration public string AdminDatabase { get; } Property Value Type Description System.String | Improve this Doc View Source Info Declaration public override DbContextOptionsExtensionInfo Info { get; } Property Value Type Description DbContextOptionsExtensionInfo | Improve this Doc View Source MinBatchSize Declaration public override int? MinBatchSize { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source PostgresVersion The backend version to target. Declaration public Version PostgresVersion { get; } Property Value Type Description System.Version | Improve this Doc View Source ProvideClientCertificatesCallback The specified ProvideClientCertificatesCallback . Declaration public ProvideClientCertificatesCallback ProvideClientCertificatesCallback { get; } Property Value Type Description ProvideClientCertificatesCallback | Improve this Doc View Source ProvidePasswordCallback The specified ProvidePasswordCallback . Declaration public ProvidePasswordCallback ProvidePasswordCallback { get; } Property Value Type Description ProvidePasswordCallback | Improve this Doc View Source RemoteCertificateValidationCallback The specified RemoteCertificateValidationCallback . Declaration public RemoteCertificateValidationCallback RemoteCertificateValidationCallback { get; } Property Value Type Description System.Net.Security.RemoteCertificateValidationCallback | Improve this Doc View Source ReverseNullOrdering True if reverse null ordering is enabled; otherwise, false. Declaration public bool ReverseNullOrdering { get; } Property Value Type Description System.Boolean | Improve this Doc View Source UserRangeDefinitions The list of range mappings specified by the user. Declaration public IReadOnlyList<UserRangeDefinition> UserRangeDefinitions { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < UserRangeDefinition > Methods | Improve this Doc View Source ApplyServices(IServiceCollection) Declaration public override void ApplyServices(IServiceCollection services) Parameters Type Name Description IServiceCollection services | Improve this Doc View Source Clone() Declaration protected override RelationalOptionsExtension Clone() Returns Type Description RelationalOptionsExtension | Improve this Doc View Source WithAdminDatabase(String) Returns a copy of the current instance configured to use the specified administrative database. Declaration public virtual NpgsqlOptionsExtension WithAdminDatabase(string adminDatabase) Parameters Type Name Description System.String adminDatabase The name of the database for administrative operations. Returns Type Description NpgsqlOptionsExtension | Improve this Doc View Source WithPostgresVersion(Version) Returns a copy of the current instance with the specified PostgreSQL version. Declaration public virtual NpgsqlOptionsExtension WithPostgresVersion(Version postgresVersion) Parameters Type Name Description System.Version postgresVersion The backend version to target. Returns Type Description NpgsqlOptionsExtension A copy of the current instance with the specified PostgreSQL version. | Improve this Doc View Source WithProvideClientCertificatesCallback(ProvideClientCertificatesCallback) Returns a copy of the current instance with the specified ProvideClientCertificatesCallback . Declaration public virtual NpgsqlOptionsExtension WithProvideClientCertificatesCallback(ProvideClientCertificatesCallback callback) Parameters Type Name Description ProvideClientCertificatesCallback callback The specified callback. Returns Type Description NpgsqlOptionsExtension | Improve this Doc View Source WithProvidePasswordCallback(ProvidePasswordCallback) Returns a copy of the current instance with the specified ProvidePasswordCallback . Declaration public virtual NpgsqlOptionsExtension WithProvidePasswordCallback(ProvidePasswordCallback callback) Parameters Type Name Description ProvidePasswordCallback callback The specified callback. Returns Type Description NpgsqlOptionsExtension | Improve this Doc View Source WithRemoteCertificateValidationCallback(RemoteCertificateValidationCallback) Returns a copy of the current instance with the specified RemoteCertificateValidationCallback . Declaration public virtual NpgsqlOptionsExtension WithRemoteCertificateValidationCallback(RemoteCertificateValidationCallback callback) Parameters Type Name Description System.Net.Security.RemoteCertificateValidationCallback callback The specified callback. Returns Type Description NpgsqlOptionsExtension | Improve this Doc View Source WithUserRangeDefinition(String, String, Type, String) Returns a copy of the current instance configured with the specified range mapping. Declaration public virtual NpgsqlOptionsExtension WithUserRangeDefinition(string rangeName, string schemaName, Type subtypeClrType, string subtypeName) Parameters Type Name Description System.String rangeName System.String schemaName System.Type subtypeClrType System.String subtypeName Returns Type Description NpgsqlOptionsExtension | Improve this Doc View Source WithUserRangeDefinition<TSubtype>(String, String, String) Returns a copy of the current instance configured with the specified range mapping. Declaration public virtual NpgsqlOptionsExtension WithUserRangeDefinition<TSubtype>(string rangeName, string schemaName = null, string subtypeName = null) Parameters Type Name Description System.String rangeName System.String schemaName System.String subtypeName Returns Type Description NpgsqlOptionsExtension Type Parameters Name Description TSubtype"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.NpgsqlNodaTimeMemberTranslatorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.NpgsqlNodaTimeMemberTranslatorPlugin.html",
    "title": "Class NpgsqlNodaTimeMemberTranslatorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeMemberTranslatorPlugin Provides translation services for Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime members. Inheritance System.Object NpgsqlNodaTimeMemberTranslatorPlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeMemberTranslatorPlugin : IMemberTranslatorPlugin Remarks See: https://www.postgresql.org/docs/current/static/functions-datetime.html Constructors | Improve this Doc View Source NpgsqlNodaTimeMemberTranslatorPlugin(ISqlExpressionFactory) Declaration public NpgsqlNodaTimeMemberTranslatorPlugin(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Properties | Improve this Doc View Source Translators Declaration public virtual IEnumerable<IMemberTranslator> Translators { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IMemberTranslator >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzZonedDateTimeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzZonedDateTimeMapping.html",
    "title": "Class TimestampTzZonedDateTimeMapping | Npgsql Documentation",
    "keywords": "Class TimestampTzZonedDateTimeMapping Inheritance System.Object NpgsqlTypeMapping TimestampTzZonedDateTimeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimestampTzZonedDateTimeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source TimestampTzZonedDateTimeMapping() Declaration public TimestampTzZonedDateTimeMapping() | Improve this Doc View Source TimestampTzZonedDateTimeMapping(RelationalTypeMappingParameters) Declaration protected TimestampTzZonedDateTimeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description System.String storeType System.Nullable < System.Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(ValueConverter) Declaration public override CoreTypeMapping Clone(ValueConverter converter) Parameters Type Name Description ValueConverter converter Returns Type Description CoreTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBoolTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBoolTypeMapping.html",
    "title": "Class NpgsqlBoolTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlBoolTypeMapping Inheritance System.Object NpgsqlBoolTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlBoolTypeMapping : RelationalTypeMapping Constructors | Improve this Doc View Source NpgsqlBoolTypeMapping() Declaration public NpgsqlBoolTypeMapping() | Improve this Doc View Source NpgsqlBoolTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlBoolTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.NpgsqlDatabaseModelFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.NpgsqlDatabaseModelFactory.html",
    "title": "Class NpgsqlDatabaseModelFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlDatabaseModelFactory The default database model factory for Npgsql. Inheritance System.Object NpgsqlDatabaseModelFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDatabaseModelFactory : DatabaseModelFactory Constructors | Improve this Doc View Source NpgsqlDatabaseModelFactory(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>) Constructs an instance of the NpgsqlDatabaseModelFactory class. Declaration public NpgsqlDatabaseModelFactory(IDiagnosticsLogger<DbLoggerCategory.Scaffolding> logger) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > logger The diagnostic logger instance. Methods | Improve this Doc View Source Create(DbConnection, DatabaseModelFactoryOptions) Declaration public override DatabaseModel Create(DbConnection dbConnection, DatabaseModelFactoryOptions options) Parameters Type Name Description System.Data.Common.DbConnection dbConnection DatabaseModelFactoryOptions options Returns Type Description DatabaseModel | Improve this Doc View Source Create(String, DatabaseModelFactoryOptions) Declaration public override DatabaseModel Create(string connectionString, DatabaseModelFactoryOptions options) Parameters Type Name Description System.String connectionString DatabaseModelFactoryOptions options Returns Type Description DatabaseModel"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatchFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatchFactory.html",
    "title": "Class NpgsqlModificationCommandBatchFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlModificationCommandBatchFactory Inheritance System.Object NpgsqlModificationCommandBatchFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlModificationCommandBatchFactory : IModificationCommandBatchFactory Constructors | Improve this Doc View Source NpgsqlModificationCommandBatchFactory(ModificationCommandBatchFactoryDependencies, IDbContextOptions) Declaration public NpgsqlModificationCommandBatchFactory(ModificationCommandBatchFactoryDependencies dependencies, IDbContextOptions options) Parameters Type Name Description ModificationCommandBatchFactoryDependencies dependencies IDbContextOptions options Methods | Improve this Doc View Source Create() Declaration public virtual ModificationCommandBatch Create() Returns Type Description ModificationCommandBatch"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure Classes NpgsqlDbContextOptionsBuilder Allows for options specific to PostgreSQL to be configured for a . NpgsqlModelValidator The validator that enforces rules for Npgsql."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlPropertyBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlPropertyBuilderExtensions.html",
    "title": "Class NpgsqlPropertyBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlPropertyBuilderExtensions Npgsql specific extension methods for . Inheritance System.Object NpgsqlPropertyBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlPropertyBuilderExtensions Methods | Improve this Doc View Source CanSetHiLoSequence(IConventionPropertyBuilder, String, String, Boolean) Returns a value indicating whether the given name and schema can be set for the hi-lo sequence. Declaration public static bool CanSetHiLoSequence(this IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. System.String name The name of the sequence. System.String schema The schema of the sequence. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description System.Boolean true if the given name and schema can be set for the hi-lo sequence. | Improve this Doc View Source CanSetIdentityOptions(IConventionPropertyBuilder, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Boolean>, Nullable<Int64>) Returns a value indicating whether the sequence options can be set on the identity column. Declaration public static bool CanSetIdentityOptions(this IConventionPropertyBuilder propertyBuilder, long? startValue = default(long? ), long? incrementBy = default(long? ), long? minValue = default(long? ), long? maxValue = default(long? ), bool? isCyclic = default(bool? ), long? numbersToCache = default(long? )) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. System.Nullable < System.Int64 > startValue The starting value for the sequence. The default starting value is for ascending sequences and for descending ones. System.Nullable < System.Int64 > incrementBy The amount to increment between values. Defaults to 1. System.Nullable < System.Int64 > minValue The minimum value for the sequence. The default for an ascending sequence is 1. The default for a descending sequence is the minimum value of the data type. System.Nullable < System.Int64 > maxValue The maximum value for the sequence. The default for an ascending sequence is the maximum value of the data type. The default for a descending sequence is -1. System.Nullable < System.Boolean > isCyclic Sets whether or not the sequence will start again from the beginning once the maximum value is reached. Defaults to false. System.Nullable < System.Int64 > numbersToCache Specifies how many sequence numbers are to be preallocated and stored in memory for faster access. The minimum value is 1 (only one value can be generated at a time, i.e., no cache), and this is also the default. Returns Type Description System.Boolean The same builder instance so that multiple calls can be chained. | Improve this Doc View Source CanSetValueGenerationStrategy(IConventionPropertyBuilder, Nullable<NpgsqlValueGenerationStrategy>, Boolean) Returns a value indicating whether the given value can be set as the value generation strategy. Declaration public static bool CanSetValueGenerationStrategy(this IConventionPropertyBuilder propertyBuilder, NpgsqlValueGenerationStrategy? valueGenerationStrategy, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. System.Nullable < NpgsqlValueGenerationStrategy > valueGenerationStrategy The value generation strategy. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description System.Boolean true if the given value can be set as the default value generation strategy. | Improve this Doc View Source ForNpgsqlHasComment(PropertyBuilder, String) Configures a comment to be applied to the column. Declaration [Obsolete(\"Use HasComment\")] public static PropertyBuilder ForNpgsqlHasComment(this PropertyBuilder propertyBuilder, string comment) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. System.String comment The comment for the column. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source ForNpgsqlHasComment<TEntity>(PropertyBuilder<TEntity>, String) Configures a comment to be applied to the column. Declaration [Obsolete(\"Use HasComment\")] public static PropertyBuilder<TEntity> ForNpgsqlHasComment<TEntity>(this PropertyBuilder<TEntity> propertyBuilder, string comment) Parameters Type Name Description PropertyBuilder <TEntity> propertyBuilder The builder for the property being configured. System.String comment The comment for the column. Returns Type Description PropertyBuilder <TEntity> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TEntity The entity type being configured. | Improve this Doc View Source ForNpgsqlUseSequenceHiLo(PropertyBuilder, String, String) Configures the property to use a sequence-based hi-lo pattern to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Declaration [Obsolete(\"Use UseHiLo\")] public static PropertyBuilder ForNpgsqlUseSequenceHiLo(this PropertyBuilder propertyBuilder, string name = null, string schema = null) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. System.String name The comment of the sequence. System.String schema The schema of the sequence. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source ForNpgsqlUseSequenceHiLo<TProperty>(PropertyBuilder<TProperty>, String, String) Configures the property to use a sequence-based hi-lo pattern to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Declaration [Obsolete(\"Use UseHiLo\")] public static PropertyBuilder<TProperty> ForNpgsqlUseSequenceHiLo<TProperty>(this PropertyBuilder<TProperty> propertyBuilder, string name = null, string schema = null) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. System.String name The comment of the sequence. System.String schema The schema of the sequence. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty | Improve this Doc View Source HasHiLoSequence(IConventionPropertyBuilder, String, String, Boolean) Configures the database sequence used for the hi-lo pattern to generate values for the key property, when targeting SQL Server. Declaration public static IConventionSequenceBuilder HasHiLoSequence(this IConventionPropertyBuilder propertyBuilder, string name, string schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. System.String name The name of the sequence. System.String schema The schema of the sequence. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionSequenceBuilder A builder to further configure the sequence. | Improve this Doc View Source HasIdentityOptions(IConventionPropertyBuilder, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Boolean>, Nullable<Int64>) Sets the sequence options on an identity column. The column must be set as identity via UseIdentityColumn(PropertyBuilder) or UseIdentityAlwaysColumn(PropertyBuilder) . Declaration public static IConventionPropertyBuilder HasIdentityOptions(this IConventionPropertyBuilder propertyBuilder, long? startValue = default(long? ), long? incrementBy = default(long? ), long? minValue = default(long? ), long? maxValue = default(long? ), bool? isCyclic = default(bool? ), long? numbersToCache = default(long? )) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. System.Nullable < System.Int64 > startValue The starting value for the sequence. The default starting value is for ascending sequences and for descending ones. System.Nullable < System.Int64 > incrementBy The amount to increment between values. Defaults to 1. System.Nullable < System.Int64 > minValue The minimum value for the sequence. The default for an ascending sequence is 1. The default for a descending sequence is the minimum value of the data type. System.Nullable < System.Int64 > maxValue The maximum value for the sequence. The default for an ascending sequence is the maximum value of the data type. The default for a descending sequence is -1. System.Nullable < System.Boolean > isCyclic Sets whether or not the sequence will start again from the beginning once the maximum value is reached. Defaults to false. System.Nullable < System.Int64 > numbersToCache Specifies how many sequence numbers are to be preallocated and stored in memory for faster access. The minimum value is 1 (only one value can be generated at a time, i.e., no cache), and this is also the default. Returns Type Description IConventionPropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source HasIdentityOptions(PropertyBuilder, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Boolean>, Nullable<Int64>) Sets the sequence options on an identity column. The column must be set as identity via UseIdentityColumn(PropertyBuilder) or UseIdentityAlwaysColumn(PropertyBuilder) . Declaration public static PropertyBuilder HasIdentityOptions(this PropertyBuilder propertyBuilder, long? startValue = default(long? ), long? incrementBy = default(long? ), long? minValue = default(long? ), long? maxValue = default(long? ), bool? isCyclic = default(bool? ), long? numbersToCache = default(long? )) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. System.Nullable < System.Int64 > startValue The starting value for the sequence. The default starting value is for ascending sequences and for descending ones. System.Nullable < System.Int64 > incrementBy The amount to increment between values. Defaults to 1. System.Nullable < System.Int64 > minValue The minimum value for the sequence. The default for an ascending sequence is 1. The default for a descending sequence is the minimum value of the data type. System.Nullable < System.Int64 > maxValue The maximum value for the sequence. The default for an ascending sequence is the maximum value of the data type. The default for a descending sequence is -1. System.Nullable < System.Boolean > isCyclic Sets whether or not the sequence will start again from the beginning once the maximum value is reached. Defaults to false. System.Nullable < System.Int64 > numbersToCache Specifies how many sequence numbers are to be preallocated and stored in memory for faster access. The minimum value is 1 (only one value can be generated at a time, i.e., no cache), and this is also the default. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source HasIdentityOptions<TProperty>(PropertyBuilder<TProperty>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Int64>, Nullable<Boolean>, Nullable<Int64>) Sets the sequence options on an identity column. The column must be set as identity via UseIdentityColumn(PropertyBuilder) or UseIdentityAlwaysColumn(PropertyBuilder) . Declaration public static PropertyBuilder<TProperty> HasIdentityOptions<TProperty>(this PropertyBuilder<TProperty> propertyBuilder, long? startValue = default(long? ), long? incrementBy = default(long? ), long? minValue = default(long? ), long? maxValue = default(long? ), bool? isCyclic = default(bool? ), long? numbersToCache = default(long? )) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. System.Nullable < System.Int64 > startValue The starting value for the sequence. The default starting value is for ascending sequences and for descending ones. System.Nullable < System.Int64 > incrementBy The amount to increment between values. Defaults to 1. System.Nullable < System.Int64 > minValue The minimum value for the sequence. The default for an ascending sequence is 1. The default for a descending sequence is the minimum value of the data type. System.Nullable < System.Int64 > maxValue The maximum value for the sequence. The default for an ascending sequence is the maximum value of the data type. The default for a descending sequence is -1. System.Nullable < System.Boolean > isCyclic Sets whether or not the sequence will start again from the beginning once the maximum value is reached. Defaults to false. System.Nullable < System.Int64 > numbersToCache Specifies how many sequence numbers are to be preallocated and stored in memory for faster access. The minimum value is 1 (only one value can be generated at a time, i.e., no cache), and this is also the default. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty | Improve this Doc View Source HasValueGenerationStrategy(IConventionPropertyBuilder, Nullable<NpgsqlValueGenerationStrategy>, Boolean) Configures the value generation strategy for the key property, when targeting PostgreSQL. Declaration public static IConventionPropertyBuilder HasValueGenerationStrategy(this IConventionPropertyBuilder propertyBuilder, NpgsqlValueGenerationStrategy? valueGenerationStrategy, bool fromDataAnnotation = false) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. System.Nullable < NpgsqlValueGenerationStrategy > valueGenerationStrategy The value generation strategy. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionPropertyBuilder The same builder instance if the configuration was applied, null otherwise. | Improve this Doc View Source UseHiLo(PropertyBuilder, String, String) Configures the property to use a sequence-based hi-lo pattern to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Declaration public static PropertyBuilder UseHiLo(this PropertyBuilder propertyBuilder, string name = null, string schema = null) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. System.String name The comment of the sequence. System.String schema The schema of the sequence. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseHiLo<TProperty>(PropertyBuilder<TProperty>, String, String) Configures the property to use a sequence-based hi-lo pattern to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Declaration public static PropertyBuilder<TProperty> UseHiLo<TProperty>(this PropertyBuilder<TProperty> propertyBuilder, string name = null, string schema = null) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. System.String name The comment of the sequence. System.String schema The schema of the sequence. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty | Improve this Doc View Source UseIdentityAlwaysColumn(IConventionPropertyBuilder) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will always be generated as identity, and the application will not be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration public static IConventionPropertyBuilder UseIdentityAlwaysColumn(this IConventionPropertyBuilder propertyBuilder) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description IConventionPropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseIdentityAlwaysColumn(PropertyBuilder) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will always be generated as identity, and the application will not be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder UseIdentityAlwaysColumn(this PropertyBuilder propertyBuilder) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseIdentityAlwaysColumn<TProperty>(PropertyBuilder<TProperty>) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will always be generated as identity, and the application will not be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder<TProperty> UseIdentityAlwaysColumn<TProperty>(this PropertyBuilder<TProperty> propertyBuilder) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty | Improve this Doc View Source UseIdentityByDefaultColumn(IConventionPropertyBuilder) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static IConventionPropertyBuilder UseIdentityByDefaultColumn(this IConventionPropertyBuilder propertyBuilder) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description IConventionPropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseIdentityByDefaultColumn(PropertyBuilder) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder UseIdentityByDefaultColumn(this PropertyBuilder propertyBuilder) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseIdentityByDefaultColumn<TProperty>(PropertyBuilder<TProperty>) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder<TProperty> UseIdentityByDefaultColumn<TProperty>(this PropertyBuilder<TProperty> propertyBuilder) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty The type of the property being configured. | Improve this Doc View Source UseIdentityColumn(PropertyBuilder) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. This internally calls . This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder UseIdentityColumn(this PropertyBuilder propertyBuilder) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseIdentityColumn<TProperty>(PropertyBuilder<TProperty>) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. This internally calls . This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static PropertyBuilder<TProperty> UseIdentityColumn<TProperty>(this PropertyBuilder<TProperty> propertyBuilder) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty The type of the property being configured. | Improve this Doc View Source UseNpgsqlIdentityAlwaysColumn(PropertyBuilder) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will always be generated as identity, and the application will not be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration [Obsolete(\"Use UseIdentityAlwaysColumn\")] public static PropertyBuilder UseNpgsqlIdentityAlwaysColumn(this PropertyBuilder propertyBuilder) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseNpgsqlIdentityAlwaysColumn<TProperty>(PropertyBuilder<TProperty>) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will always be generated as identity, and the application will not be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration [Obsolete(\"Use UseIdentityAlwaysColumn\")] public static PropertyBuilder<TProperty> UseNpgsqlIdentityAlwaysColumn<TProperty>(this PropertyBuilder<TProperty> propertyBuilder) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty | Improve this Doc View Source UseNpgsqlIdentityByDefaultColumn(PropertyBuilder) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration [Obsolete(\"Use UseIdentityByDefaultColumn\")] public static PropertyBuilder UseNpgsqlIdentityByDefaultColumn(this PropertyBuilder propertyBuilder) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseNpgsqlIdentityByDefaultColumn<TProperty>(PropertyBuilder<TProperty>) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration [Obsolete(\"Use UseIdentityByDefaultColumn\")] public static PropertyBuilder<TProperty> UseNpgsqlIdentityByDefaultColumn<TProperty>(this PropertyBuilder<TProperty> propertyBuilder) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty The type of the property being configured. | Improve this Doc View Source UseNpgsqlIdentityColumn(PropertyBuilder) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration [Obsolete(\"Use UseIdentityColumn\")] public static PropertyBuilder UseNpgsqlIdentityColumn(this PropertyBuilder propertyBuilder) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseNpgsqlIdentityColumn<TProperty>(PropertyBuilder<TProperty>) Configures the property to use the PostgreSQL IDENTITY feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Values for this property will be generated as identity by default, but the application will be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration [Obsolete(\"Use UseIdentityColumn\")] public static PropertyBuilder<TProperty> UseNpgsqlIdentityColumn<TProperty>(this PropertyBuilder<TProperty> propertyBuilder) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty The type of the property being configured. | Improve this Doc View Source UseNpgsqlSerialColumn(PropertyBuilder) Configures the property to use the PostgreSQL SERIAL feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Declaration [Obsolete(\"Use UseSerialColumn\")] public static PropertyBuilder UseNpgsqlSerialColumn(this PropertyBuilder propertyBuilder) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseNpgsqlSerialColumn<TProperty>(PropertyBuilder<TProperty>) Configures the property to use the PostgreSQL SERIAL feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Declaration [Obsolete(\"Use UseSerialColumn\")] public static PropertyBuilder<TProperty> UseNpgsqlSerialColumn<TProperty>(this PropertyBuilder<TProperty> propertyBuilder) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty The type of the property being configured. | Improve this Doc View Source UseSerialColumn(IConventionPropertyBuilder) Configures the property to use the PostgreSQL SERIAL feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Declaration public static IConventionPropertyBuilder UseSerialColumn(this IConventionPropertyBuilder propertyBuilder) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description IConventionPropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseSerialColumn(PropertyBuilder) Configures the property to use the PostgreSQL SERIAL feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Declaration public static PropertyBuilder UseSerialColumn(this PropertyBuilder propertyBuilder) Parameters Type Name Description PropertyBuilder propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseSerialColumn<TProperty>(PropertyBuilder<TProperty>) Configures the property to use the PostgreSQL SERIAL feature to generate values for new entities, when targeting PostgreSQL. This method sets the property to be . Declaration public static PropertyBuilder<TProperty> UseSerialColumn<TProperty>(this PropertyBuilder<TProperty> propertyBuilder) Parameters Type Name Description PropertyBuilder <TProperty> propertyBuilder The builder for the property being configured. Returns Type Description PropertyBuilder <TProperty> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TProperty The type of the property being configured."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.Metadata.Conventions.NpgsqlStoreGenerationConvention.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.Metadata.Conventions.NpgsqlStoreGenerationConvention.html",
    "title": "Class NpgsqlStoreGenerationConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlStoreGenerationConvention A convention that ensures that properties aren't configured to have a default value, as computed column or using a NpgsqlValueGenerationStrategy at the same time. Inheritance System.Object NpgsqlStoreGenerationConvention Namespace : Microsoft.EntityFrameworkCore.Metadata.Conventions Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlStoreGenerationConvention : StoreGenerationConvention Constructors | Improve this Doc View Source NpgsqlStoreGenerationConvention(ProviderConventionSetBuilderDependencies, RelationalConventionSetBuilderDependencies) Creates a new instance of NpgsqlStoreGenerationConvention . Declaration public NpgsqlStoreGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies) Parameters Type Name Description ProviderConventionSetBuilderDependencies dependencies Parameter object containing dependencies for this convention. RelationalConventionSetBuilderDependencies relationalDependencies Parameter object containing relational dependencies for this convention. Methods | Improve this Doc View Source ProcessPropertyAnnotationChanged(IConventionPropertyBuilder, String, IConventionAnnotation, IConventionAnnotation, IConventionContext<IConventionAnnotation>) Called after an annotation is changed on a property. Declaration public override void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext<IConventionAnnotation> context) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property. System.String name The annotation name. IConventionAnnotation annotation The new annotation. IConventionAnnotation oldAnnotation The old annotation. IConventionContext < IConventionAnnotation > context Additional information associated with convention execution. | Improve this Doc View Source Validate(IConventionProperty) Declaration protected override void Validate(IConventionProperty property) Parameters Type Name Description IConventionProperty property"
  },
  "doc/api/Npgsql.RawPostgis.PostgisRawHandlerFactory.html": {
    "href": "doc/api/Npgsql.RawPostgis.PostgisRawHandlerFactory.html",
    "title": "Class PostgisRawHandlerFactory | Npgsql Documentation",
    "keywords": "Class PostgisRawHandlerFactory Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < System.Byte []> PostgisRawHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<Byte[]>.Create(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<Byte[]>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<Byte[]>.DefaultValueType NpgsqlTypeHandlerFactory.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.RawPostgis Assembly : Npgsql.RawPostgis.dll Syntax public class PostgisRawHandlerFactory : NpgsqlTypeHandlerFactory<byte[]> Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<byte[]> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < System.Byte []> Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<System.Byte[]>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.NpgsqlReadBuffer.html": {
    "href": "doc/api/Npgsql.NpgsqlReadBuffer.html",
    "title": "Class NpgsqlReadBuffer | Npgsql Documentation",
    "keywords": "Class NpgsqlReadBuffer A buffer used by Npgsql to read data from the socket efficiently. Provides methods which decode different values types and tracks the current position. Inheritance System.Object NpgsqlReadBuffer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlReadBuffer Properties | Improve this Doc View Source Connection Declaration public NpgsqlConnection Connection { get; } Property Value Type Description NpgsqlConnection Methods | Improve this Doc View Source Ensure(Int32, Boolean) Ensures that count bytes are available in the buffer, and if not, reads from the socket until enough is available. Declaration public Task Ensure(int count, bool async) Parameters Type Name Description System.Int32 count System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source GetNullTerminatedBytes() Declaration public ReadOnlySpan<byte> GetNullTerminatedBytes() Returns Type Description System.ReadOnlySpan < System.Byte > | Improve this Doc View Source GetStream(Int32, Boolean) Declaration public Stream GetStream(int len, bool canSeek) Parameters Type Name Description System.Int32 len System.Boolean canSeek Returns Type Description System.IO.Stream | Improve this Doc View Source ReadByte() Declaration public byte ReadByte() Returns Type Description System.Byte | Improve this Doc View Source ReadBytes(Byte[], Int32, Int32) Declaration public void ReadBytes(byte[] output, int outputOffset, int len) Parameters Type Name Description System.Byte [] output System.Int32 outputOffset System.Int32 len | Improve this Doc View Source ReadBytes(Byte[], Int32, Int32, Boolean) Declaration public ValueTask<int> ReadBytes(byte[] output, int outputOffset, int len, bool async) Parameters Type Name Description System.Byte [] output System.Int32 outputOffset System.Int32 len System.Boolean async Returns Type Description System.Threading.Tasks.ValueTask < System.Int32 > | Improve this Doc View Source ReadBytes(Span<Byte>) Declaration public void ReadBytes(Span<byte> output) Parameters Type Name Description System.Span < System.Byte > output | Improve this Doc View Source ReadChars(Int32) Declaration public char[] ReadChars(int byteLen) Parameters Type Name Description System.Int32 byteLen Returns Type Description System.Char [] | Improve this Doc View Source ReadDouble() Declaration public double ReadDouble() Returns Type Description System.Double | Improve this Doc View Source ReadDouble(Boolean) Declaration public double ReadDouble(bool littleEndian) Parameters Type Name Description System.Boolean littleEndian Returns Type Description System.Double | Improve this Doc View Source ReadInt16() Declaration public short ReadInt16() Returns Type Description System.Int16 | Improve this Doc View Source ReadInt16(Boolean) Declaration public short ReadInt16(bool littleEndian) Parameters Type Name Description System.Boolean littleEndian Returns Type Description System.Int16 | Improve this Doc View Source ReadInt32() Declaration public int ReadInt32() Returns Type Description System.Int32 | Improve this Doc View Source ReadInt32(Boolean) Declaration public int ReadInt32(bool littleEndian) Parameters Type Name Description System.Boolean littleEndian Returns Type Description System.Int32 | Improve this Doc View Source ReadInt64() Declaration public long ReadInt64() Returns Type Description System.Int64 | Improve this Doc View Source ReadInt64(Boolean) Declaration public long ReadInt64(bool littleEndian) Parameters Type Name Description System.Boolean littleEndian Returns Type Description System.Int64 | Improve this Doc View Source ReadMemory(Int32) Declaration public ReadOnlyMemory<byte> ReadMemory(int len) Parameters Type Name Description System.Int32 len Returns Type Description System.ReadOnlyMemory < System.Byte > | Improve this Doc View Source ReadNullTerminatedString() Seeks the first null terminator (\\0) and returns the string up to it. The buffer must already contain the entire string and its terminator. Declaration public string ReadNullTerminatedString() Returns Type Description System.String | Improve this Doc View Source ReadNullTerminatedStringRelaxed() Seeks the first null terminator (\\0) and returns the string up to it. The buffer must already contain the entire string and its terminator. If any character could not be decoded, a question mark character is returned instead of throwing an exception. Declaration public string ReadNullTerminatedStringRelaxed() Returns Type Description System.String | Improve this Doc View Source ReadSByte() Declaration public sbyte ReadSByte() Returns Type Description System.SByte | Improve this Doc View Source ReadSingle() Declaration public float ReadSingle() Returns Type Description System.Single | Improve this Doc View Source ReadSingle(Boolean) Declaration public float ReadSingle(bool littleEndian) Parameters Type Name Description System.Boolean littleEndian Returns Type Description System.Single | Improve this Doc View Source ReadSpan(Int32) Declaration public ReadOnlySpan<byte> ReadSpan(int len) Parameters Type Name Description System.Int32 len Returns Type Description System.ReadOnlySpan < System.Byte > | Improve this Doc View Source ReadString(Int32) Declaration public string ReadString(int byteLen) Parameters Type Name Description System.Int32 byteLen Returns Type Description System.String | Improve this Doc View Source ReadUInt16() Declaration public ushort ReadUInt16() Returns Type Description System.UInt16 | Improve this Doc View Source ReadUInt16(Boolean) Declaration public ushort ReadUInt16(bool littleEndian) Parameters Type Name Description System.Boolean littleEndian Returns Type Description System.UInt16 | Improve this Doc View Source ReadUInt32() Declaration public uint ReadUInt32() Returns Type Description System.UInt32 | Improve this Doc View Source ReadUInt32(Boolean) Declaration public uint ReadUInt32(bool littleEndian) Parameters Type Name Description System.Boolean littleEndian Returns Type Description System.UInt32 | Improve this Doc View Source ReadUInt64() Declaration public ulong ReadUInt64() Returns Type Description System.UInt64 | Improve this Doc View Source ReadUInt64(Boolean) Declaration public ulong ReadUInt64(bool littleEndian) Parameters Type Name Description System.Boolean littleEndian Returns Type Description System.UInt64 | Improve this Doc View Source Skip(Int64, Boolean) Skip a given number of bytes. Declaration public Task Skip(long len, bool async) Parameters Type Name Description System.Int64 len System.Boolean async Returns Type Description System.Threading.Tasks.Task"
  },
  "doc/api/Npgsql.NpgsqlRawCopyStream.html": {
    "href": "doc/api/Npgsql.NpgsqlRawCopyStream.html",
    "title": "Class NpgsqlRawCopyStream | Npgsql Documentation",
    "keywords": "Class NpgsqlRawCopyStream Provides an API for a raw binary COPY operation, a high-performance data import/export mechanism to a PostgreSQL table. Initiated by BeginRawBinaryCopy(String) Inheritance System.Object System.MarshalByRefObject System.IO.Stream NpgsqlRawCopyStream Implements System.IAsyncDisposable System.IDisposable Inherited Members System.IO.Stream.Null System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.Close() System.IO.Stream.CopyTo(System.IO.Stream) System.IO.Stream.CopyTo(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Threading.CancellationToken) System.IO.Stream.CreateWaitHandle() System.IO.Stream.Dispose() System.IO.Stream.DisposeAsync() System.IO.Stream.EndRead(System.IAsyncResult) System.IO.Stream.EndWrite(System.IAsyncResult) System.IO.Stream.FlushAsync() System.IO.Stream.ObjectInvariant() System.IO.Stream.Read(System.Span<System.Byte>) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ReadAsync(System.Memory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.ReadByte() System.IO.Stream.Synchronized(System.IO.Stream) System.IO.Stream.Write(System.ReadOnlySpan<System.Byte>) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.WriteAsync(System.ReadOnlyMemory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.WriteByte(System.Byte) System.IO.Stream.CanTimeout System.IO.Stream.ReadTimeout System.IO.Stream.WriteTimeout System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlRawCopyStream : Stream, IAsyncDisposable, ICancelable, IDisposable Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . Properties | Improve this Doc View Source CanRead Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanRead | Improve this Doc View Source CanSeek Declaration public override bool CanSeek { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanSeek | Improve this Doc View Source CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanWrite | Improve this Doc View Source Length Declaration public override long Length { get; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Length | Improve this Doc View Source Position Declaration public override long Position { get; set; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Position Methods | Improve this Doc View Source Cancel() Cancels and terminates an ongoing operation. Any data already written will be discarded. Declaration public void Cancel() | Improve this Doc View Source CancelAsync() Cancels and terminates an ongoing operation. Any data already written will be discarded. Declaration public Task CancelAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides System.IO.Stream.Dispose(System.Boolean) | Improve this Doc View Source Flush() Declaration public override void Flush() Overrides System.IO.Stream.Flush() | Improve this Doc View Source FlushAsync(CancellationToken) Declaration public override Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Overrides System.IO.Stream.FlushAsync(System.Threading.CancellationToken) | Improve this Doc View Source Read(Byte[], Int32, Int32) Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count Returns Type Description System.Int32 Overrides System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32) | Improve this Doc View Source ReadAsync(Byte[], Int32, Int32, CancellationToken) Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Int32 > Overrides System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) | Improve this Doc View Source Seek(Int64, SeekOrigin) Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description System.Int64 offset System.IO.SeekOrigin origin Returns Type Description System.Int64 Overrides System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin) | Improve this Doc View Source SetLength(Int64) Declaration public override void SetLength(long value) Parameters Type Name Description System.Int64 value Overrides System.IO.Stream.SetLength(System.Int64) | Improve this Doc View Source Write(Byte[], Int32, Int32) Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count Overrides System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32) | Improve this Doc View Source WriteAsync(Byte[], Int32, Int32, CancellationToken) Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Overrides System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) Implements System.IAsyncDisposable System.IDisposable"
  },
  "doc/api/Npgsql.NpgsqlDatabaseInfo.html": {
    "href": "doc/api/Npgsql.NpgsqlDatabaseInfo.html",
    "title": "Class NpgsqlDatabaseInfo | Npgsql Documentation",
    "keywords": "Class NpgsqlDatabaseInfo Base class for implementations which provide information about PostgreSQL and PostgreSQL-like databases (e.g. type definitions, capabilities...). Inheritance System.Object NpgsqlDatabaseInfo Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public abstract class NpgsqlDatabaseInfo Constructors | Improve this Doc View Source NpgsqlDatabaseInfo(String, Int32, String, Version) Initializes the instance of NpgsqlDatabaseInfo . Declaration protected NpgsqlDatabaseInfo(string host, int port, string databaseName, Version version) Parameters Type Name Description System.String host System.Int32 port System.String databaseName System.Version version Properties | Improve this Doc View Source HasIntegerDateTimes Reports whether the backend uses the newer integer timestamp representation. Declaration public virtual bool HasIntegerDateTimes { get; protected set; } Property Value Type Description System.Boolean | Improve this Doc View Source Host The hostname of IP address of the database. Declaration public string Host { get; } Property Value Type Description System.String | Improve this Doc View Source Name The database name. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Port The TCP port of the database. Declaration public int Port { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SupportsAdvisoryLocks Whether the backend supports advisory locks. Declaration public virtual bool SupportsAdvisoryLocks { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SupportsCloseAll Whether the backend supports the CLOSE ALL statement. Declaration public virtual bool SupportsCloseAll { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SupportsDiscard Whether the backend supports the DISCARD statement. Declaration public virtual bool SupportsDiscard { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SupportsDiscardSequences Whether the backend supports the DISCARD SEQUENCES statement. Declaration public virtual bool SupportsDiscardSequences { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SupportsDiscardTemp Whether the backend supports the DISCARD TEMP statement. Declaration public virtual bool SupportsDiscardTemp { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SupportsEnumTypes Whether the backend supports enum types. Declaration public virtual bool SupportsEnumTypes { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SupportsRangeTypes Whether the backend supports range types. Declaration public virtual bool SupportsRangeTypes { get; } Property Value Type Description System.Boolean | Improve this Doc View Source SupportsTransactions Whether the database supports transactions. Declaration public virtual bool SupportsTransactions { get; protected set; } Property Value Type Description System.Boolean | Improve this Doc View Source SupportsUnlisten Whether the backend supports the UNLISTEN statement. Declaration public virtual bool SupportsUnlisten { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Version The version of the PostgreSQL database we're connected to, as reported in the \"server_version\" parameter. Exposed via PostgreSqlVersion . Declaration public Version Version { get; } Property Value Type Description System.Version Methods | Improve this Doc View Source GetTypes() Provides all PostgreSQL types detected in this database. Declaration protected abstract IEnumerable<PostgresType> GetTypes() Returns Type Description System.Collections.Generic.IEnumerable < PostgresType > | Improve this Doc View Source ParseServerVersion(String) Parses a PostgreSQL server version (e.g. 10.1, 9.6.3) and returns a CLR Version. Declaration protected static Version ParseServerVersion(string value) Parameters Type Name Description System.String value Returns Type Description System.Version | Improve this Doc View Source RegisterFactory(INpgsqlDatabaseInfoFactory) Registers a new database info factory, which is used to load information about databases. Declaration public static void RegisterFactory(INpgsqlDatabaseInfoFactory factory) Parameters Type Name Description INpgsqlDatabaseInfoFactory factory"
  },
  "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandlerFactory.html": {
    "href": "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.TimestampHandlerFactory.html",
    "title": "Class TimestampHandlerFactory | Npgsql Documentation",
    "keywords": "Class TimestampHandlerFactory A factory for type handlers for the PostgreSQL timestamp data type. Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < System.DateTime > TimestampHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<DateTime>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<DateTime>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class TimestampHandlerFactory : NpgsqlTypeHandlerFactory<DateTime> Remarks See http://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<DateTime> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < System.DateTime > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<System.DateTime>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.NpgsqlLargeObjectManager.html": {
    "href": "doc/api/Npgsql.NpgsqlLargeObjectManager.html",
    "title": "Class NpgsqlLargeObjectManager | Npgsql Documentation",
    "keywords": "Class NpgsqlLargeObjectManager Large object manager. This class can be used to store very large files in a PostgreSQL database. Inheritance System.Object NpgsqlLargeObjectManager Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public class NpgsqlLargeObjectManager Constructors | Improve this Doc View Source NpgsqlLargeObjectManager(NpgsqlConnection) Creates an NpgsqlLargeObjectManager for this connection. The connection must be opened to perform remote operations. Declaration public NpgsqlLargeObjectManager(NpgsqlConnection connection) Parameters Type Name Description NpgsqlConnection connection Properties | Improve this Doc View Source Has64BitSupport Since PostgreSQL 9.3, large objects larger than 2GB can be handled, up to 4TB. This property returns true whether the PostgreSQL version is >= 9.3. Declaration public bool Has64BitSupport { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MaxTransferBlockSize The largest chunk size (in bytes) read and write operations will read/write each roundtrip to the network. Default 4 MB. Declaration public int MaxTransferBlockSize { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Create(UInt32) Create an empty large object in the database. If an oid is specified but is already in use, an PostgresException will be thrown. Declaration public uint Create(uint preferredOid = 0U) Parameters Type Name Description System.UInt32 preferredOid A preferred oid, or specify 0 if one should be automatically assigned Returns Type Description System.UInt32 The oid for the large object created Exceptions Type Condition PostgresException If an oid is already in use | Improve this Doc View Source CreateAsync(UInt32, CancellationToken) Create an empty large object in the database. If an oid is specified but is already in use, an PostgresException will be thrown. Declaration public Task<uint> CreateAsync(uint preferredOid, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.UInt32 preferredOid A preferred oid, or specify 0 if one should be automatically assigned System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task < System.UInt32 > The oid for the large object created Exceptions Type Condition PostgresException If an oid is already in use | Improve this Doc View Source ExportRemote(UInt32, String) Exports a large object stored in the database to a file on the backend. This requires superuser permissions. Declaration public void ExportRemote(uint oid, string path) Parameters Type Name Description System.UInt32 oid Oid of the object to export System.String path Path to write the file on the backend | Improve this Doc View Source ExportRemoteAsync(UInt32, String, CancellationToken) Exports a large object stored in the database to a file on the backend. This requires superuser permissions. Declaration public Task ExportRemoteAsync(uint oid, string path, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.UInt32 oid Oid of the object to export System.String path Path to write the file on the backend System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source ImportRemote(String, UInt32) Imports a large object to be stored as a large object in the database from a file stored on the backend. This requires superuser permissions. Declaration public void ImportRemote(string path, uint oid = 0U) Parameters Type Name Description System.String path Path to read the file on the backend System.UInt32 oid A preferred oid, or specify 0 if one should be automatically assigned | Improve this Doc View Source ImportRemoteAsync(String, UInt32, CancellationToken) Imports a large object to be stored as a large object in the database from a file stored on the backend. This requires superuser permissions. Declaration public Task ImportRemoteAsync(string path, uint oid, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.String path Path to read the file on the backend System.UInt32 oid A preferred oid, or specify 0 if one should be automatically assigned System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source OpenRead(UInt32) Opens a large object on the backend, returning a stream controlling this remote object. A transaction snapshot is taken by the backend when the object is opened with only read permissions. When reading from this object, the contents reflects the time when the snapshot was taken. Note that this method, as well as operations on the stream must be wrapped inside a transaction. Declaration public NpgsqlLargeObjectStream OpenRead(uint oid) Parameters Type Name Description System.UInt32 oid Oid of the object Returns Type Description NpgsqlLargeObjectStream An NpgsqlLargeObjectStream | Improve this Doc View Source OpenReadAsync(UInt32, CancellationToken) Opens a large object on the backend, returning a stream controlling this remote object. A transaction snapshot is taken by the backend when the object is opened with only read permissions. When reading from this object, the contents reflects the time when the snapshot was taken. Note that this method, as well as operations on the stream must be wrapped inside a transaction. Declaration public Task<NpgsqlLargeObjectStream> OpenReadAsync(uint oid, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.UInt32 oid Oid of the object System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task < NpgsqlLargeObjectStream > An NpgsqlLargeObjectStream | Improve this Doc View Source OpenReadWrite(UInt32) Opens a large object on the backend, returning a stream controlling this remote object. Note that this method, as well as operations on the stream must be wrapped inside a transaction. Declaration public NpgsqlLargeObjectStream OpenReadWrite(uint oid) Parameters Type Name Description System.UInt32 oid Oid of the object Returns Type Description NpgsqlLargeObjectStream An NpgsqlLargeObjectStream | Improve this Doc View Source OpenReadWriteAsync(UInt32, CancellationToken) Opens a large object on the backend, returning a stream controlling this remote object. Note that this method, as well as operations on the stream must be wrapped inside a transaction. Declaration public Task<NpgsqlLargeObjectStream> OpenReadWriteAsync(uint oid, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.UInt32 oid Oid of the object System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task < NpgsqlLargeObjectStream > An NpgsqlLargeObjectStream | Improve this Doc View Source Unlink(UInt32) Deletes a large object on the backend. Declaration public void Unlink(uint oid) Parameters Type Name Description System.UInt32 oid Oid of the object to delete | Improve this Doc View Source UnlinkAsync(UInt32, CancellationToken) Deletes a large object on the backend. Declaration public Task UnlinkAsync(uint oid, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.UInt32 oid Oid of the object to delete System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task"
  },
  "doc/api/NpgsqlTypes.NpgsqlInet.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlInet.html",
    "title": "Struct NpgsqlInet | Npgsql Documentation",
    "keywords": "Struct NpgsqlInet Represents a PostgreSQL inet type, which is a combination of an IPAddress and a subnet mask. Implements System.IEquatable < NpgsqlInet > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax [Obsolete(\"Use ValueTuple<IPAddress, int> instead\")] public struct NpgsqlInet : IEquatable<NpgsqlInet> Remarks http://www.postgresql.org/docs/current/static/datatype-net-types.html Constructors | Improve this Doc View Source NpgsqlInet(IPAddress) Declaration public NpgsqlInet(IPAddress address) Parameters Type Name Description System.Net.IPAddress address | Improve this Doc View Source NpgsqlInet(IPAddress, Int32) Declaration public NpgsqlInet(IPAddress address, int netmask) Parameters Type Name Description System.Net.IPAddress address System.Int32 netmask | Improve this Doc View Source NpgsqlInet(String) Declaration public NpgsqlInet(string addr) Parameters Type Name Description System.String addr Properties | Improve this Doc View Source Address Declaration public IPAddress Address { get; set; } Property Value Type Description System.Net.IPAddress | Improve this Doc View Source Netmask Declaration public int Netmask { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Deconstruct(out IPAddress, out Int32) Declaration public void Deconstruct(out IPAddress address, out int netmask) Parameters Type Name Description System.Net.IPAddress address System.Int32 netmask | Improve this Doc View Source Equals(NpgsqlInet) Declaration public bool Equals(NpgsqlInet other) Parameters Type Name Description NpgsqlInet other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToIPAddress(NpgsqlInet) Declaration public static IPAddress ToIPAddress(NpgsqlInet inet) Parameters Type Name Description NpgsqlInet inet Returns Type Description System.Net.IPAddress | Improve this Doc View Source ToNpgsqlInet(IPAddress) Declaration public static NpgsqlInet ToNpgsqlInet(IPAddress ip) Parameters Type Name Description System.Net.IPAddress ip Returns Type Description NpgsqlInet | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlInet, NpgsqlInet) Declaration public static bool operator ==(NpgsqlInet x, NpgsqlInet y) Parameters Type Name Description NpgsqlInet x NpgsqlInet y Returns Type Description System.Boolean | Improve this Doc View Source Explicit(NpgsqlInet to IPAddress) Declaration public static explicit operator IPAddress(NpgsqlInet inet) Parameters Type Name Description NpgsqlInet inet Returns Type Description System.Net.IPAddress | Improve this Doc View Source Implicit(IPAddress to NpgsqlInet) Declaration public static implicit operator NpgsqlInet(IPAddress ip) Parameters Type Name Description System.Net.IPAddress ip Returns Type Description NpgsqlInet | Improve this Doc View Source Inequality(NpgsqlInet, NpgsqlInet) Declaration public static bool operator !=(NpgsqlInet x, NpgsqlInet y) Parameters Type Name Description NpgsqlInet x NpgsqlInet y Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "doc/api/Npgsql.TypeHandling.NpgsqlTypeHandlerFactory.html": {
    "href": "doc/api/Npgsql.TypeHandling.NpgsqlTypeHandlerFactory.html",
    "title": "Class NpgsqlTypeHandlerFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlTypeHandlerFactory Base class for all type handler factories, which construct type handlers that know how to read and write CLR types from/to PostgreSQL types. Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory <TDefault> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandling Assembly : Npgsql.dll Syntax public abstract class NpgsqlTypeHandlerFactory Remarks In general, do not inherit from this class, inherit from NpgsqlTypeHandlerFactory<TDefault> instead. Properties | Improve this Doc View Source DefaultValueType The default CLR type that handlers produced by this factory will read and write. Declaration public abstract Type DefaultValueType { get; } Property Value Type Description System.Type Methods | Improve this Doc View Source CreateNonGeneric(PostgresType, NpgsqlConnection) Creates a type handler. Declaration public abstract NpgsqlTypeHandler CreateNonGeneric(PostgresType pgType, NpgsqlConnection conn) Parameters Type Name Description PostgresType pgType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler"
  },
  "doc/api/Npgsql.NpgsqlParameterCollection.html": {
    "href": "doc/api/Npgsql.NpgsqlParameterCollection.html",
    "title": "Class NpgsqlParameterCollection | Npgsql Documentation",
    "keywords": "Class NpgsqlParameterCollection Represents a collection of parameters relevant to a NpgsqlCommand as well as their respective mappings to columns in a DataSet. This class cannot be inherited. Inheritance System.Object System.MarshalByRefObject System.Data.Common.DbParameterCollection NpgsqlParameterCollection Implements System.Data.IDataParameterCollection System.Collections.IList System.Collections.ICollection System.Collections.Generic.IList < NpgsqlParameter > System.Collections.Generic.ICollection < NpgsqlParameter > System.Collections.Generic.IEnumerable < NpgsqlParameter > System.Collections.IEnumerable Inherited Members System.Data.Common.DbParameterCollection.System.Collections.IList.get_Item(System.Int32) System.Data.Common.DbParameterCollection.System.Collections.IList.set_Item(System.Int32, System.Object) System.Data.Common.DbParameterCollection.System.Data.IDataParameterCollection.get_Item(System.String) System.Data.Common.DbParameterCollection.System.Data.IDataParameterCollection.set_Item(System.String, System.Object) System.Data.Common.DbParameterCollection.System.Collections.IList.Item[System.Int32] System.Data.Common.DbParameterCollection.System.Data.IDataParameterCollection.Item[System.String] System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlParameterCollection : DbParameterCollection, IDataParameterCollection, IList, ICollection, IList<NpgsqlParameter>, ICollection<NpgsqlParameter>, IEnumerable<NpgsqlParameter>, IEnumerable Properties | Improve this Doc View Source Count Gets the number of NpgsqlParameter objects in the collection. Declaration public override int Count { get; } Property Value Type Description System.Int32 The number of NpgsqlParameter objects in the collection. Overrides System.Data.Common.DbParameterCollection.Count | Improve this Doc View Source IsFixedSize Declaration public override bool IsFixedSize { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbParameterCollection.IsFixedSize | Improve this Doc View Source IsReadOnly Declaration public override bool IsReadOnly { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbParameterCollection.IsReadOnly | Improve this Doc View Source IsSynchronized Declaration public override bool IsSynchronized { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbParameterCollection.IsSynchronized | Improve this Doc View Source Item[Int32] Gets the NpgsqlParameter at the specified index. Declaration public NpgsqlParameter this[int index] { get; set; } Parameters Type Name Description System.Int32 index The zero-based index of the NpgsqlParameter to retrieve. Property Value Type Description NpgsqlParameter The NpgsqlParameter at the specified index. | Improve this Doc View Source Item[String] Gets the NpgsqlParameter with the specified name. Declaration public NpgsqlParameter this[string parameterName] { get; set; } Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter to retrieve. Property Value Type Description NpgsqlParameter The NpgsqlParameter with the specified name, or a null reference if the parameter is not found. | Improve this Doc View Source SyncRoot Declaration public override object SyncRoot { get; } Property Value Type Description System.Object Overrides System.Data.Common.DbParameterCollection.SyncRoot Methods | Improve this Doc View Source Add(NpgsqlParameter) Adds the specified NpgsqlParameter object to the NpgsqlParameterCollection . Declaration public NpgsqlParameter Add(NpgsqlParameter value) Parameters Type Name Description NpgsqlParameter value The NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The index of the new NpgsqlParameter object. | Improve this Doc View Source Add(Object) Declaration public override int Add(object value) Parameters Type Name Description System.Object value Returns Type Description System.Int32 Overrides System.Data.Common.DbParameterCollection.Add(System.Object) | Improve this Doc View Source Add(String, NpgsqlDbType) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the parameter name and the data type. Declaration public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType) Parameters Type Name Description System.String parameterName The name of the parameter. NpgsqlDbType parameterType One of the DbType values. Returns Type Description NpgsqlParameter The index of the new NpgsqlParameter object. | Improve this Doc View Source Add(String, NpgsqlDbType, Int32) Adds a NpgsqlParameter to the NpgsqlParameterCollection with the parameter name, the data type, and the column length. Declaration public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType, int size) Parameters Type Name Description System.String parameterName The name of the parameter. NpgsqlDbType parameterType One of the DbType values. System.Int32 size The length of the column. Returns Type Description NpgsqlParameter The index of the new NpgsqlParameter object. | Improve this Doc View Source Add(String, NpgsqlDbType, Int32, String) Adds a NpgsqlParameter to the NpgsqlParameterCollection with the parameter name, the data type, the column length, and the source column name. Declaration public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn) Parameters Type Name Description System.String parameterName The name of the parameter. NpgsqlDbType parameterType One of the DbType values. System.Int32 size The length of the column. System.String sourceColumn The name of the source column. Returns Type Description NpgsqlParameter The index of the new NpgsqlParameter object. | Improve this Doc View Source AddRange(Array) Declaration public override void AddRange(Array values) Parameters Type Name Description System.Array values Overrides System.Data.Common.DbParameterCollection.AddRange(System.Array) | Improve this Doc View Source AddWithValue(NpgsqlDbType, Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified data type and value. Declaration public NpgsqlParameter AddWithValue(NpgsqlDbType parameterType, object value) Parameters Type Name Description NpgsqlDbType parameterType One of the NpgsqlDbType values. System.Object value The Value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The paramater that was added. | Improve this Doc View Source AddWithValue(Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified value. Declaration public NpgsqlParameter AddWithValue(object value) Parameters Type Name Description System.Object value The Value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The paramater that was added. | Improve this Doc View Source AddWithValue(String, NpgsqlDbType, Int32, Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified parameter name and value. Declaration public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, int size, object value) Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter . NpgsqlDbType parameterType One of the NpgsqlDbType values. System.Int32 size The length of the column. System.Object value The Value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The paramater that was added. | Improve this Doc View Source AddWithValue(String, NpgsqlDbType, Int32, String, Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified parameter name and value. Declaration public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn, object value) Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter . NpgsqlDbType parameterType One of the NpgsqlDbType values. System.Int32 size The length of the column. System.String sourceColumn The name of the source column. System.Object value The Value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The paramater that was added. | Improve this Doc View Source AddWithValue(String, NpgsqlDbType, Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified parameter name, data type and value. Declaration public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, object value) Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter . NpgsqlDbType parameterType One of the NpgsqlDbType values. System.Object value The Value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The paramater that was added. | Improve this Doc View Source AddWithValue(String, Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified parameter name and value. Declaration public NpgsqlParameter AddWithValue(string parameterName, object value) Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter . System.Object value The Value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The paramater that was added. | Improve this Doc View Source Clear() Removes all items from the collection. Declaration public override void Clear() Overrides System.Data.Common.DbParameterCollection.Clear() | Improve this Doc View Source Contains(NpgsqlParameter) Report whether the specified parameter is present in the collection. Declaration public bool Contains(NpgsqlParameter item) Parameters Type Name Description NpgsqlParameter item Parameter to find. Returns Type Description System.Boolean True if the parameter was found, otherwise false. | Improve this Doc View Source Contains(Object) Declaration public override bool Contains(object value) Parameters Type Name Description System.Object value Returns Type Description System.Boolean Overrides System.Data.Common.DbParameterCollection.Contains(System.Object) | Improve this Doc View Source Contains(String) Declaration public override bool Contains(string parameterName) Parameters Type Name Description System.String parameterName Returns Type Description System.Boolean Overrides System.Data.Common.DbParameterCollection.Contains(System.String) | Improve this Doc View Source CopyTo(NpgsqlParameter[], Int32) Convert collection to a System.Array. Declaration public void CopyTo(NpgsqlParameter[] array, int arrayIndex) Parameters Type Name Description NpgsqlParameter [] array Destination array. System.Int32 arrayIndex Starting index in destination array. | Improve this Doc View Source CopyTo(Array, Int32) Declaration public override void CopyTo(Array array, int index) Parameters Type Name Description System.Array array System.Int32 index Overrides System.Data.Common.DbParameterCollection.CopyTo(System.Array, System.Int32) | Improve this Doc View Source GetEnumerator() Declaration public override IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator Overrides System.Data.Common.DbParameterCollection.GetEnumerator() | Improve this Doc View Source GetParameter(Int32) Declaration protected override DbParameter GetParameter(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Data.Common.DbParameter Overrides System.Data.Common.DbParameterCollection.GetParameter(System.Int32) | Improve this Doc View Source GetParameter(String) Declaration protected override DbParameter GetParameter(string parameterName) Parameters Type Name Description System.String parameterName Returns Type Description System.Data.Common.DbParameter Overrides System.Data.Common.DbParameterCollection.GetParameter(System.String) | Improve this Doc View Source IndexOf(NpgsqlParameter) Report the offset within the collection of the given parameter. Declaration public int IndexOf(NpgsqlParameter item) Parameters Type Name Description NpgsqlParameter item Parameter to find. Returns Type Description System.Int32 Index of the parameter, or -1 if the parameter is not present. | Improve this Doc View Source IndexOf(Object) Declaration public override int IndexOf(object value) Parameters Type Name Description System.Object value Returns Type Description System.Int32 Overrides System.Data.Common.DbParameterCollection.IndexOf(System.Object) | Improve this Doc View Source IndexOf(String) Declaration public override int IndexOf(string parameterName) Parameters Type Name Description System.String parameterName Returns Type Description System.Int32 Overrides System.Data.Common.DbParameterCollection.IndexOf(System.String) | Improve this Doc View Source Insert(Int32, NpgsqlParameter) Insert the specified parameter into the collection. Declaration public void Insert(int index, NpgsqlParameter item) Parameters Type Name Description System.Int32 index Index of the existing parameter before which to insert the new one. NpgsqlParameter item Parameter to insert. | Improve this Doc View Source Insert(Int32, Object) Declaration public override void Insert(int index, object value) Parameters Type Name Description System.Int32 index System.Object value Overrides System.Data.Common.DbParameterCollection.Insert(System.Int32, System.Object) | Improve this Doc View Source Remove(NpgsqlParameter) Remove the specified parameter from the collection. Declaration public bool Remove(NpgsqlParameter item) Parameters Type Name Description NpgsqlParameter item Parameter to remove. Returns Type Description System.Boolean True if the parameter was found and removed, otherwise false. | Improve this Doc View Source Remove(Object) Removes the specified NpgsqlParameter from the collection. Declaration public override void Remove(object value) Parameters Type Name Description System.Object value The NpgsqlParameter to remove from the collection. Overrides System.Data.Common.DbParameterCollection.Remove(System.Object) | Improve this Doc View Source Remove(String) Removes the specified NpgsqlParameter from the collection. Declaration public void Remove(string parameterName) Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter to remove from the collection. | Improve this Doc View Source RemoveAt(Int32) Removes the specified NpgsqlParameter from the collection using a specific index. Declaration public override void RemoveAt(int index) Parameters Type Name Description System.Int32 index The zero-based index of the parameter. Overrides System.Data.Common.DbParameterCollection.RemoveAt(System.Int32) | Improve this Doc View Source RemoveAt(String) Declaration public override void RemoveAt(string parameterName) Parameters Type Name Description System.String parameterName Overrides System.Data.Common.DbParameterCollection.RemoveAt(System.String) | Improve this Doc View Source SetParameter(Int32, DbParameter) Declaration protected override void SetParameter(int index, DbParameter value) Parameters Type Name Description System.Int32 index System.Data.Common.DbParameter value Overrides System.Data.Common.DbParameterCollection.SetParameter(System.Int32, System.Data.Common.DbParameter) | Improve this Doc View Source SetParameter(String, DbParameter) Declaration protected override void SetParameter(string parameterName, DbParameter value) Parameters Type Name Description System.String parameterName System.Data.Common.DbParameter value Overrides System.Data.Common.DbParameterCollection.SetParameter(System.String, System.Data.Common.DbParameter) | Improve this Doc View Source ToArray() Convert collection to a System.Array. Declaration public NpgsqlParameter[] ToArray() Returns Type Description NpgsqlParameter [] NpgsqlParameter[] | Improve this Doc View Source TryGetValue(String, out NpgsqlParameter) Gets a value indicating whether a NpgsqlParameter with the specified parameter name exists in the collection. Declaration public bool TryGetValue(string parameterName, out NpgsqlParameter parameter) Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter object to find. NpgsqlParameter parameter A reference to the requested parameter is returned in this out param if it is found in the list. This value is null if the parameter is not found. Returns Type Description System.Boolean true if the collection contains the parameter and param will contain the parameter; otherwise, false . Explicit Interface Implementations | Improve this Doc View Source ICollection<NpgsqlParameter>.Add(NpgsqlParameter) Declaration void ICollection<NpgsqlParameter>.Add(NpgsqlParameter item) Parameters Type Name Description NpgsqlParameter item | Improve this Doc View Source ICollection<NpgsqlParameter>.IsReadOnly Declaration bool ICollection<NpgsqlParameter>.IsReadOnly { get; } Returns Type Description System.Boolean | Improve this Doc View Source IEnumerable<NpgsqlParameter>.GetEnumerator() Declaration IEnumerator<NpgsqlParameter> IEnumerable<NpgsqlParameter>.GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < NpgsqlParameter > Implements System.Data.IDataParameterCollection System.Collections.IList System.Collections.ICollection System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "doc/api/Npgsql.TypeHandling.NpgsqlSafeReadException.html": {
    "href": "doc/api/Npgsql.TypeHandling.NpgsqlSafeReadException.html",
    "title": "Class NpgsqlSafeReadException | Npgsql Documentation",
    "keywords": "Class NpgsqlSafeReadException Can be thrown by readers to indicate that interpreting the value failed, but the value was read wholly and it is safe to continue reading. Any other exception is assumed to leave the buffer in an unknown position, losing protocol sync and therefore setting the connector to state Broken. Note that an inner exception is mandatory, and will get thrown to the user instead of the NpgsqlSafeReadException. Inheritance System.Object System.Exception NpgsqlSafeReadException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql.TypeHandling Assembly : Npgsql.dll Syntax public class NpgsqlSafeReadException : Exception, ISerializable Constructors | Improve this Doc View Source NpgsqlSafeReadException(Exception) Creates an instance of NpgsqlSafeReadException . Declaration public NpgsqlSafeReadException(Exception originalException) Parameters Type Name Description System.Exception originalException Properties | Improve this Doc View Source OriginalException Gets the Exception instance that caused the current exception. Declaration public Exception OriginalException { get; } Property Value Type Description System.Exception Methods | Improve this Doc View Source GetBaseException() Declaration public override Exception GetBaseException() Returns Type Description System.Exception Overrides System.Exception.GetBaseException() Implements System.Runtime.Serialization.ISerializable"
  },
  "doc/api/NpgsqlTypes.NpgsqlLSeg.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlLSeg.html",
    "title": "Struct NpgsqlLSeg | Npgsql Documentation",
    "keywords": "Struct NpgsqlLSeg Represents a PostgreSQL Line Segment type. Implements System.IEquatable < NpgsqlLSeg > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlLSeg : IEquatable<NpgsqlLSeg> Constructors | Improve this Doc View Source NpgsqlLSeg(NpgsqlPoint, NpgsqlPoint) Declaration public NpgsqlLSeg(NpgsqlPoint start, NpgsqlPoint end) Parameters Type Name Description NpgsqlPoint start NpgsqlPoint end | Improve this Doc View Source NpgsqlLSeg(Double, Double, Double, Double) Declaration public NpgsqlLSeg(double startx, double starty, double endx, double endy) Parameters Type Name Description System.Double startx System.Double starty System.Double endx System.Double endy Properties | Improve this Doc View Source End Declaration public NpgsqlPoint End { get; set; } Property Value Type Description NpgsqlPoint | Improve this Doc View Source Start Declaration public NpgsqlPoint Start { get; set; } Property Value Type Description NpgsqlPoint Methods | Improve this Doc View Source Equals(NpgsqlLSeg) Declaration public bool Equals(NpgsqlLSeg other) Parameters Type Name Description NpgsqlLSeg other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Parse(String) Declaration public static NpgsqlLSeg Parse(string s) Parameters Type Name Description System.String s Returns Type Description NpgsqlLSeg | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlLSeg, NpgsqlLSeg) Declaration public static bool operator ==(NpgsqlLSeg x, NpgsqlLSeg y) Parameters Type Name Description NpgsqlLSeg x NpgsqlLSeg y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlLSeg, NpgsqlLSeg) Declaration public static bool operator !=(NpgsqlLSeg x, NpgsqlLSeg y) Parameters Type Name Description NpgsqlLSeg x NpgsqlLSeg y Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "doc/api/Npgsql.NodaTime.TimestampHandlerFactory.html": {
    "href": "doc/api/Npgsql.NodaTime.TimestampHandlerFactory.html",
    "title": "Class TimestampHandlerFactory | Npgsql Documentation",
    "keywords": "Class TimestampHandlerFactory Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < Instant > TimestampHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<Instant>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<Instant>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.NodaTime Assembly : Npgsql.NodaTime.dll Syntax public class TimestampHandlerFactory : NpgsqlTypeHandlerFactory<Instant> Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<Instant> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < Instant > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<Instant>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.NpgsqlDataReader.html": {
    "href": "doc/api/Npgsql.NpgsqlDataReader.html",
    "title": "Class NpgsqlDataReader | Npgsql Documentation",
    "keywords": "Class NpgsqlDataReader Reads a forward-only stream of rows from a data source. Inheritance System.Object System.MarshalByRefObject System.Data.Common.DbDataReader NpgsqlDataReader Implements System.Collections.IEnumerable System.Data.IDataReader System.Data.IDataRecord System.IDisposable System.IAsyncDisposable System.Data.Common.IDbColumnSchemaGenerator Inherited Members System.Data.Common.DbDataReader.GetDbDataReader(System.Int32) System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32) System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32) System.Data.Common.DbDataReader.NextResultAsync() System.Data.Common.DbDataReader.ReadAsync() System.Data.Common.DbDataReader.System.Data.IDataRecord.GetData(System.Int32) System.Data.Common.DbDataReader.VisibleFieldCount System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlDataReader : DbDataReader, IEnumerable, IDataReader, IDataRecord, IDisposable, IAsyncDisposable, IDbColumnSchemaGenerator Properties | Improve this Doc View Source Depth Gets a value indicating the depth of nesting for the current row. Always returns zero. Declaration public override int Depth { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.Depth | Improve this Doc View Source FieldCount Gets the number of columns in the current row. Declaration public override int FieldCount { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.FieldCount | Improve this Doc View Source HasRows Gets a value that indicates whether this DbDataReader contains one or more rows. Declaration public override bool HasRows { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbDataReader.HasRows | Improve this Doc View Source IsClosed Gets a value indicating whether the data reader is closed. Declaration public override bool IsClosed { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbDataReader.IsClosed | Improve this Doc View Source IsOnRow Indicates whether the reader is currently positioned on a row, i.e. whether reading a column is possible. This property is different from HasRows in that HasRows will return true even if attempting to read a column will fail, e.g. before Read() has been called Declaration public bool IsOnRow { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Gets the value of the specified column as an instance of System.Object . Declaration public override object this[int ordinal] { get; } Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Property Value Type Description System.Object The value of the specified column. Overrides System.Data.Common.DbDataReader.Item[System.Int32] | Improve this Doc View Source Item[String] Gets the value of the specified column as an instance of System.Object . Declaration public override object this[string name] { get; } Parameters Type Name Description System.String name The name of the column. Property Value Type Description System.Object The value of the specified column. Overrides System.Data.Common.DbDataReader.Item[System.String] | Improve this Doc View Source RecordsAffected Gets the number of rows changed, inserted, or deleted by execution of the SQL statement. Declaration public override int RecordsAffected { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.RecordsAffected | Improve this Doc View Source Statements Returns details about each statement that this reader will or has executed. Declaration public IReadOnlyList<NpgsqlStatement> Statements { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < NpgsqlStatement > Remarks Note that some fields (i.e. rows and oid) are only populated as the reader traverses the result. For commands with multiple queries, this exposes the number of rows affected on a statement-by-statement basis, unlike RecordsAffected which exposes an aggregation across all statements. Methods | Improve this Doc View Source Close() Closes the NpgsqlDataReader reader, allowing a new command to be executed. Declaration public override void Close() Overrides System.Data.Common.DbDataReader.Close() | Improve this Doc View Source CloseAsync() Closes the NpgsqlDataReader reader, allowing a new command to be executed. Declaration public override Task CloseAsync() Returns Type Description System.Threading.Tasks.Task Overrides System.Data.Common.DbDataReader.CloseAsync() | Improve this Doc View Source Dispose(Boolean) Releases the resources used by the NpgsqlDataReader . Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides System.Data.Common.DbDataReader.Dispose(System.Boolean) | Improve this Doc View Source DisposeAsync() Releases the resources used by the NpgsqlDataReader . Declaration public override ValueTask DisposeAsync() Returns Type Description System.Threading.Tasks.ValueTask Overrides System.Data.Common.DbDataReader.DisposeAsync() | Improve this Doc View Source GetBoolean(Int32) Gets the value of the specified column as a Boolean. Declaration public override bool GetBoolean(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Boolean The value of the specified column. Overrides System.Data.Common.DbDataReader.GetBoolean(System.Int32) | Improve this Doc View Source GetByte(Int32) Gets the value of the specified column as a byte. Declaration public override byte GetByte(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Byte The value of the specified column. Overrides System.Data.Common.DbDataReader.GetByte(System.Int32) | Improve this Doc View Source GetBytes(Int32, Int64, Byte[], Int32, Int32) Reads a stream of bytes from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset. Declaration public override long GetBytes(int ordinal, long dataOffset, byte[] buffer, int bufferOffset, int length) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. System.Int64 dataOffset The index within the row from which to begin the read operation. System.Byte [] buffer The buffer into which to copy the data. System.Int32 bufferOffset The index with the buffer to which the data will be copied. System.Int32 length The maximum number of characters to read. Returns Type Description System.Int64 The actual number of bytes read. Overrides System.Data.Common.DbDataReader.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32) | Improve this Doc View Source GetChar(Int32) Gets the value of the specified column as a single character. Declaration public override char GetChar(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Char The value of the specified column. Overrides System.Data.Common.DbDataReader.GetChar(System.Int32) | Improve this Doc View Source GetChars(Int32, Int64, Char[], Int32, Int32) Reads a stream of characters from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset. Declaration public override long GetChars(int ordinal, long dataOffset, char[] buffer, int bufferOffset, int length) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. System.Int64 dataOffset The index within the row from which to begin the read operation. System.Char [] buffer The buffer into which to copy the data. System.Int32 bufferOffset The index with the buffer to which the data will be copied. System.Int32 length The maximum number of characters to read. Returns Type Description System.Int64 The actual number of characters read. Overrides System.Data.Common.DbDataReader.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32) | Improve this Doc View Source GetColumnSchema() Returns schema information for the columns in the current resultset. Declaration public ReadOnlyCollection<NpgsqlDbColumn> GetColumnSchema() Returns Type Description System.Collections.ObjectModel.ReadOnlyCollection < NpgsqlDbColumn > | Improve this Doc View Source GetDataTypeName(Int32) Gets the data type information for the specified field. This will be the PostgreSQL type name (e.g. double precision), not the .NET type (see GetFieldType(Int32) for that). Declaration public override string GetDataTypeName(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column index. Returns Type Description System.String Overrides System.Data.Common.DbDataReader.GetDataTypeName(System.Int32) | Improve this Doc View Source GetDataTypeOID(Int32) Gets the OID for the PostgreSQL type for the specified field, as it appears in the pg_type table. Declaration public uint GetDataTypeOID(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column index. Returns Type Description System.UInt32 Remarks This is a PostgreSQL-internal value that should not be relied upon and should only be used for debugging purposes. | Improve this Doc View Source GetDate(Int32) Gets the value of the specified column as an NpgsqlDate , Npgsql's provider-specific type for dates. Declaration public NpgsqlDate GetDate(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description NpgsqlDate The value of the specified column. Remarks PostgreSQL's date type represents dates from 4713 BC to 5874897 AD, while .NET's DateTime only supports years from 1 to 1999. If you require years outside this range use this accessor. The standard System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32) method will also return this type, but has the disadvantage of boxing the value. See http://www.postgresql.org/docs/current/static/datatype-datetime.html | Improve this Doc View Source GetDateTime(Int32) Gets the value of the specified column as a System.DateTime object. Declaration public override DateTime GetDateTime(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.DateTime The value of the specified column. Overrides System.Data.Common.DbDataReader.GetDateTime(System.Int32) | Improve this Doc View Source GetDecimal(Int32) Gets the value of the specified column as a System.Decimal object. Declaration public override decimal GetDecimal(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Decimal The value of the specified column. Overrides System.Data.Common.DbDataReader.GetDecimal(System.Int32) | Improve this Doc View Source GetDouble(Int32) Gets the value of the specified column as a double-precision floating point number. Declaration public override double GetDouble(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Double The value of the specified column. Overrides System.Data.Common.DbDataReader.GetDouble(System.Int32) | Improve this Doc View Source GetEnumerator() Returns an System.Collections.IEnumerator that can be used to iterate through the rows in the data reader. Declaration public override IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator that can be used to iterate through the rows in the data reader. Overrides System.Data.Common.DbDataReader.GetEnumerator() | Improve this Doc View Source GetFieldType(Int32) Gets the data type of the specified column. Declaration public override Type GetFieldType(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Type The data type of the specified column. Overrides System.Data.Common.DbDataReader.GetFieldType(System.Int32) | Improve this Doc View Source GetFieldValue<T>(Int32) Synchronously gets the value of the specified column as a type. Declaration public override T GetFieldValue<T>(int ordinal) Parameters Type Name Description System.Int32 ordinal The column to be retrieved. Returns Type Description T The column to be retrieved. Type Parameters Name Description T Synchronously gets the value of the specified column as a type. Overrides System.Data.Common.DbDataReader.GetFieldValue<T>(System.Int32) | Improve this Doc View Source GetFieldValueAsync<T>(Int32, CancellationToken) Asynchronously gets the value of the specified column as a type. Declaration public override Task<T> GetFieldValueAsync<T>(int ordinal, CancellationToken cancellationToken) Parameters Type Name Description System.Int32 ordinal The type of the value to be returned. System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description System.Threading.Tasks.Task <T> Type Parameters Name Description T The type of the value to be returned. Overrides System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32, System.Threading.CancellationToken) | Improve this Doc View Source GetFloat(Int32) Gets the value of the specified column as a single-precision floating point number. Declaration public override float GetFloat(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Single The value of the specified column. Overrides System.Data.Common.DbDataReader.GetFloat(System.Int32) | Improve this Doc View Source GetGuid(Int32) Gets the value of the specified column as a globally-unique identifier (GUID). Declaration public override Guid GetGuid(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Guid The value of the specified column. Overrides System.Data.Common.DbDataReader.GetGuid(System.Int32) | Improve this Doc View Source GetInt16(Int32) Gets the value of the specified column as a 16-bit signed integer. Declaration public override short GetInt16(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Int16 The value of the specified column. Overrides System.Data.Common.DbDataReader.GetInt16(System.Int32) | Improve this Doc View Source GetInt32(Int32) Gets the value of the specified column as a 32-bit signed integer. Declaration public override int GetInt32(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Int32 The value of the specified column. Overrides System.Data.Common.DbDataReader.GetInt32(System.Int32) | Improve this Doc View Source GetInt64(Int32) Gets the value of the specified column as a 64-bit signed integer. Declaration public override long GetInt64(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Int64 The value of the specified column. Overrides System.Data.Common.DbDataReader.GetInt64(System.Int32) | Improve this Doc View Source GetInterval(Int32) Gets the value of the specified column as an NpgsqlTimeSpan , Npgsql's provider-specific type for time spans. Declaration public NpgsqlTimeSpan GetInterval(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description NpgsqlTimeSpan The value of the specified column. Remarks PostgreSQL's interval type has has a resolution of 1 microsecond and ranges from -178000000 to 178000000 years, while .NET's TimeSpan has a resolution of 100 nanoseconds and ranges from roughly -29247 to 29247 years. If you require values from outside TimeSpan's range use this accessor. The standard ADO.NET System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32) method will also return this type, but has the disadvantage of boxing the value. See http://www.postgresql.org/docs/current/static/datatype-datetime.html | Improve this Doc View Source GetName(Int32) Gets the name of the column, given the zero-based column ordinal. Declaration public override string GetName(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.String The name of the specified column. Overrides System.Data.Common.DbDataReader.GetName(System.Int32) | Improve this Doc View Source GetOrdinal(String) Gets the column ordinal given the name of the column. Declaration public override int GetOrdinal(string name) Parameters Type Name Description System.String name The name of the column. Returns Type Description System.Int32 The zero-based column ordinal. Overrides System.Data.Common.DbDataReader.GetOrdinal(System.String) | Improve this Doc View Source GetPostgresType(Int32) Gets a representation of the PostgreSQL data type for the specified field. The returned representation can be used to access various information about the field. Declaration public PostgresType GetPostgresType(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column index. Returns Type Description PostgresType | Improve this Doc View Source GetProviderSpecificFieldType(Int32) Returns the provider-specific field type of the specified column. Declaration public override Type GetProviderSpecificFieldType(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Type The Type object that describes the data type of the specified column. Overrides System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32) | Improve this Doc View Source GetProviderSpecificValue(Int32) Gets the value of the specified column as an instance of System.Object . Declaration public override object GetProviderSpecificValue(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Object The value of the specified column. Overrides System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32) | Improve this Doc View Source GetProviderSpecificValues(Object[]) Gets all provider-specific attribute columns in the collection for the current row. Declaration public override int GetProviderSpecificValues(object[] values) Parameters Type Name Description System.Object [] values An array of Object into which to copy the attribute columns. Returns Type Description System.Int32 The number of instances of System.Object in the array. Overrides System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[]) | Improve this Doc View Source GetSchemaTable() Returns a System.Data.DataTable that describes the column metadata of the DataReader. Declaration public override DataTable GetSchemaTable() Returns Type Description System.Data.DataTable Overrides System.Data.Common.DbDataReader.GetSchemaTable() | Improve this Doc View Source GetStream(Int32) Retrieves data as a System.IO.Stream . Declaration public override Stream GetStream(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.IO.Stream The returned object. Overrides System.Data.Common.DbDataReader.GetStream(System.Int32) | Improve this Doc View Source GetStreamAsync(Int32) Retrieves data as a System.IO.Stream . Declaration public Task<Stream> GetStreamAsync(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Threading.Tasks.Task < System.IO.Stream > The returned object. | Improve this Doc View Source GetStreamAsync(Int32, CancellationToken) Retrieves data as a System.IO.Stream . Declaration public Task<Stream> GetStreamAsync(int ordinal, CancellationToken cancellationToken) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task < System.IO.Stream > The returned object. | Improve this Doc View Source GetString(Int32) Gets the value of the specified column as an instance of System.String . Declaration public override string GetString(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.String The value of the specified column. Overrides System.Data.Common.DbDataReader.GetString(System.Int32) | Improve this Doc View Source GetTextReader(Int32) Retrieves data as a System.IO.TextReader . Declaration public override TextReader GetTextReader(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.IO.TextReader The returned object. Overrides System.Data.Common.DbDataReader.GetTextReader(System.Int32) | Improve this Doc View Source GetTextReaderAsync(Int32) Retrieves data as a System.IO.TextReader . Declaration public Task<TextReader> GetTextReaderAsync(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Threading.Tasks.Task < System.IO.TextReader > The returned object. | Improve this Doc View Source GetTextReaderAsync(Int32, CancellationToken) Retrieves data as a System.IO.TextReader . Declaration public Task<TextReader> GetTextReaderAsync(int ordinal, CancellationToken cancellationToken) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task < System.IO.TextReader > The returned object. | Improve this Doc View Source GetTimeSpan(Int32) Gets the value of the specified column as a TimeSpan, Declaration public TimeSpan GetTimeSpan(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.TimeSpan The value of the specified column. Remarks PostgreSQL's interval type has has a resolution of 1 microsecond and ranges from -178000000 to 178000000 years, while .NET's TimeSpan has a resolution of 100 nanoseconds and ranges from roughly -29247 to 29247 years. See http://www.postgresql.org/docs/current/static/datatype-datetime.html | Improve this Doc View Source GetTimeStamp(Int32) Gets the value of the specified column as an NpgsqlDateTime , Npgsql's provider-specific type for date/time timestamps. Note that this type covers both PostgreSQL's \"timestamp with time zone\" and \"timestamp without time zone\" types, which differ only in how they are converted upon input/output. Declaration public NpgsqlDateTime GetTimeStamp(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description NpgsqlDateTime The value of the specified column. Remarks PostgreSQL's timestamp type represents dates from 4713 BC to 5874897 AD, while .NET's DateTime only supports years from 1 to 1999. If you require years outside this range use this accessor. The standard System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32) method will also return this type, but has the disadvantage of boxing the value. See http://www.postgresql.org/docs/current/static/datatype-datetime.html | Improve this Doc View Source GetValue(Int32) Gets the value of the specified column as an instance of System.Object . Declaration public override object GetValue(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Object The value of the specified column. Overrides System.Data.Common.DbDataReader.GetValue(System.Int32) | Improve this Doc View Source GetValues(Object[]) Populates an array of objects with the column values of the current row. Declaration public override int GetValues(object[] values) Parameters Type Name Description System.Object [] values An array of Object into which to copy the attribute columns. Returns Type Description System.Int32 The number of instances of System.Object in the array. Overrides System.Data.Common.DbDataReader.GetValues(System.Object[]) | Improve this Doc View Source IsDBNull(Int32) Gets a value that indicates whether the column contains nonexistent or missing values. Declaration public override bool IsDBNull(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Boolean true if the specified column is equivalent to System.DBNull ; otherwise false . Overrides System.Data.Common.DbDataReader.IsDBNull(System.Int32) | Improve this Doc View Source IsDBNullAsync(Int32, CancellationToken) An asynchronous version of IsDBNull(Int32) , which gets a value that indicates whether the column contains non-existent or missing values. The cancellationToken parameter is currently ignored. Declaration public override Task<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken) Parameters Type Name Description System.Int32 ordinal The zero-based column to be retrieved. System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description System.Threading.Tasks.Task < System.Boolean > true if the specified column value is equivalent to System.DBNull otherwise false . Overrides System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32, System.Threading.CancellationToken) | Improve this Doc View Source NextResult() Advances the reader to the next result when reading the results of a batch of statements. Declaration public override bool NextResult() Returns Type Description System.Boolean Overrides System.Data.Common.DbDataReader.NextResult() | Improve this Doc View Source NextResultAsync(CancellationToken) This is the asynchronous version of NextResult. The cancellationToken parameter is currently ignored. Declaration public override Task<bool> NextResultAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A task representing the asynchronous operation. Overrides System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken) | Improve this Doc View Source Read() Advances the reader to the next record in a result set. Declaration public override bool Read() Returns Type Description System.Boolean true if there are more rows; otherwise false . Overrides System.Data.Common.DbDataReader.Read() Remarks The default position of a data reader is before the first record. Therefore, you must call Read to begin accessing data. | Improve this Doc View Source ReadAsync(CancellationToken) This is the asynchronous version of Read() The cancellation token is currently ignored. Declaration public override Task<bool> ReadAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A task representing the asynchronous operation. Overrides System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken) Events | Improve this Doc View Source ReaderClosed Is raised whenever Close() is called. Declaration public event EventHandler ReaderClosed Event Type Type Description System.EventHandler Explicit Interface Implementations | Improve this Doc View Source IDbColumnSchemaGenerator.GetColumnSchema() Declaration ReadOnlyCollection<DbColumn> IDbColumnSchemaGenerator.GetColumnSchema() Returns Type Description System.Collections.ObjectModel.ReadOnlyCollection < System.Data.Common.DbColumn > Implements System.Collections.IEnumerable System.Data.IDataReader System.Data.IDataRecord System.IDisposable System.IAsyncDisposable System.Data.Common.IDbColumnSchemaGenerator"
  },
  "doc/api/Npgsql.Json.NET.JsonbHandlerFactory.html": {
    "href": "doc/api/Npgsql.Json.NET.JsonbHandlerFactory.html",
    "title": "Class JsonbHandlerFactory | Npgsql Documentation",
    "keywords": "Class JsonbHandlerFactory Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < System.String > JsonbHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<String>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<String>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.Json.NET Assembly : Npgsql.Json.NET.dll Syntax public class JsonbHandlerFactory : NpgsqlTypeHandlerFactory<string> Constructors | Improve this Doc View Source JsonbHandlerFactory(Nullable<JsonSerializerSettings>) Declaration public JsonbHandlerFactory(JsonSerializerSettings? settings = default(JsonSerializerSettings? )) Parameters Type Name Description System.Nullable < JsonSerializerSettings > settings Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<string> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < System.String > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<System.String>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.TypeHandlers.UuidHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.UuidHandler.html",
    "title": "Class UuidHandler | Npgsql Documentation",
    "keywords": "Class UuidHandler A type handler for the PostgreSQL uuid data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.Guid > NpgsqlSimpleTypeHandler < System.Guid > UuidHandler Implements INpgsqlTypeHandler < System.Guid > INpgsqlSimpleTypeHandler < System.Guid > Inherited Members NpgsqlSimpleTypeHandler<Guid>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Guid>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Guid>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Guid>.Write(Guid, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<Guid>.ValidateAndGetLength(Guid, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Guid>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Guid>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Guid>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Guid>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<Guid>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public class UuidHandler : NpgsqlSimpleTypeHandler<Guid>, INpgsqlTypeHandler<Guid>, INpgsqlSimpleTypeHandler<Guid> Remarks See http://www.postgresql.org/docs/current/static/datatype-uuid.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source UuidHandler(PostgresType) Declaration public UuidHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override Guid Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Guid Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Guid>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Guid, NpgsqlParameter) Declaration public override int ValidateAndGetLength(Guid value, NpgsqlParameter parameter) Parameters Type Name Description System.Guid value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Guid>.ValidateAndGetLength(System.Guid, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Guid, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(Guid value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Guid value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Guid>.Write(System.Guid, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/NpgsqlTypes.PgNameAttribute.html": {
    "href": "doc/api/NpgsqlTypes.PgNameAttribute.html",
    "title": "Class PgNameAttribute | Npgsql Documentation",
    "keywords": "Class PgNameAttribute Indicates that this property or field correspond to a PostgreSQL field with the specified name Inheritance System.Object System.Attribute PgNameAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)] public class PgNameAttribute : Attribute Constructors | Improve this Doc View Source PgNameAttribute(String) Indicates that this property or field correspond to a PostgreSQL field with the specified name Declaration public PgNameAttribute(string pgName) Parameters Type Name Description System.String pgName The name of PostgreSQL field that corresponds to this CLR property or field Properties | Improve this Doc View Source PgName The name of PostgreSQL field that corresponds to this CLR property or field Declaration public string PgName { get; } Property Value Type Description System.String"
  },
  "doc/api/Npgsql.PostgresTypes.html": {
    "href": "doc/api/Npgsql.PostgresTypes.html",
    "title": "Namespace Npgsql.PostgresTypes | Npgsql Documentation",
    "keywords": "Namespace Npgsql.PostgresTypes Classes PostgresArrayType Represents a PostgreSQL array data type, which can hold several multiple values in a single column. PostgresBaseType Represents a PostgreSQL base data type, which is a simple scalar value. PostgresCompositeType Represents a PostgreSQL composite data type, which can hold multiple fields of varying types in a single column. PostgresCompositeType.Field Represents a field in a PostgreSQL composite data type. PostgresDomainType Represents a PostgreSQL domain type. PostgresEnumType Represents a PostgreSQL enum data type. PostgresRangeType Represents a PostgreSQL range data type. PostgresType Represents a PostgreSQL data type, such as int4 or text, as discovered from pg_type. This class is abstract, see derived classes for concrete types of PostgreSQL types. UnknownBackendType Represents a PostgreSQL data type that isn't known to Npgsql and cannot be handled."
  },
  "doc/api/Npgsql.TypeHandlers.TextHandlerFactory.html": {
    "href": "doc/api/Npgsql.TypeHandlers.TextHandlerFactory.html",
    "title": "Class TextHandlerFactory | Npgsql Documentation",
    "keywords": "Class TextHandlerFactory A factory for type handlers for PostgreSQL character data types (text, char, varchar, xml...). Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < System.String > TextHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<String>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<String>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public class TextHandlerFactory : NpgsqlTypeHandlerFactory<string> Remarks See https://www.postgresql.org/docs/current/datatype-character.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<string> Create(PostgresType pgType, NpgsqlConnection conn) Parameters Type Name Description PostgresType pgType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < System.String > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<System.String>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.TypeHandlers.HstoreHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.HstoreHandler.html",
    "title": "Class HstoreHandler | Npgsql Documentation",
    "keywords": "Class HstoreHandler A type handler for the PostgreSQL hstore extension data type, which stores sets of key/value pairs within a single PostgreSQL value. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.Collections.Generic.Dictionary < System.String , System.String >> HstoreHandler Implements INpgsqlTypeHandler < System.Collections.Generic.Dictionary < System.String , System.String >> INpgsqlTypeHandler < System.Collections.Generic.IDictionary < System.String , System.String >> Inherited Members NpgsqlTypeHandler<Dictionary<String, String>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Dictionary<String, String>>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Dictionary<String, String>>.ValidateAndGetLength(Dictionary<String, String>, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Dictionary<String, String>>.Write(Dictionary<String, String>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Dictionary<String, String>>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Dictionary<String, String>>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Dictionary<String, String>>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Dictionary<String, String>>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Dictionary<String, String>>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<Dictionary<String, String>>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public class HstoreHandler : NpgsqlTypeHandler<Dictionary<string, string>>, INpgsqlTypeHandler<Dictionary<string, string>>, INpgsqlTypeHandler<IDictionary<string, string>> Remarks See https://www.postgresql.org/docs/current/hstore.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override ValueTask<Dictionary<string, string>> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < System.Collections.Generic.Dictionary < System.String , System.String >> Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.Collections.Generic.Dictionary<System.String, System.String>>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Dictionary<String, String>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(Dictionary<string, string> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.String > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.Collections.Generic.Dictionary<System.String, System.String>>.ValidateAndGetLength(System.Collections.Generic.Dictionary<System.String, System.String>, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(IDictionary<String, String>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(IDictionary<string, string> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source Write(Dictionary<String, String>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public override Task Write(Dictionary<string, string> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Collections.Generic.Dictionary < System.String , System.String > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.Collections.Generic.Dictionary<System.String, System.String>>.Write(System.Collections.Generic.Dictionary<System.String, System.String>, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean) | Improve this Doc View Source Write(IDictionary<String, String>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public Task Write(IDictionary<string, string> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Collections.Generic.IDictionary < System.String , System.String > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Explicit Interface Implementations | Improve this Doc View Source INpgsqlTypeHandler<IDictionary<String, String>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<IDictionary<string, string>> INpgsqlTypeHandler<IDictionary<string, string>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < System.Collections.Generic.IDictionary < System.String , System.String >> Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.NodaTime.TimeTzHandlerFactory.html": {
    "href": "doc/api/Npgsql.NodaTime.TimeTzHandlerFactory.html",
    "title": "Class TimeTzHandlerFactory | Npgsql Documentation",
    "keywords": "Class TimeTzHandlerFactory Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < OffsetTime > TimeTzHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<OffsetTime>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<OffsetTime>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.NodaTime Assembly : Npgsql.NodaTime.dll Syntax public class TimeTzHandlerFactory : NpgsqlTypeHandlerFactory<OffsetTime> Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<OffsetTime> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < OffsetTime > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<OffsetTime>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.TimestampTzHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.TimestampTzHandler.html",
    "title": "Class TimestampTzHandler | Npgsql Documentation",
    "keywords": "Class TimestampTzHandler A type handler for the PostgreSQL timestamptz data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.DateTime > NpgsqlSimpleTypeHandler < System.DateTime > NpgsqlSimpleTypeHandlerWithPsv < System.DateTime , NpgsqlDateTime > TimestampHandler TimestampTzHandler Implements INpgsqlTypeHandler < System.DateTime > INpgsqlSimpleTypeHandler < System.DateTime > INpgsqlSimpleTypeHandler < NpgsqlDateTime > INpgsqlSimpleTypeHandler < System.DateTimeOffset > Inherited Members TimestampHandler.ConvertInfinityDateTime TimestampHandler.ReadTimeStamp(NpgsqlReadBuffer, Int32, FieldDescription) TimestampHandler.ValidateAndGetLength(DateTime, NpgsqlParameter) TimestampHandler.ValidateAndGetLength(NpgsqlDateTime, NpgsqlParameter) NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDateTime>.ReadPsv(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDateTime>.INpgsqlSimpleTypeHandler<NpgsqlDateTime>.Read(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDateTime>.ValidateAndGetLength(NpgsqlDateTime, NpgsqlParameter) NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDateTime>.Write(NpgsqlDateTime, NpgsqlWriteBuffer, NpgsqlParameter) NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDateTime>.CreateArrayHandler(PostgresArrayType) NpgsqlSimpleTypeHandler<DateTime>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<DateTime>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<DateTime>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<DateTime>.Write(DateTime, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<DateTime>.ValidateAndGetLength(DateTime, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<DateTime>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<DateTime>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<DateTime>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<DateTime>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<DateTime>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class TimestampTzHandler : TimestampHandler, INpgsqlTypeHandler<DateTime>, INpgsqlSimpleTypeHandler<DateTime>, INpgsqlSimpleTypeHandler<NpgsqlDateTime>, INpgsqlSimpleTypeHandler<DateTimeOffset> Remarks See http://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override DateTime Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.DateTime Overrides TimestampHandler.Read(NpgsqlReadBuffer, Int32, FieldDescription) | Improve this Doc View Source ReadPsv(NpgsqlReadBuffer, Int32, FieldDescription) Declaration protected override NpgsqlDateTime ReadPsv(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description NpgsqlDateTime Overrides TimestampHandler.ReadPsv(NpgsqlReadBuffer, Int32, FieldDescription) | Improve this Doc View Source ValidateAndGetLength(DateTimeOffset, NpgsqlParameter) Declaration public int ValidateAndGetLength(DateTimeOffset value, NpgsqlParameter parameter) Parameters Type Name Description System.DateTimeOffset value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source Write(NpgsqlDateTime, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(NpgsqlDateTime value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlDateTime value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides TimestampHandler.Write(NpgsqlDateTime, NpgsqlWriteBuffer, NpgsqlParameter) | Improve this Doc View Source Write(DateTime, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(DateTime value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.DateTime value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides TimestampHandler.Write(DateTime, NpgsqlWriteBuffer, NpgsqlParameter) | Improve this Doc View Source Write(DateTimeOffset, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(DateTimeOffset value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.DateTimeOffset value NpgsqlWriteBuffer buf NpgsqlParameter parameter Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<DateTimeOffset>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration DateTimeOffset INpgsqlSimpleTypeHandler<DateTimeOffset>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.DateTimeOffset Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.TypeHandlers.GeometricHandlers.BoxHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.GeometricHandlers.BoxHandler.html",
    "title": "Class BoxHandler | Npgsql Documentation",
    "keywords": "Class BoxHandler A type handler for the PostgreSQL box data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlBox > NpgsqlSimpleTypeHandler < NpgsqlBox > BoxHandler Implements INpgsqlTypeHandler < NpgsqlBox > INpgsqlSimpleTypeHandler < NpgsqlBox > Inherited Members NpgsqlSimpleTypeHandler<NpgsqlBox>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<NpgsqlBox>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<NpgsqlBox>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<NpgsqlBox>.Write(NpgsqlBox, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<NpgsqlBox>.ValidateAndGetLength(NpgsqlBox, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<NpgsqlBox>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<NpgsqlBox>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlBox>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlBox>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<NpgsqlBox>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.GeometricHandlers Assembly : Npgsql.dll Syntax public class BoxHandler : NpgsqlSimpleTypeHandler<NpgsqlBox>, INpgsqlTypeHandler<NpgsqlBox>, INpgsqlSimpleTypeHandler<NpgsqlBox> Remarks See http://www.postgresql.org/docs/current/static/datatype-geometric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source BoxHandler(PostgresType) Declaration public BoxHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override NpgsqlBox Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description NpgsqlBox Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlBox>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlBox, NpgsqlParameter) Declaration public override int ValidateAndGetLength(NpgsqlBox value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlBox value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlBox>.ValidateAndGetLength(NpgsqlTypes.NpgsqlBox, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlBox, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(NpgsqlBox value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlBox value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlBox>.Write(NpgsqlTypes.NpgsqlBox, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.TypeHandlers.BitStringHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.BitStringHandler.html",
    "title": "Class BitStringHandler | Npgsql Documentation",
    "keywords": "Class BitStringHandler A type handler for the PostgreSQL bit string data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.Collections.BitArray > BitStringHandler Implements INpgsqlTypeHandler < System.Collections.BitArray > INpgsqlTypeHandler < System.Collections.Specialized.BitVector32 > INpgsqlTypeHandler < System.Boolean > INpgsqlTypeHandler < System.String > Inherited Members NpgsqlTypeHandler<BitArray>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<BitArray>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<BitArray>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<BitArray>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<BitArray>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<BitArray>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public class BitStringHandler : NpgsqlTypeHandler<BitArray>, INpgsqlTypeHandler<BitArray>, INpgsqlTypeHandler<BitVector32>, INpgsqlTypeHandler<bool>, INpgsqlTypeHandler<string> Remarks See http://www.postgresql.org/docs/current/static/datatype-bit.html . Note that for BIT(1), this handler will return a bool by default, to align with SQLClient (see discussion https://github.com/npgsql/npgsql/pull/362#issuecomment-59622101 ). The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source BitStringHandler(PostgresType) Declaration public BitStringHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source CreateArrayHandler(PostgresArrayType) Declaration public override ArrayHandler CreateArrayHandler(PostgresArrayType backendType) Parameters Type Name Description PostgresArrayType backendType Returns Type Description ArrayHandler Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.Collections.BitArray>.CreateArrayHandler(Npgsql.PostgresTypes.PostgresArrayType) | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override ValueTask<BitArray> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < System.Collections.BitArray > Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.Collections.BitArray>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Boolean, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(bool value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Boolean value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(BitArray, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(BitArray value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Collections.BitArray value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.Collections.BitArray>.ValidateAndGetLength(System.Collections.BitArray, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(BitVector32, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(BitVector32 value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Collections.Specialized.BitVector32 value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(String, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(string value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.String value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source Write(Boolean, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public Task Write(bool value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Boolean value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write(BitArray, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public override Task Write(BitArray value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Collections.BitArray value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.Collections.BitArray>.Write(System.Collections.BitArray, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean) | Improve this Doc View Source Write(BitVector32, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public Task Write(BitVector32 value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Collections.Specialized.BitVector32 value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write(String, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public Task Write(string value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.String value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Explicit Interface Implementations | Improve this Doc View Source INpgsqlTypeHandler<Boolean>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<bool> INpgsqlTypeHandler<bool>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < System.Boolean > | Improve this Doc View Source INpgsqlTypeHandler<BitVector32>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<BitVector32> INpgsqlTypeHandler<BitVector32>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < System.Collections.Specialized.BitVector32 > | Improve this Doc View Source INpgsqlTypeHandler<String>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<string> INpgsqlTypeHandler<string>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < System.String > Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresRangeType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresRangeType.html",
    "title": "Class PostgresRangeType | Npgsql Documentation",
    "keywords": "Class PostgresRangeType Represents a PostgreSQL range data type. Inheritance System.Object PostgresType PostgresRangeType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class PostgresRangeType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/rangetypes.html . Constructors | Improve this Doc View Source PostgresRangeType(String, String, UInt32, PostgresType) Constructs a representation of a PostgreSQL range data type. Declaration protected PostgresRangeType(string ns, string name, uint oid, PostgresType subtypePostgresType) Parameters Type Name Description System.String ns System.String name System.UInt32 oid PostgresType subtypePostgresType Properties | Improve this Doc View Source Subtype The PostgreSQL data type of the subtype of this range. Declaration public PostgresType Subtype { get; } Property Value Type Description PostgresType"
  },
  "doc/api/Npgsql.TypeHandlers.GeometricHandlers.PolygonHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.GeometricHandlers.PolygonHandler.html",
    "title": "Class PolygonHandler | Npgsql Documentation",
    "keywords": "Class PolygonHandler A type handler for the PostgreSQL polygon data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlPolygon > PolygonHandler Implements INpgsqlTypeHandler < NpgsqlPolygon > Inherited Members NpgsqlTypeHandler<NpgsqlPolygon>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlPolygon>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlPolygon>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlPolygon>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlPolygon>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlPolygon>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<NpgsqlPolygon>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.GeometricHandlers Assembly : Npgsql.dll Syntax public class PolygonHandler : NpgsqlTypeHandler<NpgsqlPolygon>, INpgsqlTypeHandler<NpgsqlPolygon> Remarks See http://www.postgresql.org/docs/current/static/datatype-geometric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source PolygonHandler(PostgresType) Declaration public PolygonHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override ValueTask<NpgsqlPolygon> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < NpgsqlPolygon > Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlPolygon>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlPolygon, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(NpgsqlPolygon value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlPolygon value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlPolygon>.ValidateAndGetLength(NpgsqlTypes.NpgsqlPolygon, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlPolygon, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public override Task Write(NpgsqlPolygon value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description NpgsqlPolygon value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlPolygon>.Write(NpgsqlTypes.NpgsqlPolygon, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean) Implements INpgsqlTypeHandler<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryLexeme.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryLexeme.html",
    "title": "Class NpgsqlTsQueryLexeme | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryLexeme TsQuery Lexeme node. Inheritance System.Object NpgsqlTsQuery NpgsqlTsQueryLexeme Inherited Members NpgsqlTsQuery.Kind NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public sealed class NpgsqlTsQueryLexeme : NpgsqlTsQuery Constructors | Improve this Doc View Source NpgsqlTsQueryLexeme(String) Creates a tsquery lexeme with only lexeme text. Declaration public NpgsqlTsQueryLexeme(string text) Parameters Type Name Description System.String text Lexeme text. | Improve this Doc View Source NpgsqlTsQueryLexeme(String, NpgsqlTsQueryLexeme.Weight) Creates a tsquery lexeme with lexeme text and weights. Declaration public NpgsqlTsQueryLexeme(string text, NpgsqlTsQueryLexeme.Weight weights) Parameters Type Name Description System.String text Lexeme text. NpgsqlTsQueryLexeme.Weight weights Bitmask of enum Weight. | Improve this Doc View Source NpgsqlTsQueryLexeme(String, NpgsqlTsQueryLexeme.Weight, Boolean) Creates a tsquery lexeme with lexeme text, weights and prefix search flag. Declaration public NpgsqlTsQueryLexeme(string text, NpgsqlTsQueryLexeme.Weight weights, bool isPrefixSearch) Parameters Type Name Description System.String text Lexeme text. NpgsqlTsQueryLexeme.Weight weights Bitmask of enum Weight. System.Boolean isPrefixSearch Is prefix search? Properties | Improve this Doc View Source IsPrefixSearch Prefix search. Declaration public bool IsPrefixSearch { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Text Lexeme text. Declaration public string Text { get; set; } Property Value Type Description System.String | Improve this Doc View Source Weights Weights is a bitmask of the Weight enum. Declaration public NpgsqlTsQueryLexeme.Weight Weights { get; set; } Property Value Type Description NpgsqlTsQueryLexeme.Weight"
  },
  "doc/api/Npgsql.TypeMapping.html": {
    "href": "doc/api/Npgsql.TypeMapping.html",
    "title": "Namespace Npgsql.TypeMapping | Npgsql Documentation",
    "keywords": "Namespace Npgsql.TypeMapping Classes NpgsqlTypeMapping Represents a type mapping for a PostgreSQL data type, which can be added to a type mapper, managing when that data type will be read and written and how. NpgsqlTypeMappingBuilder Builds instances of NpgsqlTypeMapping for addition into INpgsqlTypeMapper . Interfaces INpgsqlTypeMapper A type mapper, managing how to read and write CLR values to PostgreSQL data types. A type mapper exists for each connection, as well as a single global type mapper (accessible via NpgsqlConnection.GlobalTypeMapper )."
  },
  "doc/api/Npgsql.TypeHandlers.CompositeHandlers.IMappedCompositeTypeHandlerFactory.html": {
    "href": "doc/api/Npgsql.TypeHandlers.CompositeHandlers.IMappedCompositeTypeHandlerFactory.html",
    "title": "Interface IMappedCompositeTypeHandlerFactory | Npgsql Documentation",
    "keywords": "Interface IMappedCompositeTypeHandlerFactory Interface implemented by all mapped composite handler factories. Used to expose the name translator for those reflecting composite mappings (e.g. EF Core). Namespace : Npgsql.TypeHandlers.CompositeHandlers Assembly : Npgsql.dll Syntax public interface IMappedCompositeTypeHandlerFactory Properties | Improve this Doc View Source NameTranslator The name translator used for this composite. Declaration INpgsqlNameTranslator NameTranslator { get; } Property Value Type Description INpgsqlNameTranslator"
  },
  "doc/api/Npgsql.NpgsqlException.html": {
    "href": "doc/api/Npgsql.NpgsqlException.html",
    "title": "Class NpgsqlException | Npgsql Documentation",
    "keywords": "Class NpgsqlException The exception that is thrown when server-related issues occur. Inheritance System.Object System.Exception System.SystemException System.Runtime.InteropServices.ExternalException System.Data.Common.DbException NpgsqlException PostgresException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Runtime.InteropServices.ExternalException.ToString() System.Runtime.InteropServices.ExternalException.ErrorCode System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql Assembly : Npgsql.dll Syntax [Serializable] public class NpgsqlException : DbException, ISerializable Remarks PostgreSQL errors (e.g. query SQL issues, constraint violations) are raised via PostgresException which is a subclass of this class. Purely Npgsql-related issues which aren't related to the server will be raised via the standard CLR exceptions (e.g. ArgumentException). Constructors | Improve this Doc View Source NpgsqlException() Initializes a new instance of the NpgsqlException class. Declaration public NpgsqlException() | Improve this Doc View Source NpgsqlException(SerializationInfo, StreamingContext) Initializes a new instance of the NpgsqlException class with serialized data. Declaration protected NpgsqlException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. System.Runtime.Serialization.StreamingContext context The StreamingContext that contains contextual information about the source or destination. | Improve this Doc View Source NpgsqlException(String) Initializes a new instance of the NpgsqlException class with a specified error message. Declaration public NpgsqlException(string message) Parameters Type Name Description System.String message The message that describes the error. | Improve this Doc View Source NpgsqlException(String, Exception) Initializes a new instance of the NpgsqlException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public NpgsqlException(string message, Exception innerException) Parameters Type Name Description System.String message The error message that explains the reason for the exception. System.Exception innerException The exception that is the cause of the current exception, or a null reference ( Nothing in Visual Basic) if no inner exception is specified. Properties | Improve this Doc View Source IsTransient Specifies whether the exception is considered transient, that is, whether retrying to operation could succeed (e.g. a network error). Declaration public virtual bool IsTransient { get; } Property Value Type Description System.Boolean Implements System.Runtime.Serialization.ISerializable"
  },
  "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandlerFactory.html": {
    "href": "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandlerFactory.html",
    "title": "Class TimeTzHandlerFactory | Npgsql Documentation",
    "keywords": "Class TimeTzHandlerFactory A factory for type handlers for the PostgreSQL timetz data type. Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < System.DateTimeOffset > TimeTzHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<DateTimeOffset>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<DateTimeOffset>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class TimeTzHandlerFactory : NpgsqlTypeHandlerFactory<DateTimeOffset> Remarks See http://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<DateTimeOffset> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < System.DateTimeOffset > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<System.DateTimeOffset>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.TypeHandlers.BitStringArrayHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.BitStringArrayHandler.html",
    "title": "Class BitStringArrayHandler | Npgsql Documentation",
    "keywords": "Class BitStringArrayHandler A special handler for arrays of bit strings. Differs from the standard array handlers in that it returns arrays of bool for BIT(1) and arrays of BitArray otherwise (just like the scalar BitStringHandler does). Inheritance System.Object NpgsqlTypeHandler ArrayHandler ArrayHandler < System.Collections.BitArray > BitStringArrayHandler Inherited Members ArrayHandler<BitArray>.ReadArray<TAnyElement>(NpgsqlReadBuffer, Boolean) ArrayHandler<BitArray>.ReadList<TAnyElement>(NpgsqlReadBuffer, Boolean) ArrayHandler<BitArray>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) ArrayHandler<BitArray>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) ArrayHandler<BitArray>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) ArrayHandler.CreateArrayHandler(PostgresArrayType) ArrayHandler.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public class BitStringArrayHandler : ArrayHandler<BitArray> Remarks The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source BitStringArrayHandler(PostgresType, BitStringHandler) Declaration public BitStringArrayHandler(PostgresType postgresType, BitStringHandler elementHandler) Parameters Type Name Description PostgresType postgresType BitStringHandler elementHandler Methods | Improve this Doc View Source Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration protected override ValueTask<TAny> Read<TAny>(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask <TAny> Type Parameters Name Description TAny Overrides Npgsql.TypeHandlers.ArrayHandler<System.Collections.BitArray>.Read<TAny>(Npgsql.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription)"
  },
  "doc/api/Npgsql.TypeHandling.INpgsqlTypeHandler-1.html": {
    "href": "doc/api/Npgsql.TypeHandling.INpgsqlTypeHandler-1.html",
    "title": "Interface INpgsqlTypeHandler<T> | Npgsql Documentation",
    "keywords": "Interface INpgsqlTypeHandler<T> Type handlers that wish to support reading other types in additional to the main one can implement this interface for all those types. Namespace : Npgsql.TypeHandling Assembly : Npgsql.dll Syntax public interface INpgsqlTypeHandler<T> Type Parameters Name Description T Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type T with the given length from the provided buffer, using either sync or async I/O. Declaration ValueTask<T> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. System.Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. System.Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description System.Threading.Tasks.ValueTask <T> The fully-read value. | Improve this Doc View Source ValidateAndGetLength(T, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception should be thrown. Also returns the byte length needed to write the value. Declaration int ValidateAndGetLength(T value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description T value The value to be written to PostgreSQL NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description System.Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(T, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Writes a value to the provided buffer. Declaration Task Write(T value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description T value The value to write. NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache A cache where the length calculated during the validation phase can be stored for use at the writing phase. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). System.Boolean async If I/O will be necessary (i.e. the buffer is full), determines whether it will be done synchronously or asynchronously. Returns Type Description System.Threading.Tasks.Task"
  },
  "doc/api/Npgsql.LegacyPostgis.LegacyPostgisHandlerFactory.html": {
    "href": "doc/api/Npgsql.LegacyPostgis.LegacyPostgisHandlerFactory.html",
    "title": "Class LegacyPostgisHandlerFactory | Npgsql Documentation",
    "keywords": "Class LegacyPostgisHandlerFactory Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < PostgisGeometry > LegacyPostgisHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<PostgisGeometry>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<PostgisGeometry>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.LegacyPostgis Assembly : Npgsql.LegacyPostgis.dll Syntax public class LegacyPostgisHandlerFactory : NpgsqlTypeHandlerFactory<PostgisGeometry> Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<PostgisGeometry> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < PostgisGeometry > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<Npgsql.LegacyPostgis.PostgisGeometry>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.TypeHandlers.ByteaHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.ByteaHandler.html",
    "title": "Class ByteaHandler | Npgsql Documentation",
    "keywords": "Class ByteaHandler A type handler for the PostgreSQL bytea data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.Byte []> ByteaHandler Implements INpgsqlTypeHandler < System.Byte []> INpgsqlTypeHandler < System.ArraySegment < System.Byte >> INpgsqlTypeHandler < System.ReadOnlyMemory < System.Byte >> INpgsqlTypeHandler < System.Memory < System.Byte >> Inherited Members NpgsqlTypeHandler<Byte[]>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Byte[]>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<Byte[]>.ValidateAndGetLength(Byte[], NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Byte[]>.Write(Byte[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Byte[]>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Byte[]>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Byte[]>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<Byte[]>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Byte[]>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<Byte[]>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public class ByteaHandler : NpgsqlTypeHandler<byte[]>, INpgsqlTypeHandler<byte[]>, INpgsqlTypeHandler<ArraySegment<byte>>, INpgsqlTypeHandler<ReadOnlyMemory<byte>>, INpgsqlTypeHandler<Memory<byte>> Remarks See http://www.postgresql.org/docs/current/static/datatype-binary.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source ByteaHandler(PostgresType) Constructs a ByteaHandler . Declaration public ByteaHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override ValueTask<byte[]> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < System.Byte []> Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.Byte[]>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(ArraySegment<Byte>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(ArraySegment<byte> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.ArraySegment < System.Byte > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Byte[], ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(byte[] value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Byte [] value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.Byte[]>.ValidateAndGetLength(System.Byte[], Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(Memory<Byte>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(Memory<byte> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Memory < System.Byte > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(ReadOnlyMemory<Byte>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(ReadOnlyMemory<byte> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.ReadOnlyMemory < System.Byte > value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source Write(ArraySegment<Byte>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public Task Write(ArraySegment<byte> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.ArraySegment < System.Byte > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write(Byte[], NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public override Task Write(byte[] value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Byte [] value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<System.Byte[]>.Write(System.Byte[], Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean) | Improve this Doc View Source Write(Memory<Byte>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public Task Write(Memory<byte> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Memory < System.Byte > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write(ReadOnlyMemory<Byte>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public Task Write(ReadOnlyMemory<byte> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.ReadOnlyMemory < System.Byte > value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Explicit Interface Implementations | Improve this Doc View Source INpgsqlTypeHandler<ArraySegment<Byte>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<ArraySegment<byte>> INpgsqlTypeHandler<ArraySegment<byte>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < System.ArraySegment < System.Byte >> | Improve this Doc View Source INpgsqlTypeHandler<Memory<Byte>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<Memory<byte>> INpgsqlTypeHandler<Memory<byte>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < System.Memory < System.Byte >> | Improve this Doc View Source INpgsqlTypeHandler<ReadOnlyMemory<Byte>>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration ValueTask<ReadOnlyMemory<byte>> INpgsqlTypeHandler<ReadOnlyMemory<byte>>.Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < System.ReadOnlyMemory < System.Byte >> Implements INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T> INpgsqlTypeHandler<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlBox.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlBox.html",
    "title": "Struct NpgsqlBox | Npgsql Documentation",
    "keywords": "Struct NpgsqlBox Represents a PostgreSQL box type. Implements System.IEquatable < NpgsqlBox > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlBox : IEquatable<NpgsqlBox> Remarks See http://www.postgresql.org/docs/current/static/datatype-geometric.html Constructors | Improve this Doc View Source NpgsqlBox(NpgsqlPoint, NpgsqlPoint) Declaration public NpgsqlBox(NpgsqlPoint upperRight, NpgsqlPoint lowerLeft) Parameters Type Name Description NpgsqlPoint upperRight NpgsqlPoint lowerLeft | Improve this Doc View Source NpgsqlBox(Double, Double, Double, Double) Declaration public NpgsqlBox(double top, double right, double bottom, double left) Parameters Type Name Description System.Double top System.Double right System.Double bottom System.Double left Properties | Improve this Doc View Source Bottom Declaration public double Bottom { get; } Property Value Type Description System.Double | Improve this Doc View Source Height Declaration public double Height { get; } Property Value Type Description System.Double | Improve this Doc View Source IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Left Declaration public double Left { get; } Property Value Type Description System.Double | Improve this Doc View Source LowerLeft Declaration public NpgsqlPoint LowerLeft { get; set; } Property Value Type Description NpgsqlPoint | Improve this Doc View Source Right Declaration public double Right { get; } Property Value Type Description System.Double | Improve this Doc View Source Top Declaration public double Top { get; } Property Value Type Description System.Double | Improve this Doc View Source UpperRight Declaration public NpgsqlPoint UpperRight { get; set; } Property Value Type Description NpgsqlPoint | Improve this Doc View Source Width Declaration public double Width { get; } Property Value Type Description System.Double Methods | Improve this Doc View Source Equals(NpgsqlBox) Declaration public bool Equals(NpgsqlBox other) Parameters Type Name Description NpgsqlBox other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Parse(String) Declaration public static NpgsqlBox Parse(string s) Parameters Type Name Description System.String s Returns Type Description NpgsqlBox | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlBox, NpgsqlBox) Declaration public static bool operator ==(NpgsqlBox x, NpgsqlBox y) Parameters Type Name Description NpgsqlBox x NpgsqlBox y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlBox, NpgsqlBox) Declaration public static bool operator !=(NpgsqlBox x, NpgsqlBox y) Parameters Type Name Description NpgsqlBox x NpgsqlBox y Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "doc/api/Npgsql.TypeHandlers.GeometricHandlers.PointHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.GeometricHandlers.PointHandler.html",
    "title": "Class PointHandler | Npgsql Documentation",
    "keywords": "Class PointHandler A type handler for the PostgreSQL point data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlPoint > NpgsqlSimpleTypeHandler < NpgsqlPoint > PointHandler Implements INpgsqlTypeHandler < NpgsqlPoint > INpgsqlSimpleTypeHandler < NpgsqlPoint > Inherited Members NpgsqlSimpleTypeHandler<NpgsqlPoint>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<NpgsqlPoint>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<NpgsqlPoint>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<NpgsqlPoint>.Write(NpgsqlPoint, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<NpgsqlPoint>.ValidateAndGetLength(NpgsqlPoint, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<NpgsqlPoint>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<NpgsqlPoint>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlPoint>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlPoint>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<NpgsqlPoint>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.GeometricHandlers Assembly : Npgsql.dll Syntax public class PointHandler : NpgsqlSimpleTypeHandler<NpgsqlPoint>, INpgsqlTypeHandler<NpgsqlPoint>, INpgsqlSimpleTypeHandler<NpgsqlPoint> Remarks See http://www.postgresql.org/docs/current/static/datatype-geometric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source PointHandler(PostgresType) Declaration public PointHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override NpgsqlPoint Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description NpgsqlPoint Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlPoint>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlPoint, NpgsqlParameter) Declaration public override int ValidateAndGetLength(NpgsqlPoint value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlPoint value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlPoint>.ValidateAndGetLength(NpgsqlTypes.NpgsqlPoint, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlPoint, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(NpgsqlPoint value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlPoint value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlPoint>.Write(NpgsqlTypes.NpgsqlPoint, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.NameTranslation.html": {
    "href": "doc/api/Npgsql.NameTranslation.html",
    "title": "Namespace Npgsql.NameTranslation | Npgsql Documentation",
    "keywords": "Namespace Npgsql.NameTranslation Classes NpgsqlNullNameTranslator A name translator which preserves CLR names (e.g. SomeClass) when mapping names to the database. NpgsqlSnakeCaseNameTranslator A name translator which converts standard CLR names (e.g. SomeClass) to snake-case database names (some_class)"
  },
  "doc/api/Npgsql.LegacyPostgis.PostgisPoint.html": {
    "href": "doc/api/Npgsql.LegacyPostgis.PostgisPoint.html",
    "title": "Class PostgisPoint | Npgsql Documentation",
    "keywords": "Class PostgisPoint Represents an Postgis 2D Point Inheritance System.Object PostgisGeometry PostgisPoint Implements System.IEquatable < PostgisPoint > Inherited Members PostgisGeometry.SRID System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.LegacyPostgis Assembly : Npgsql.LegacyPostgis.dll Syntax public class PostgisPoint : PostgisGeometry, IEquatable<PostgisPoint> Constructors | Improve this Doc View Source PostgisPoint(Double, Double) Declaration public PostgisPoint(double x, double y) Parameters Type Name Description System.Double x System.Double y Properties | Improve this Doc View Source X Declaration public double X { get; } Property Value Type Description System.Double | Improve this Doc View Source Y Declaration public double Y { get; } Property Value Type Description System.Double Methods | Improve this Doc View Source Equals(PostgisPoint) Declaration public bool Equals(PostgisPoint other) Parameters Type Name Description PostgisPoint other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetLenHelper() Declaration protected override int GetLenHelper() Returns Type Description System.Int32 Overrides PostgisGeometry.GetLenHelper() Operators | Improve this Doc View Source Equality(PostgisPoint, PostgisPoint) Declaration public static bool operator ==(PostgisPoint x, PostgisPoint y) Parameters Type Name Description PostgisPoint x PostgisPoint y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(PostgisPoint, PostgisPoint) Declaration public static bool operator !=(PostgisPoint x, PostgisPoint y) Parameters Type Name Description PostgisPoint x PostgisPoint y Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryEmpty.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryEmpty.html",
    "title": "Class NpgsqlTsQueryEmpty | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryEmpty Represents an empty tsquery. Shold only be used as top node. Inheritance System.Object NpgsqlTsQuery NpgsqlTsQueryEmpty Inherited Members NpgsqlTsQuery.Kind NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public sealed class NpgsqlTsQueryEmpty : NpgsqlTsQuery Constructors | Improve this Doc View Source NpgsqlTsQueryEmpty() Creates a tsquery that represents an empty query. Should not be used as child node. Declaration public NpgsqlTsQueryEmpty()"
  },
  "doc/api/Npgsql.TypeHandlers.RangeHandler-1.html": {
    "href": "doc/api/Npgsql.TypeHandlers.RangeHandler-1.html",
    "title": "Class RangeHandler<TElement> | Npgsql Documentation",
    "keywords": "Class RangeHandler<TElement> A type handler for PostgreSQL range types. Inheritance System.Object NpgsqlTypeHandler RangeHandler RangeHandler<TElement> Implements INpgsqlTypeHandler < NpgsqlRange <TElement>> Inherited Members RangeHandler.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public class RangeHandler<TElement> : RangeHandler, INpgsqlTypeHandler<NpgsqlRange<TElement>> Type Parameters Name Description TElement the range subtype Remarks See http://www.postgresql.org/docs/current/static/rangetypes.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source RangeHandler(PostgresType, NpgsqlTypeHandler) Declaration public RangeHandler(PostgresType rangePostgresType, NpgsqlTypeHandler elementHandler) Parameters Type Name Description PostgresType rangePostgresType NpgsqlTypeHandler elementHandler Methods | Improve this Doc View Source CreateArrayHandler(PostgresArrayType) Creates a type handler for arrays of this handler's type. Declaration public override ArrayHandler CreateArrayHandler(PostgresArrayType arrayBackendType) Parameters Type Name Description PostgresArrayType arrayBackendType Returns Type Description ArrayHandler Overrides NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType) | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public ValueTask<NpgsqlRange<TElement>> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < NpgsqlRange <TElement>> | Improve this Doc View Source Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TAny with the given length from the provided buffer, using either sync or async I/O. Declaration protected override ValueTask<TAny> Read<TAny>(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. System.Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. System.Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description System.Threading.Tasks.ValueTask <TAny> The fully-read value. Type Parameters Name Description TAny Overrides NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlRange<TElement>, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlRange<TElement> value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlRange <TElement> value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength<TAny>(TAny, ref NpgsqlLengthCache, NpgsqlParameter) Declaration protected override int ValidateAndGetLength<TAny>(TAny value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description TAny value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Type Parameters Name Description TAny Overrides Npgsql.TypeHandling.NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateObjectAndGetLength(Object, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration protected override int ValidateObjectAndGetLength(object value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Object value The value to be written to PostgreSQL NpgsqlLengthCache lengthCache If the byte length calculation is costly (e.g. for UTF-8 strings), its result can be stored in the length cache to be reused in the writing process, preventing recalculation. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description System.Int32 The number of bytes required to write the value. Overrides NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, ref NpgsqlLengthCache, NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlRange<TElement>, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public Task Write(NpgsqlRange<TElement> value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description NpgsqlRange <TElement> value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Writes a value to the provided buffer, using either sync or async I/O. Declaration protected override Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Object value The value to write. NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). System.Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. Returns Type Description System.Threading.Tasks.Task Overrides NpgsqlTypeHandler.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Implements INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.NpgsqlCommandBuilder.html": {
    "href": "doc/api/Npgsql.NpgsqlCommandBuilder.html",
    "title": "Class NpgsqlCommandBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlCommandBuilder This class is responsible to create database commands for automatic insert, update and delete operations. Inheritance System.Object System.MarshalByRefObject System.ComponentModel.Component System.Data.Common.DbCommandBuilder NpgsqlCommandBuilder Implements System.ComponentModel.IComponent System.IDisposable Inherited Members System.Data.Common.DbCommandBuilder.Dispose(System.Boolean) System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand) System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand) System.Data.Common.DbCommandBuilder.RefreshSchema() System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs) System.Data.Common.DbCommandBuilder.CatalogLocation System.Data.Common.DbCommandBuilder.CatalogSeparator System.Data.Common.DbCommandBuilder.ConflictOption System.Data.Common.DbCommandBuilder.DataAdapter System.Data.Common.DbCommandBuilder.SchemaSeparator System.Data.Common.DbCommandBuilder.SetAllValues System.ComponentModel.Component.Dispose() System.ComponentModel.Component.GetService(System.Type) System.ComponentModel.Component.ToString() System.ComponentModel.Component.CanRaiseEvents System.ComponentModel.Component.Container System.ComponentModel.Component.DesignMode System.ComponentModel.Component.Events System.ComponentModel.Component.Site System.ComponentModel.Component.Disposed System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlCommandBuilder : DbCommandBuilder, IComponent, IDisposable Constructors | Improve this Doc View Source NpgsqlCommandBuilder() Initializes a new instance of the NpgsqlCommandBuilder class. Declaration public NpgsqlCommandBuilder() | Improve this Doc View Source NpgsqlCommandBuilder(NpgsqlDataAdapter) Initializes a new instance of the NpgsqlCommandBuilder class. Declaration public NpgsqlCommandBuilder(NpgsqlDataAdapter adapter) Parameters Type Name Description NpgsqlDataAdapter adapter The adapter. Properties | Improve this Doc View Source QuotePrefix Gets or sets the beginning character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens. Declaration public override string QuotePrefix { get; set; } Property Value Type Description System.String The beginning character or characters to use. The default is an empty string. Overrides System.Data.Common.DbCommandBuilder.QuotePrefix | Improve this Doc View Source QuoteSuffix Gets or sets the ending character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens. Declaration public override string QuoteSuffix { get; set; } Property Value Type Description System.String The ending character or characters to use. The default is an empty string. Overrides System.Data.Common.DbCommandBuilder.QuoteSuffix Methods | Improve this Doc View Source ApplyParameterInfo(DbParameter, DataRow, StatementType, Boolean) Applies the parameter information. Declaration protected override void ApplyParameterInfo(DbParameter p, DataRow row, StatementType statementType, bool whereClause) Parameters Type Name Description System.Data.Common.DbParameter p The parameter. System.Data.DataRow row The row. System.Data.StatementType statementType Type of the statement. System.Boolean whereClause if set to true [where clause]. Overrides System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter, System.Data.DataRow, System.Data.StatementType, System.Boolean) | Improve this Doc View Source DeriveParameters(NpgsqlCommand) This method is responsible to derive the command parameter list with values obtained from function definition. It clears the Parameters collection of command. Also, if there is any parameter type which is not supported by Npgsql, an InvalidOperationException will be thrown. Parameters name will be parameter1, parameter2, ... for CommandType.StoredProcedure and named after the placeholder for CommandType.Text Declaration public static void DeriveParameters(NpgsqlCommand command) Parameters Type Name Description NpgsqlCommand command NpgsqlCommand whose function parameters will be obtained. | Improve this Doc View Source GetDeleteCommand() Gets the automatically generated System.Data.Common.DbCommand object required to perform deletions at the data source. Declaration public NpgsqlCommand GetDeleteCommand() Returns Type Description NpgsqlCommand The automatically generated System.Data.Common.DbCommand object required to perform deletions. | Improve this Doc View Source GetDeleteCommand(Boolean) Gets the automatically generated NpgsqlCommand object required to perform deletions at the data source, optionally using columns for parameter names. Declaration public NpgsqlCommand GetDeleteCommand(bool useColumnsForParameterNames) Parameters Type Name Description System.Boolean useColumnsForParameterNames If true , generate parameter names matching column names, if possible. If false , generate @p1, @p2, and so on. Returns Type Description NpgsqlCommand The automatically generated NpgsqlCommand object required to perform deletions. | Improve this Doc View Source GetInsertCommand() Gets the automatically generated NpgsqlCommand object required to perform insertions at the data source. Declaration public NpgsqlCommand GetInsertCommand() Returns Type Description NpgsqlCommand The automatically generated NpgsqlCommand object required to perform insertions. | Improve this Doc View Source GetInsertCommand(Boolean) Gets the automatically generated NpgsqlCommand object required to perform insertions at the data source, optionally using columns for parameter names. Declaration public NpgsqlCommand GetInsertCommand(bool useColumnsForParameterNames) Parameters Type Name Description System.Boolean useColumnsForParameterNames If true , generate parameter names matching column names, if possible. If false , generate @p1, @p2, and so on. Returns Type Description NpgsqlCommand The automatically generated NpgsqlCommand object required to perform insertions. | Improve this Doc View Source GetParameterName(Int32) Returns the name of the specified parameter in the format of @p#. Declaration protected override string GetParameterName(int parameterOrdinal) Parameters Type Name Description System.Int32 parameterOrdinal The number to be included as part of the parameter's name.. Returns Type Description System.String The name of the parameter with the specified number appended as part of the parameter name. Overrides System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32) | Improve this Doc View Source GetParameterName(String) Returns the full parameter name, given the partial parameter name. Declaration protected override string GetParameterName(string parameterName) Parameters Type Name Description System.String parameterName The partial name of the parameter. Returns Type Description System.String The full parameter name corresponding to the partial parameter name requested. Overrides System.Data.Common.DbCommandBuilder.GetParameterName(System.String) | Improve this Doc View Source GetParameterPlaceholder(Int32) Returns the placeholder for the parameter in the associated SQL statement. Declaration protected override string GetParameterPlaceholder(int parameterOrdinal) Parameters Type Name Description System.Int32 parameterOrdinal The number to be included as part of the parameter's name. Returns Type Description System.String The name of the parameter with the specified number appended. Overrides System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32) | Improve this Doc View Source GetUpdateCommand() Gets the automatically generated System.Data.Common.DbCommand object required to perform updates at the data source. Declaration public NpgsqlCommand GetUpdateCommand() Returns Type Description NpgsqlCommand The automatically generated System.Data.Common.DbCommand object required to perform updates. | Improve this Doc View Source GetUpdateCommand(Boolean) Gets the automatically generated NpgsqlCommand object required to perform updates at the data source, optionally using columns for parameter names. Declaration public NpgsqlCommand GetUpdateCommand(bool useColumnsForParameterNames) Parameters Type Name Description System.Boolean useColumnsForParameterNames If true , generate parameter names matching column names, if possible. If false , generate @p1, @p2, and so on. Returns Type Description NpgsqlCommand The automatically generated NpgsqlCommand object required to perform updates. | Improve this Doc View Source QuoteIdentifier(String) Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier. Declaration public override string QuoteIdentifier(string unquotedIdentifier) Parameters Type Name Description System.String unquotedIdentifier The original unquoted identifier. Returns Type Description System.String The quoted version of the identifier. Embedded quotes within the identifier are properly escaped. Overrides System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String) Exceptions Type Condition System.ArgumentNullException Unquoted identifier parameter cannot be null | Improve this Doc View Source SetRowUpdatingHandler(DbDataAdapter) Registers the NpgsqlCommandBuilder to handle the RowUpdating event for a NpgsqlDataAdapter . Declaration protected override void SetRowUpdatingHandler(DbDataAdapter adapter) Parameters Type Name Description System.Data.Common.DbDataAdapter adapter The System.Data.Common.DbDataAdapter to be used for the update. Overrides System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter) | Improve this Doc View Source UnquoteIdentifier(String) Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier. Declaration public override string UnquoteIdentifier(string quotedIdentifier) Parameters Type Name Description System.String quotedIdentifier The identifier that will have its embedded quotes removed. Returns Type Description System.String The unquoted identifier, with embedded quotes properly un-escaped. Overrides System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String) Exceptions Type Condition System.ArgumentNullException Quoted identifier parameter cannot be null Implements System.ComponentModel.IComponent System.IDisposable"
  },
  "doc/api/Npgsql.TypeHandlers.NetworkHandlers.InetHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.NetworkHandlers.InetHandler.html",
    "title": "Class InetHandler | Npgsql Documentation",
    "keywords": "Class InetHandler A type handler for the PostgreSQL cidr data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.Net.IPAddress > NpgsqlSimpleTypeHandler < System.Net.IPAddress > NpgsqlSimpleTypeHandlerWithPsv < System.Net.IPAddress , System.ValueTuple < System.Net.IPAddress , System.Int32 >> InetHandler Implements INpgsqlTypeHandler < System.Net.IPAddress > INpgsqlSimpleTypeHandler < System.Net.IPAddress > INpgsqlSimpleTypeHandler < System.ValueTuple < System.Net.IPAddress , System.Int32 >> INpgsqlSimpleTypeHandler < NpgsqlInet > Inherited Members NpgsqlSimpleTypeHandlerWithPsv<IPAddress, (IPAddress Address, Int32 Subnet)>.ReadPsv(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlSimpleTypeHandlerWithPsv<IPAddress, (IPAddress Address, Int32 Subnet)>.INpgsqlSimpleTypeHandler<(IPAddress Address, Int32 Subnet)>.Read(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlSimpleTypeHandlerWithPsv<IPAddress, (IPAddress Address, Int32 Subnet)>.ValidateAndGetLength(ValueTuple<IPAddress, Int32>, NpgsqlParameter) NpgsqlSimpleTypeHandlerWithPsv<IPAddress, (IPAddress Address, Int32 Subnet)>.Write(ValueTuple<IPAddress, Int32>, NpgsqlWriteBuffer, NpgsqlParameter) NpgsqlSimpleTypeHandlerWithPsv<IPAddress, (IPAddress Address, Int32 Subnet)>.CreateArrayHandler(PostgresArrayType) NpgsqlSimpleTypeHandler<IPAddress>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<IPAddress>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<IPAddress>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<IPAddress>.Write(IPAddress, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<IPAddress>.ValidateAndGetLength(IPAddress, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<IPAddress>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<IPAddress>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<IPAddress>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.NetworkHandlers Assembly : Npgsql.dll Syntax public class InetHandler : NpgsqlSimpleTypeHandlerWithPsv<IPAddress, (IPAddress Address, int Subnet)>, INpgsqlTypeHandler<IPAddress>, INpgsqlSimpleTypeHandler<IPAddress>, INpgsqlSimpleTypeHandler<(IPAddress Address, int Subnet)>, INpgsqlSimpleTypeHandler<NpgsqlInet> Remarks See http://www.postgresql.org/docs/current/static/datatype-net-types.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source InetHandler(PostgresType) Declaration public InetHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override IPAddress Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Net.IPAddress Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Net.IPAddress>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ReadPsv(NpgsqlReadBuffer, Int32, FieldDescription) Declaration protected override (IPAddress Address, int Subnet) ReadPsv(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.ValueTuple < System.Net.IPAddress , System.Int32 > Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<System.Net.IPAddress, System.ValueTuple<System.Net.IPAddress, System.Int32>>.ReadPsv(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlInet, NpgsqlParameter) Declaration public int ValidateAndGetLength(NpgsqlInet value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlInet value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(IPAddress, NpgsqlParameter) Declaration public override int ValidateAndGetLength(IPAddress value, NpgsqlParameter parameter) Parameters Type Name Description System.Net.IPAddress value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Net.IPAddress>.ValidateAndGetLength(System.Net.IPAddress, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength((IPAddress Address, Int32 Subnet), NpgsqlParameter) Declaration public override int ValidateAndGetLength((IPAddress Address, int Subnet) value, NpgsqlParameter parameter) Parameters Type Name Description System.ValueTuple < System.Net.IPAddress , System.Int32 > value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<System.Net.IPAddress, System.ValueTuple<System.Net.IPAddress, System.Int32>>.ValidateAndGetLength(System.ValueTuple<System.Net.IPAddress, System.Int32>, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateObjectAndGetLength(Object, ref NpgsqlLengthCache, NpgsqlParameter) Declaration protected override int ValidateObjectAndGetLength(object value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Object value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Net.IPAddress>.ValidateObjectAndGetLength(System.Object, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlInet, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(NpgsqlInet value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlInet value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(IPAddress, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(IPAddress value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Net.IPAddress value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Net.IPAddress>.Write(System.Net.IPAddress, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write((IPAddress Address, Int32 Subnet), NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write((IPAddress Address, int Subnet) value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.ValueTuple < System.Net.IPAddress , System.Int32 > value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<System.Net.IPAddress, System.ValueTuple<System.Net.IPAddress, System.Int32>>.Write(System.ValueTuple<System.Net.IPAddress, System.Int32>, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration protected override Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Object value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Net.IPAddress>.WriteObjectWithLength(System.Object, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean) Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<NpgsqlInet>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration NpgsqlInet INpgsqlSimpleTypeHandler<NpgsqlInet>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description NpgsqlInet Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.LegacyPostgis.PostgisGeometry.html": {
    "href": "doc/api/Npgsql.LegacyPostgis.PostgisGeometry.html",
    "title": "Class PostgisGeometry | Npgsql Documentation",
    "keywords": "Class PostgisGeometry Represents an Postgis feature. Inheritance System.Object PostgisGeometry PostgisGeometryCollection PostgisLineString PostgisMultiLineString PostgisMultiPoint PostgisMultiPolygon PostgisPoint PostgisPolygon Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.LegacyPostgis Assembly : Npgsql.LegacyPostgis.dll Syntax public abstract class PostgisGeometry Properties | Improve this Doc View Source SRID The Spatial Reference System Identifier of the geometry (0 if unspecified). Declaration public uint SRID { get; set; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source GetLenHelper() returns the binary length of the data structure without header. Declaration protected abstract int GetLenHelper() Returns Type Description System.Int32"
  },
  "doc/api/Npgsql.Json.NET.JsonHandlerFactory.html": {
    "href": "doc/api/Npgsql.Json.NET.JsonHandlerFactory.html",
    "title": "Class JsonHandlerFactory | Npgsql Documentation",
    "keywords": "Class JsonHandlerFactory Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < System.String > JsonHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<String>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<String>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.Json.NET Assembly : Npgsql.Json.NET.dll Syntax public class JsonHandlerFactory : NpgsqlTypeHandlerFactory<string> Constructors | Improve this Doc View Source JsonHandlerFactory(Nullable<JsonSerializerSettings>) Declaration public JsonHandlerFactory(JsonSerializerSettings? settings = default(JsonSerializerSettings? )) Parameters Type Name Description System.Nullable < JsonSerializerSettings > settings Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<string> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < System.String > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<System.String>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/NpgsqlTypes.NpgsqlRange-1.RangeTypeConverter.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlRange-1.RangeTypeConverter.html",
    "title": "Class NpgsqlRange<T>.RangeTypeConverter | Npgsql Documentation",
    "keywords": "Class NpgsqlRange<T>.RangeTypeConverter Represents a type converter for NpgsqlRange<T> . Inheritance System.Object System.ComponentModel.TypeConverter NpgsqlRange<T>.RangeTypeConverter Inherited Members System.ComponentModel.TypeConverter.CanConvertFrom(System.Type) System.ComponentModel.TypeConverter.CanConvertTo(System.Type) System.ComponentModel.TypeConverter.ConvertFrom(System.Object) System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext, System.String) System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String) System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.String) System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.String) System.ComponentModel.TypeConverter.ConvertFromString(System.String) System.ComponentModel.TypeConverter.ConvertTo(System.Object, System.Type) System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object) System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object) System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.ConvertToString(System.Object) System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary) System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary) System.ComponentModel.TypeConverter.GetConvertFromException(System.Object) System.ComponentModel.TypeConverter.GetConvertToException(System.Object, System.Type) System.ComponentModel.TypeConverter.GetCreateInstanceSupported() System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[]) System.ComponentModel.TypeConverter.GetProperties(System.Object) System.ComponentModel.TypeConverter.GetPropertiesSupported() System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetStandardValues() System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetStandardValuesExclusive() System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.GetStandardValuesSupported() System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext) System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object) System.ComponentModel.TypeConverter.IsValid(System.Object) System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String[]) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public class RangeTypeConverter : TypeConverter Methods | Improve this Doc View Source CanConvertFrom(ITypeDescriptorContext, Type) Declaration public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context System.Type sourceType Returns Type Description System.Boolean Overrides System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type) | Improve this Doc View Source CanConvertTo(ITypeDescriptorContext, Type) Declaration public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context System.Type destinationType Returns Type Description System.Boolean Overrides System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type) | Improve this Doc View Source ConvertFrom(ITypeDescriptorContext, CultureInfo, Object) Declaration public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context System.Globalization.CultureInfo culture System.Object value Returns Type Description System.Object Overrides System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object) | Improve this Doc View Source ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type) Declaration public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType) Parameters Type Name Description System.ComponentModel.ITypeDescriptorContext context System.Globalization.CultureInfo culture System.Object value System.Type destinationType Returns Type Description System.Object Overrides System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type) | Improve this Doc View Source Register() Adds a System.ComponentModel.TypeConverterAttribute to the closed form NpgsqlRange<T> . Declaration public static void Register()"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCidrTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCidrTypeMapping.html",
    "title": "Class NpgsqlCidrTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlCidrTypeMapping The type mapping for the PostgreSQL cidr type. Inheritance System.Object NpgsqlTypeMapping NpgsqlCidrTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCidrTypeMapping : NpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-net-types.html#DATATYPE-CIDR Constructors | Improve this Doc View Source NpgsqlCidrTypeMapping() Constructs an instance of the NpgsqlCidrTypeMapping class. Declaration public NpgsqlCidrTypeMapping() | Improve this Doc View Source NpgsqlCidrTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlCidrTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Classes NpgsqlArrayMethodTranslator Translates functions on arrays into their corresponding PostgreSQL operations. NpgsqlConvertTranslator Translates methods defined on System.Convert into PostgreSQL CAST expressions. NpgsqlDateTimeMemberTranslator Provides translation services for System.DateTime members. NpgsqlDateTimeMethodTranslator Provides expression translation for System.DateTime addition methods. NpgsqlFullTextSearchMethodTranslator Provides translations for PostgreSQL full-text search methods. NpgsqlGeometryMemberTranslator NpgsqlGeometryMethodTranslator Translates methods operating on types implementing the interface. NpgsqlJsonDbFunctionsTranslator NpgsqlJsonDomTranslator NpgsqlJsonPocoTranslator NpgsqlLikeTranslator Translates DbFunctionsExtensions.Like methods into PostgreSQL LIKE expressions. NpgsqlMathTranslator Provides translation services for static System.Math methods.. NpgsqlMemberTranslatorProvider A composite member translator that dispatches to multiple specialized member translators specific to Npgsql. NpgsqlMethodCallTranslatorProvider NpgsqlNetTopologySuiteMemberTranslatorPlugin NpgsqlNetTopologySuiteMethodCallTranslatorPlugin NpgsqlNetworkTranslator Provides translation services for operators and functions of PostgreSQL network typess (cidr, inet, macaddr, macaddr8). NpgsqlNewGuidTranslator Provides translation services for PostgreSQL UUID functions. NpgsqlObjectToStringTranslator NpgsqlRangeTranslator Provides translation services for PostgreSQL range operators. NpgsqlRegexIsMatchTranslator Translates Regex.IsMatch calls into PostgreSQL regex expressions for database-side processing. NpgsqlStringMemberTranslator Translates string.Length to 'LENGTH(text)'. NpgsqlStringMethodTranslator Provides translation services for PostgreSQL string functions."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlNodaTimeTypeMappingSourcePlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlNodaTimeTypeMappingSourcePlugin.html",
    "title": "Class NpgsqlNodaTimeTypeMappingSourcePlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeTypeMappingSourcePlugin Inheritance System.Object NpgsqlNodaTimeTypeMappingSourcePlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeTypeMappingSourcePlugin : IRelationalTypeMappingSourcePlugin Constructors | Improve this Doc View Source NpgsqlNodaTimeTypeMappingSourcePlugin(ISqlGenerationHelper) Constructs an instance of the NpgsqlNodaTimeTypeMappingSourcePlugin class. Declaration public NpgsqlNodaTimeTypeMappingSourcePlugin(ISqlGenerationHelper sqlGenerationHelper) Parameters Type Name Description ISqlGenerationHelper sqlGenerationHelper Properties | Improve this Doc View Source ClrTypeMappings Declaration public ConcurrentDictionary<Type, RelationalTypeMapping> ClrTypeMappings { get; } Property Value Type Description System.Collections.Concurrent.ConcurrentDictionary < System.Type , RelationalTypeMapping > | Improve this Doc View Source StoreTypeMappings Declaration public ConcurrentDictionary<string, RelationalTypeMapping[]> StoreTypeMappings { get; } Property Value Type Description System.Collections.Concurrent.ConcurrentDictionary < System.String , RelationalTypeMapping []> Methods | Improve this Doc View Source FindExistingMapping(RelationalTypeMappingInfo) Declaration protected virtual RelationalTypeMapping FindExistingMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description RelationalTypeMapping | Improve this Doc View Source FindMapping(RelationalTypeMappingInfo) Declaration public RelationalTypeMapping FindMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description RelationalTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPolygonTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPolygonTypeMapping.html",
    "title": "Class NpgsqlPolygonTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlPolygonTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlPolygonTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlPolygonTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlPolygonTypeMapping() Declaration public NpgsqlPolygonTypeMapping() | Improve this Doc View Source NpgsqlPolygonTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlPolygonTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlMigrationBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlMigrationBuilderExtensions.html",
    "title": "Class NpgsqlMigrationBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlMigrationBuilderExtensions Inheritance System.Object NpgsqlMigrationBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlMigrationBuilderExtensions Methods | Improve this Doc View Source CreatePostgresExtension(MigrationBuilder, String, String, String) Declaration [Obsolete(\"Use EnsurePostgresExtension instead\")] public static MigrationBuilder CreatePostgresExtension(this MigrationBuilder builder, string name, string schema = null, string version = null) Parameters Type Name Description MigrationBuilder builder System.String name System.String schema System.String version Returns Type Description MigrationBuilder | Improve this Doc View Source DropPostgresExtension(MigrationBuilder, String) Declaration [Obsolete(\"This no longer does anything and should be removed.\")] public static MigrationBuilder DropPostgresExtension(this MigrationBuilder builder, string name) Parameters Type Name Description MigrationBuilder builder System.String name Returns Type Description MigrationBuilder | Improve this Doc View Source EnsurePostgresExtension(MigrationBuilder, String, String, String) Declaration public static MigrationBuilder EnsurePostgresExtension(this MigrationBuilder builder, string name, string schema = null, string version = null) Parameters Type Name Description MigrationBuilder builder System.String name System.String schema System.String version Returns Type Description MigrationBuilder"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQuerySqlGeneratorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlQuerySqlGeneratorFactory.html",
    "title": "Class NpgsqlQuerySqlGeneratorFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlQuerySqlGeneratorFactory The default factory for Npgsql-specific query SQL generators. Inheritance System.Object NpgsqlQuerySqlGeneratorFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlQuerySqlGeneratorFactory : IQuerySqlGeneratorFactory Constructors | Improve this Doc View Source NpgsqlQuerySqlGeneratorFactory(QuerySqlGeneratorDependencies, INpgsqlOptions) Declaration public NpgsqlQuerySqlGeneratorFactory(QuerySqlGeneratorDependencies dependencies, INpgsqlOptions npgsqlOptions) Parameters Type Name Description QuerySqlGeneratorDependencies dependencies INpgsqlOptions npgsqlOptions Methods | Improve this Doc View Source Create() Declaration public virtual QuerySqlGenerator Create() Returns Type Description QuerySqlGenerator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsVectorTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsVectorTypeMapping.html",
    "title": "Class NpgsqlTsVectorTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTsVectorTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlTsVectorTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTsVectorTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlTsVectorTypeMapping() Declaration public NpgsqlTsVectorTypeMapping() | Improve this Doc View Source NpgsqlTsVectorTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlTsVectorTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.NpgsqlNodaTimeMemberTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.NpgsqlNodaTimeMemberTranslator.html",
    "title": "Class NpgsqlNodaTimeMemberTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeMemberTranslator Provides translation services for Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime members. Inheritance System.Object NpgsqlNodaTimeMemberTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeMemberTranslator : IMemberTranslator Remarks See: https://www.postgresql.org/docs/current/static/functions-datetime.html Constructors | Improve this Doc View Source NpgsqlNodaTimeMemberTranslator(ISqlExpressionFactory) Declaration public NpgsqlNodaTimeMemberTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(SqlExpression, MemberInfo, Type) Declaration public SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType) Parameters Type Name Description SqlExpression instance System.Reflection.MemberInfo member System.Type returnType Returns Type Description SqlExpression"
  },
  "doc/api/Npgsql.NpgsqlRowUpdatingEventArgs.html": {
    "href": "doc/api/Npgsql.NpgsqlRowUpdatingEventArgs.html",
    "title": "Class NpgsqlRowUpdatingEventArgs | Npgsql Documentation",
    "keywords": "Class NpgsqlRowUpdatingEventArgs Inheritance System.Object System.EventArgs System.Data.Common.RowUpdatingEventArgs NpgsqlRowUpdatingEventArgs Inherited Members System.Data.Common.RowUpdatingEventArgs.BaseCommand System.Data.Common.RowUpdatingEventArgs.Command System.Data.Common.RowUpdatingEventArgs.Errors System.Data.Common.RowUpdatingEventArgs.Row System.Data.Common.RowUpdatingEventArgs.StatementType System.Data.Common.RowUpdatingEventArgs.Status System.Data.Common.RowUpdatingEventArgs.TableMapping System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public class NpgsqlRowUpdatingEventArgs : RowUpdatingEventArgs Constructors | Improve this Doc View Source NpgsqlRowUpdatingEventArgs(DataRow, IDbCommand, StatementType, DataTableMapping) Declaration public NpgsqlRowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping) Parameters Type Name Description System.Data.DataRow dataRow System.Data.IDbCommand command System.Data.StatementType statementType System.Data.Common.DataTableMapping tableMapping"
  },
  "doc/api/Npgsql.TypeHandlers.CompositeHandlers.html": {
    "href": "doc/api/Npgsql.TypeHandlers.CompositeHandlers.html",
    "title": "Namespace Npgsql.TypeHandlers.CompositeHandlers | Npgsql Documentation",
    "keywords": "Namespace Npgsql.TypeHandlers.CompositeHandlers Interfaces IMappedCompositeTypeHandlerFactory Interface implemented by all mapped composite handler factories. Used to expose the name translator for those reflecting composite mappings (e.g. EF Core)."
  },
  "dev/build-server.html": {
    "href": "dev/build-server.html",
    "title": "Build Server Notes | Npgsql Documentation",
    "keywords": "This page describes the steps used to set up the Npgsql build server. If you're upgrading the TeamCity version, see \"Give agent service start/stop permissions\" below. Install all supported versions of the Postgresql backend At the time of writing, this means 9.1, 9.2, 9.3, 9.4, 9.5. They are configured on ports 5491, 5492, 5493, 5494, 5495. For SSPI/GSS tests, you need to set up a user with the same name as the user that will be running the tests (i.e. teamcity_agent). You must also add the following lines at the top of each PG's pg_hba.conf to set up SSPI/GSS for that user: host all teamcity_agent 127.0.0.1/32 sspi include_realm=0 host all teamcity_agent ::1/128 sspi include_realm=0 See this page on SSPI . Install a TeamCity-dedicated Postgresql cluster TeamCity itself requires an SQL database, but we don't want it to run in the same environment as that used for the unit tests. So choosing the latest stable Postgresql version (9.6 at time of writing), we create a new Postgresql cluster: initdb -U postgres -W c:\\dev\\TeamcityPostgresData Next we set up a Windows service that starts up the new cluster: pg_ctl register -N postgresql-9.6-teamcity -U teamcity -P <password> -D c:\\dev\\TeamcityPostgresData Finally, create a a user and database and point TeamCity to it. Install .NET SDKs for all supported .NET versions .NET 4.0 (Windows 7 SDK): http://www.microsoft.com/en-us/download/details.aspx?id=8279 .NET 4.5 (Windows 8 SDK): http://msdn.microsoft.com/en-us/windows/hardware/hh852363.aspx .NET 4.5.1 (Windows 8.1 SDK): http://msdn.microsoft.com/en-us/windows/hardware/bg162891.aspx While installing the SDK for .NET 4.0, I had this problem: http://support.microsoft.com/kb/2717426 Give agent service start/stop permissions When upgrading TeamCity, the agent needs to be able to stop and start the Windows service. This is how you can grant a normal user specific permissions on specific services: Download and install subinacl from http://www.microsoft.com/en-us/download/details.aspx?id=23510 cd C:\\Program Files (x86)\\Windows Resource Kits\\Tools\\ subinacl /service TCBuildAgent /grant=teamcity_agent=TO Update build status back in github Download the plugin from https://github.com/jonnyzzz/TeamCity.GitHub , get the ZIP Drop the ZIP in the TeamCity content dir's plugins subdir Add the Build Feature \"Report change status to GitHub\". Configure everything appropriately, and be sure the user you set up has push access to the repository! Install assorted dev utilities GitVersion (with Chocolatey) WiX toolset (v3.10.1 at time of writing) Install WiX WiX 3.10 has a dependency on .NET Framework 3.5, but there's some issue blocking its installation on Windows Server 2012 R2 (at least on Azure). A good workaround is to simply install via Powershell ( Add-WindowsFeature NET-Framework-Core ), see https://msdn.microsoft.com/en-us/library/dn169001(v=nav.70).aspx#InstallNET35 . Note that ICE validation is disabled because apparently it requires an interactive account or admin privileges, which doesn't work in continuous integration."
  },
  "index.html": {
    "href": "index.html",
    "title": "Npgsql - .NET Access to PostgreSQL | Npgsql Documentation",
    "keywords": "Npgsql - .NET Access to PostgreSQL About Npgsql is an open source ADO.NET Data Provider for PostgreSQL, it allows programs written in C#, Visual Basic, F# to access the PostgreSQL database server. It is implemented in 100% C# code, is free and is open source. In addition, providers have been written for Entity Framework Core and for Entity Framework 6.x. Getting Help The best way to get help for Npgsql is to post a question to Stack Overflow and tag it with the npgsql tag. If you think you've encountered a bug or want to request a feature, open an issue in the appropriate project's github repository. License Npgsql is licensed under the PostgreSQL License , a liberal OSI-approved open source license. Contributors Current active contributors to Npgsql are: Shay Rojansky Yoh Deadfall Raif Atef Austin Drenski Emil Lenngren Past contributors to Npgsql: Jon Asher Josh Cooley Francisco Figueiredo Jr. Federico Di Gregorio Jon Hanna Chris Morgan Dave Page Glen Parker Brar Piening Hiroshi Saito Kenji Uno Thanks A special thanks to Jetbrains for donating licenses to the project - Npgsql is developed with love on Rider on Linux. Thanks also to Appveyor and Travis for their build platforms."
  },
  "README.html": {
    "href": "README.html",
    "title": "| Npgsql Documentation",
    "keywords": "This is the documentation repo for Npgsql. It contains conceptual documentation articles for Npgsql, Npgsql.EntityFrameworkCore.PostgreSQL (AKA EFCore.PG) and EntityFramework6.Npgsql (AKA EF6.PG). Note that to properly work, docfx expects to also find the Npgsql and EFCore.PG repos cloned in the repo root - it extracts API documentation from them. A Github Actions workflow automatically clones the appropriate repository, rebuilds the entire documentation and pushes the results to live."
  },
  "ef6/index.html": {
    "href": "ef6/index.html",
    "title": "Entity Framework 6 | Npgsql Documentation",
    "keywords": "Npgsql has an Entity Framework 6 provider. You can use it by installing the EntityFramework6.Npgsql nuget. Basic Configuration To use Entity Framework with Npgsql, define a class that inherits from DbConfiguration in the same assembly as your class inheriting DbContext . Ensure that you configure provider services, a provider factory, a default connection factory as shown below: using Npgsql; using System.Data.Entity; class NpgSqlConfiguration : DbConfiguration { public NpgSqlConfiguration() { var name = \"Npgsql\"; SetProviderFactory(providerInvariantName: name, providerFactory: NpgsqlFactory.Instance); SetProviderServices(providerInvariantName: name, provider: NpgsqlServices.Instance); SetDefaultConnectionFactory(connectionFactory: new NpgsqlConnectionFactory()); } } Guid Support Npgsql EF migrations support uses uuid_generate_v4() function to generate guids. In order to have access to this function, you have to install the extension uuid-ossp through the following command: create extension \"uuid-ossp\"; If you don't have this extension installed, when you run Npgsql migrations you will get the following error message: ERROR: function uuid_generate_v4() does not exist If the database is being created by Npgsql Migrations, you will need to run the create extension command in the template1 database . This way, when the new database is created, the extension will be installed already. Template Database When the Entity Framework 6 provider creates a database, it issues a simple CREATE DATABASE command. In PostgreSQL, this implicitly uses template1 as the template - anything existing in template1 will be copied to your new database. If you wish to change the database used as a template, you can specify the EF Template Database connection string parameter. For more info see the PostgreSQL docs . Customizing DataReader Behavior You can use an Entity Framework 6 IDbCommandInterceptor to wrap the DataReader instance returned by Npgsql when Entity Framework executes queries. This is possible using a DbConfiguration class. Example use cases: Forcing all returned DateTime and DateTimeOffset values to be in the UTC timezone. Preventing accidental insertion of DateTime values having DateTimeKind.Unspecified . Forcing all postgres date/time types to be returned to Entity Framework as DateTimeOffset . [DbConfigurationType(typeof(AppDbContextConfiguration))] public class AppDbContext : DbContext { // ... } public class AppDbContextConfiguration : DbConfiguration { public AppDbContextConfiguration() { this.AddInterceptor(new MyEntityFrameworkInterceptor()); } } class MyEntityFrameworkInterceptor : DbCommandInterceptor { public override void ReaderExecuted( DbCommand command, DbCommandInterceptionContext<DbDataReader> interceptionContext) { if (interceptionContext.Result == null) return; interceptionContext.Result = new WrappingDbDataReader(interceptionContext.Result); } public override void ScalarExecuted( DbCommand command, DbCommandInterceptionContext<object> interceptionContext) { interceptionContext.Result = ModifyReturnValues(interceptionContext.Result); } static object ModifyReturnValues(object result) { // Transform and then return result; } } class WrappingDbDataReader : DbDataReader, IDataReader { // Wrap an existing DbDataReader, proxy all calls to the underlying instance, // modify return values and/or parameters as needed... public WrappingDbDataReader(DbDataReader reader) { } }"
  },
  "efcore/modeling/table-column-naming.html": {
    "href": "efcore/modeling/table-column-naming.html",
    "title": "Table and Column Naming | Npgsql Documentation",
    "keywords": "Table and Column Naming By default, EF Core will map to tables and columns named exactly after your .NET classes and properties, so an entity type named BlogPost will be mapped to a PostgreSQL table called BlogPost . While there's nothing wrong with that, the PostgreSQL world tends towards snake_case naming instead. In addition, any upper-case letters in unquoted identifiers are automatically converted to lower-case identifiers, so the Npgsql provider generates quotes around all such identifiers. Starting with 3.0.0, you can use the EFCore.NamingConventions plugin to automatically set all your table and column names to snake_case instead: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder .UseNpgsql(...) .UseSnakeCaseNamingConventions(); public class Customer { public int Id { get; set; } public string FullName { get; set; } } This will cause cleaner SQL such as the following to be generated: CREATE TABLE customers ( id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY, full_name text NULL, CONSTRAINT \"PK_customers\" PRIMARY KEY (id); SELECT c.id, c.full_name FROM customers AS c WHERE c.full_name = 'John Doe'; See the plugin documentation for more details,"
  },
  "efcore/modeling/concurrency.html": {
    "href": "efcore/modeling/concurrency.html",
    "title": "Concurrency Tokens | Npgsql Documentation",
    "keywords": "Concurrency Tokens Note Please read the general Entity Framework Core docs on concurrency tokens . Entity Framework Core supports the concept of optimistic concurrency - a property on your entity is designated as a concurrency token, and EF Core detects concurrent modifications by checking whether that token has changed since the entity was read. The PostgreSQL xmin system column Although applications can update concurrency tokens themselves, we frequently rely on the database automatically updating a column on update - a \"last modified\" timestamp, an SQL Server rowversion , etc. Unfortunately PostgreSQL doesn't have such auto-updating columns - but there is one feature that can be used for concurrency token. All PostgreSQL tables have a set of implicit and hidden system columns , among which xmin holds the ID of the latest updating transaction. Since this value automatically gets updated every time the row is changed, it is ideal for use as a concurrency token. To enable this feature on an entity, insert the following code into your context's OnModelCreating method: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>() .UseXminAsConcurrencyToken();"
  },
  "efcore/modeling/indexes.html": {
    "href": "efcore/modeling/indexes.html",
    "title": "Indexes | Npgsql Documentation",
    "keywords": "Indexes PostgreSQL and the Npgsql provider support the standard index modeling described in the EF Core docs . This page describes some supported PostgreSQL-specific features. PostgreSQL covering indexes (INCLUDE) Since version 11, PostgreSQL supports covering indexes , which allow you to include \"non-key\" columns in your indexes. This allows you to perform index-only scans and can provide a significant performance boost: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>() .HasIndex(b => b.Id) .IncludeProperties(b => b.Name); This will create an index for searching on Id , but containing also the column Name , so that reading the latter will not involve accessing the table. The SQL generated is as follows: CREATE INDEX \"IX_Blog_Id\" ON blogs (\"Id\") INCLUDE (\"Name\"); PostgreSQL index methods PostgreSQL supports a number of index methods , or types . These are specified at index creation time via the USING _method_ clause, see the PostgreSQL docs for CREATE INDEX and this page for information on the different types. The Npgsql EF Core provider allows you to specify the index method to be used by calling HasMethod() on your index in your context's OnModelCreating method: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>() .HasIndex(b => b.Url) .HasMethod(\"gin\"); PostgreSQL index operator classes PostgreSQL allows you to specify operator classes on your indexes , to allow tweaking how the index should work. Use the following code to specify an operator class: protected override void OnConfiguring(DbContextOptionsBuilder builder) => modelBuilder.Entity<Blog>() .HasIndex(b => new { b.Id, b.Name }) .HasOperators(null, \"text_pattern_ops\"); Note that each operator class is used for the corresponding index column, by order. In the example above, the text_pattern_ops class will be used for the Name column, while the Id column will use the default class (unspecified), producing the following SQL: CREATE INDEX \"IX_blogs_Id_Name\" ON blogs (\"Id\", \"Name\" text_pattern_ops);"
  },
  "efcore/modeling/generated-properties.html": {
    "href": "efcore/modeling/generated-properties.html",
    "title": "Value Generation | Npgsql Documentation",
    "keywords": "Value Generation Caution In 3.0.0, the default value generation strategy has changed from the older SERIAL columns to the newer IDENTITY columns. Read the below carefully if you are migrating an existing database. Note It's recommended that you start by reading the general Entity Framework Core docs on generated properties . Serial and identity columns (auto-increment) Introduction Since PostgreSQL 10, the standard way to define auto-incrementing columns is \"identity columns\". Prior to version 10, \"serial columns\" were used, which are less SQL-compliant and generally more difficult to manage. For more information on these, see this blog post . Note that since PostgreSQL 10, both support smallint , integer and bigint as their data type. The Npgsql EF Core provider allows you to choose which of the above you want on a property-by-property basis, or globally on your model. The following \"value generation strategies\" are available: Identity by default : an identity column whose values are by default generated at the database, but you can still override this behavior by providing values from your application. This will generate the clause GENERATED BY DEFAULT AS IDENTITY on your column, and is the default value generation strategy. Identity always : an identity column whose values are always generated at the database - you cannot provide values from your application. This will generate the clause GENERATED ALWAYS AS IDENTITY on your column. Serial : the traditional PostgreSQL serial column. This will create the column with the serial datatype. Recommended only if you are using an older PostgreSQL version. Sequence HiLo : See below Prior to version 3.0, the Npgsql provider generates \"serial\" columns for ID columns; starting with version 3.0, it generates \"identity by default\" instead. In other words, when ValueGeneratedOnAdd is specified on a short , int or long property, the Npgsql provider will automatically map it to a serial or identity column. Note that EF Core will automatically recognize key properties by convention (e.g. a property called Id in your entity) and will implicitly set them to ValueGeneratedOnAdd ; a standard model with ID columns should automatically get created with the appropriate column type. Caution Since the default strategy has changed, if you have an existing database with migrations, the the first migration created after upgrading to version 3.0 will alter your tables and convert serial columns to identity ones. This is a sensitive, one-time migration operation that should be done with care, and carefully tested before deployment to production. Changing a value generation is a significant change to an existing database. You can easily control the value generation strategy for the entire model. For example, to opt out of the change to identity columns, simply place the following in your context's OnModelCreating() : protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.UseSerialColumns(); Note that if you are using PostgreSQL 9.6 or older, identity columns will not work. It is recommended to place the provider in compatibility mode with your specific version - this will also affect the default value generation strategy: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql(\"...\", o => o.SetPostgresVersion(9, 6)); Standard sequence-driven columns While serial sets up a sequence for you, you may want to manage sequence creation yourself. This can be useful for cases where you need to control the sequence's increment value (i.e. increment by 2), populate two columns from the same sequence, etc. Adding a sequence to your model is described in the general EF Core documentation ; once the sequence is specified, you can simply set a column's default value to extract the next value from that sequence. Note that the SQL used to fetch the next value from a sequence differs across databases (see the PostgreSQL docs ). Your models' OnModelCreating should look like this: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.HasSequence<int>(\"OrderNumbers\") .StartsAt(1000) .IncrementsBy(5); modelBuilder.Entity<Order>() .Property(o => o.OrderNo) .HasDefaultValueSql(\"nextval('\\\"OrderNumbers\\\"')\"); } HiLo Autoincrement Generation One disadvantage of database-generated values is that these values must be read back from the database after a row is inserted. If you're saving multiple related entities, this means you must perform multiple roundtrips as the first entity's generated key must be read before writing the second one. One solution to this problem is HiLo value generation: rather than relying on the database to generate each and every value, the application \"allocates\" a range of values, which it can then populate directly on new entities without any additional roundtrips. When the range is exhausted, a new range is allocated. In practical terms, this uses a sequence that increments by some large value (100 by default), allowing the application to insert 100 rows autonomously. To use HiLo, specify UseHiLo on a property in your model's OnModelCreating : protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Blog>() .Property(b => b.Id) .UseHiLo(); You can also make your model use HiLo everywhere: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.UseHiLo(); Guid/UUID Generation By default, if you specify ValueGeneratedOnAdd on a Guid property, a random Guid value will be generated client-side and sent to the database. If you prefer to generate values in the database instead, you can do so by specifying HasDefaultValueSql on your property. Note that PostgreSQL doesn't include any Guid/UUID generation functions, you must add an extension such as uuid-ossp or pgcrypto . This can be done by placing the following code in your model's OnModelCreating : protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.HasPostgresExtension(\"uuid-ossp\") .Entity<Blog>() .Property(e => e.SomeGuidProperty) .HasDefaultValueSql(\"uuid_generate_v4()\"); See the PostgreSQL docs on UUID for more details . Computed Columns (On Add or Update) Note This feature was introduced in 3.0.0. The upcoming PostgreSQL 12 is adding support for stored generated columns , and Npgsql feature supports that feature as well. The following configuration: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Person>() .Property(p => p.DisplayName) .HasComputedColumnSql(@\"\"\"FirstName\"\" || ' ' || \"\"LastName\"\"\"); } Will cause the following migration SQL to be generated ALTER TABLE \"\"Person\"\" ADD \"\"DisplayName\"\" text GENERATED ALWAYS AS (\"\"FirstName\"\" || ' ' || \"\"LastName\"\") STORED; Note that this is a stored column - it is computed once when the row is updated, and takes space on disk. Virtual computed columns, which are computed on each select, are not yet supported by PostgreSQL."
  },
  "efcore/release-notes/2.0.html": {
    "href": "efcore/release-notes/2.0.html",
    "title": "2.0 Release Notes | Npgsql Documentation",
    "keywords": "2.0 Release Notes Version 2.0.0 of the Npgsql Entity Framework Core provider has been released and is available on nuget.org . This version works with version 2.0.0 of Entity Framework Core , and contains some new Npgsql features as well. New Features Aside from general EF Core features new in 2.0.0, the Npgsql provider contains the following major new features: PostgreSQL array operation translation ( #120 ). While array properties have been supported since 1.1, operations on those arrays where client-evaluated. Version 2.0 will now translate array indexing, .Contains() , .SequenceEquals() and .Length . See the array mapping docs for more details. A retrying execution strategy ( #155 ), which will automatically retry operations on exceptions which are considered transient. PostgreSQL extensions are now included in scaffolded models ( #102 ). More LINQ operations are translated to SQL, and more database scenarios are scaffolded correctly (see the docs ). Here's the full list of issues . Please report any problems to https://github.com/npgsql/Npgsql.EntityFrameworkCore.PostgreSQL . Upgrading from 1.x Previously an Npgsql.EntityFrameworkCore.PostgreSQL.Design nuget package existed alongside the main package. Its contents have been merged into the main Npgsql.EntityFrameworkCore.PostgreSQL and no new version has been released. Specifying versions when specifying PostgreSQL extensions on your model is no longer supported - this was a very rarely-used feature which interfered with extension scaffolding."
  },
  "efcore/release-notes/2.1.html": {
    "href": "efcore/release-notes/2.1.html",
    "title": "2.1 Release Notes | Npgsql Documentation",
    "keywords": "2.1 Release Notes Version 2.1.0 of the Npgsql Entity Framework Core provider has been released and is available on nuget. This version works with version 2.1.0 of Entity Framework Core , and contains some new Npgsql features as well. Thanks to @rwasef1830 and @austindrenski for their valuable contributions. New Features Aside from general EF Core features new in 2.1.0, the Npgsql provider contains the following major new features: Improved Spatial Support (PostGIS) Previous versions have allowed basic usage of PostGIS's spatial types via built-in Npgsql types such as NpgsqlPoint , NpgsqlLineString , etc. These types were limited in many ways, and no operation translation was supported. If you want to calculate, say, the distance between two points, you had to drop down to raw SQL. No more! Thanks to a new plugin infrastructure, the EF Core provider now has full-class support for PostGIS. You can now use the NetTopologySuite spatial library to map PostGIS types - NetTopologySuite's types are more complete, and best of all, the provider knows how to translate its operations to SQL. This allows you to write the following code: var nearbyCities = context.Cities.Where(c => c.Location.Distance(somePoint) < 100); See the full documentation for more information . Thanks to @YohDeadfall for implementing support for this at the ADO level. Full text search PostgreSQL has a powerful feature for efficient natural-language search across multiple columns and tables, see the PostgreSQL docs for more info . The EF Core provider now supports full-text search, allowing you to use .NET functions in your LINQ queries which will get translated to efficient PostgreSQL natural-language search queries. Read the full documentation for more information . Many thanks to @rwasef1830 for contributing this feature. NodaTime date/time support NodaTime is a powerful alternative to .NET's built-in date/time types, such as DateTime . The built-in types are flawed in many ways: they have problematic support for timezones, don't have a date-only or time-only types, and promote problematic programming but not making the right distinctions. If your application handles dates and times in anything but the most basic way, you should seriously consider using NodaTime. To learn more read this blog post by Jon Skeet . Thanks to a new plugin infrastructure, it is now possible to set up the EF Core provider to use NodaTime's types instead of the built-in .NET ones; instead of having DateTime properties on your entities, you can now have Instant properties instead. See the full documentation for more information . PostgreSQL 10 IDENTITY columns PostgreSQL 10 introduced a new IDENTITY column as an alternative to traditional SERIAL columns, and these are now supported by the EF Core provider. IDENTITY columns conform to the SQL standard and are in general safer than SERIAL columns, read this blog post for more info . It's recommended that all new projects use IDENTITY, but Npgsql even provides seamless migration of your existing SERIAL-based model!. Read the full documentation for more information . Enum support It is now possible to map your CLR enums to native PostgreSQL enums . This is a unique PostgreSQL feature that provides the best of both worlds: the enum is internally stored in the database as a number (minimal storage), but is handled like a string (more usable, no need to remember numeric values) and has type safety. See the full documentation for more information . Range support PostgreSQL supports native range types , which allow you to represent ranges of dates, ints and other data types in a single column. You can then efficiently perform queries on these types from LINQ, e.g. select all rows where a given date falls in the row's date range. See the full documentation for more information . Many thanks to @austindrenski for contributing the operation translations. Other notable features Several improvements have been made to the way arrays are mapped. For example, you can now map List<T> to PostgreSQL array (previously only T[] was supported) ( #392 ). In addition, change tracking now works for arrays, so EF Core will automatically detect when you change an element's array and will update the corresponding database column when saving. PostgreSQL's built-in range types can now be mapped ( #63 ), head over to the PostgreSQL docs to find out more about range types. Note that user-defined range types are not supported, if you're interested let us know at #329 . Properties of type char are now supported and will be mapped to character(1) in PostgreSQL ( #374 ). Identifiers in generated SQL will only be quoted if needed ( #327 ). This should make it much easier to read. You can now use client certificate authentication and provide a server certificate validation callback ( #270 ). See the doc for usage instructions . Added support for PostgreSQL 10 sequences with type int and smallint ( #301 ). You can now specify the tablespace when creating your databases ( #332 ). Here's the full list of issues . Please report any problems on https://github.com/npgsql/Npgsql.EntityFrameworkCore.PostgreSQL . Breaking changes Caution The provider's classes have been moved from the namespace Microsoft.EntityFrameworkCore to Npgsql.EntityFrameworkCore.PostgreSQL . As a result, any migrations already generated in your project (as well as the mode snapshot) will have to be manually updated to use the new namespace. You will need to add using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata to all the relevant files. Columns of type timestamp with time zone / timestamptz will now be scaffolded as DateTime properties, and not DateTimeOffset properties. The general use of timestamp with time zone / timestamptz is discouraged (this type does not store the timezone in the database), consider using timestamp without time zone / timestamp instead. If you're specifying index methods with ForNpgsqlHasMethod() , then you will have to fix migrations which generate those indexes. In these migrations, you will find code such as .Annotation(\"Npgsql:Npgsql:IndexMethod\", \"gin\") . You must remove the extra Npgsql: , leaving .Annotation(\"Npgsql:IndexMethod\", \"gin\") . Specifying versions when specifying PostgreSQL extensions on your model is no longer supported - this was a very rarely-used feature which interfered with extension scaffolding. If you're still referencing the nuget package Npgsql.EntityFrameworkCore.PostgreSQL.Design, please remove it - it's no longer needed or up to date."
  },
  "efcore/release-notes/1.1.html": {
    "href": "efcore/release-notes/1.1.html",
    "title": "Migrating to 1.1 | Npgsql Documentation",
    "keywords": "Migrating to 1.1 Version 1.1.0 of the Npgsql Entity Framework Core provider has been released and is available on nuget. This version works with version 1.1.0 of Entity Framework Core , and contains some new Npgsql features as well. Note that if you're using the command-line tools, you'll have to modify your tools section as described in the EF Core release post: \"tools\": { \"Microsoft.EntityFrameworkCore.Tools.DotNet\": \"1.0.0-preview3-final\" }, New Features Aside from general EF Core features, version 1.1.0 of the Npgsql provider contains the following: Hilo key generation ( #5 ). This can be a much more efficient way to generate autoincrement key values. PostgreSQL array mapping ( #15 ). This allows you to have plain CLR arrays on your entities, and have those arrays mapped to native PostgreSQL array columns . Optimistic concurrency with PostgreSQL's xmin column ( #19 ). Simply specify .UseXminAsConcurrencyToken() on an entity to start using this, see the EF docs for more details . Cleanup of how serial (autoincrement) and generated GUID/UUID columns are managed. Here's the full list of issues . Please report any problems to https://github.com/npgsql/Npgsql.EntityFrameworkCore.PostgreSQL . Upgrading from 1.0.x If you've used 1.0.x without migrations, you can simply upgrade and everything should just work. Unfortunately, if you already have migrations from 1.0.x you'll have to do some manual fixups because of some bad decisions that were previously made. If deleting your old migrations and starting over (e.g. non-production database) is an option, you may wish to do so. The following are instructions for fixing up 1.0.x migrations. First, Npgsql 1.0.x used a problematic method to identify serial (autoincrement) columns in migrations. If you look at your migration code you'll see .Annotation(\"Npgsql:ValueGeneratedOnAdd\", true) on various columns. Unfortunately this annotation is also present on non-serial columns, e.g. columns with default values. This causes various issues and has been replaced in 1.1. However, you'll have to manually remove .Annotation(\"Npgsql:ValueGeneratedOnAdd\", true) , and replace it with .Annotation(\"Npgsql:ValueGenerationStrategy\", NpgsqlValueGenerationStrategy.SerialColumn) but only on columns which should be serial (e.g. not on columns with defaults). If you attempt to run a migration that has the old annotation, Npgsql will throw an exception and refuse to run your migrations. Unfortunately, this change will cause some incorrect changes the first time you add a migration after the upgrade. To avoid this, simply add a dummy migration right after upgrading to 1.1 and then delete the two new files generated for the dummy migration, but keep the changes made to your ModelSnapshot.cs . From this point on everything should be fine. Make sure you have no pending changes to your model before doing this! . Apologies for this problematic upgrade procedure, it should at least keep things clean going forward."
  },
  "efcore/release-notes/3.0.html": {
    "href": "efcore/release-notes/3.0.html",
    "title": "3.0 Release Notes | Npgsql Documentation",
    "keywords": "3.0 Release Notes Version 3.0.0 of the Npgsql Entity Framework Core provider has been released and is available on nuget. This version works with version 3.0.0 of Entity Framework Core , and bring new Npgsql features in addition to the general EF Core changes. Caution Use these versions with care and do not deploy to production without thorough testing. Read the breaking changes section below. The full list of issues for this release is available here . New Features Aside from general EF Core features new in 3.0.0, the Npgsql EF Core provider contains the following major new features: It is now possible to map POCOs to JSON columns and query them, see the docs for more info ( #981 ) PostgreSQL identity columns are now the default - see breaking changes below) ( #804 ) Sequence options can now be managed on identity columns ( #819 ) Support has been added for the upcoming PostgreSQL 12 generated columns feature ( #939 ) A plugin is now available to automatically make all your tables and columns be snake_case! See EFCore.NamingConventions . Index sort options (ascending/descending, null sort order...) can now be specified ( #326 ) Indexes can now be created concurrently ( #967 ) Views are now reverse-engineered ( #878 ) Array value converters help mapping with PostgreSQL arrays (e.g. map enum arrays to integer arrays) ( #1031 ). Breaking changes Default value generation strategy is now IDENTITY Caution This is a major change, and upgrading to 3.0 with an existing database will cause a non-trivial schema migration to be generated. Read the following carefully. The default value generation strategy has changed from the older SERIAL columns to the newer IDENTITY columns, introduced in PostgreSQL 10. When producing a migration with 3.0, the Npgsql provider will attempt to automatically generate SQL to alter your tables and convert serial columns to identity ones. This is a sensitive, one-time migration operation that should be done with care, and carefully tested before deployment to production. If you wish to opt out of using IDENTITY columns and continue using SERIAL columns, set the following on your model: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.UseSerialColumns(); If you are using a PostgreSQL version older than 10, setting the compatibility mode is a better way to switch the default back to SERIAL columns: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql(\"...\", o => o.SetPostgresVersion(9, 6)); More information is available in the page about generated properties ."
  },
  "doc/dev/tests.html": {
    "href": "doc/dev/tests.html",
    "title": "Tests | Npgsql Documentation",
    "keywords": "Overview Npgsql has an extensive test suite to guard against regressions. The test suite is run on the official build server for the .NET Framework and .NET Core with all supported PostgreSQL backends. Continuous integration results are publicly available from AppVeyor and Travis CI . Getting Started Setup PostgreSQL The Npgsql test suite requires a PostgreSQL backend for tests to run. By default, the test suite expects PostgreSQL to be running on the local machine with the default port (5432). Install PostgreSQL: https://www.postgresql.org/download Start the PostgreSQL backend. Create the npgsql_tests account By default, the test suite expects an account named npgsql_tests with a password of npgsql_tests . This account is used by the test suite to create a database named npgsql_tests and run the tests. $ psql -h localhost -U postgres postgres=# CREATE USER npgsql_tests PASSWORD 'npgsql_tests' SUPERUSER; postgres=# CREATE DATABASE npgsql_tests OWNER npgsql_tests; Note: superuser access is required to create and drop test databases, load extensions (e.g. hstore , postgis ), etc. Clone the repository cd ~ git clone git@github.com:npgsql/npgsql.git (use ssh) git clone https://github.com/npgsql/npgsql.git (use https) Run the test suite cd ~/npgsql dotnet test ./test/Npgsql.Tests dotnet test ./test/Npgsql.PluginTests dotnet test ./test/Npgsql.Benchmarks"
  },
  "doc/connection-string-parameters.html": {
    "href": "doc/connection-string-parameters.html",
    "title": "Connection String Parameters | Npgsql Documentation",
    "keywords": "Connection String Parameters To connect to a database, the application provides a connection string which specifies parameters such as the host, the username, the password, etc. Connection strings have the form keyword1=value; keyword2=value; and are case-insensitive. Values containing special characters (e.g. semicolons) can be double-quoted. For more information, see the official doc page on connection strings . Below are the connection string parameters which Npgsql understands. Basic Connection Parameter Description Default Host Specifies the host name of the machine on which the server is running. If the value begins with a slash, it is used as the directory for the Unix-domain socket (specifying a Port is still required). Required Port The TCP port of the PostgreSQL server. 5432 Database The PostgreSQL database to connect to. Same as Username Username The username to connect with. Not required if using IntegratedSecurity. Password The password to connect with. Not required if using IntegratedSecurity. Passfile Path to a PostgreSQL password file (PGPASSFILE), from which the password is taken. Security and Encryption Parameter Description Default SSL Mode Controls whether SSL is used, depending on server support. Can be Require , Disable , or Prefer . See docs for more info . Disable Trust Server Certificate Whether to trust the server certificate without validating it. See docs for more info . false Client Certificate Location of a client certificate to be sent to the server. See docs Check Certificate Revocation Whether to check the certificate revocation list during authentication. False by default. false Integrated Security Whether to use integrated security to log in (GSS/SSPI), currently supported on Windows only. See docs for more info . false Persist Security Info Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state. Since 3.1 only. false Kerberos Service Name The Kerberos service name to be used for authentication. See docs for more info . postgres Include Realm The Kerberos realm to be used for authentication. See docs for more info . Pooling Parameter Description Default Pooling Whether connection pooling should be used. true Minimum Pool Size The minimum connection pool size. 1 Maximum Pool Size The maximum connection pool size. 100 since 3.1, 20 previously Connection Idle Lifetime The time (in seconds) to wait before closing idle connections in the pool if the count of all connections exceeds Minimum Pool Size . Since 3.1 only. 300 Connection Pruning Interval How many seconds the pool waits before attempting to prune idle connections that are beyond idle lifetime (see Connection Idle Lifetime ). Since 3.1 only. 10 Timeouts and Keepalive Parameter Description Default Timeout The time to wait (in seconds) while trying to establish a connection before terminating the attempt and generating an error. 15 Command Timeout The time to wait (in seconds) while trying to execute a command before terminating the attempt and generating an error. Set to zero for infinity. 30 Internal Command Timeout The time to wait (in seconds) while trying to execute a an internal command before terminating the attempt and generating an error. -1 uses CommandTimeout, 0 means no timeout. -1 Keepalive The number of seconds of connection inactivity before Npgsql sends a keepalive query. disabled Tcp Keepalive Whether to use TCP keepalive with system defaults if overrides isn't specified. disabled Tcp Keepalive Time The number of milliseconds of connection inactivity before a TCP keepalive query is sent. Use of this option is discouraged, use KeepAlive instead if possible. Supported only on Windows. disabled Tcp Keepalive Interval The interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received. Tcp KeepAlive Time must be non-zero as well. Supported only on Windows. value of Tcp Keepalive Time Performance Parameter Description Default Max Auto Prepare The maximum number SQL statements that can be automatically prepared at any given point. Beyond this number the least-recently-used statement will be recycled. Zero disables automatic preparation. 0 Auto Prepare Min Usages The minimum number of usages an SQL statement is used before it's automatically prepared. 5 Use Perf Counters Makes Npgsql write performance information about connection use to Windows Performance Counters. Read the docs for more info. Read Buffer Size Determines the size of the internal buffer Npgsql uses when reading. Increasing may improve performance if transferring large values from the database. 8192 Write Buffer Size Determines the size of the internal buffer Npgsql uses when writing. Increasing may improve performance if transferring large values to the database. 8192 Socket Receive Buffer Size Determines the size of socket receive buffer. System-dependent Socket Send Buffer Size Determines the size of socket send buffer. System-dependent No Reset On Close Improves performance in some cases by not resetting the connection state when it is returned to the pool, at the cost of leaking state. Use only if benchmarking shows a performance improvement false Misc Parameter Description Default Application Name The optional application name parameter to be sent to the backend during connection initiation. Enlist Whether to enlist in an ambient TransactionScope. true Search Path Sets the schema search path. Client Encoding Gets or sets the client_encoding parameter. Since 3.1. Timezone Gets or sets the session timezone, PGTZ environment variable can be used instead. Since 3.3. EF Template Database The database template to specify when creating a database in Entity Framework. template1 Load Table Composites Load table composite type definitions, and not just free-standing composite types. false Compatibility Parameter Description Default Server Compatibility Mode A compatibility mode for special PostgreSQL server types. Currently \"Redshift\" is supported, as well as \"NoTypeLoading\", which will bypass the normal type loading mechanism from the PostgreSQL catalog tables and supports a hardcoded list of basic types . none Convert Infinity DateTime Makes MaxValue and MinValue timestamps and dates readable as infinity and negative infinity. false"
  },
  "doc/large-objects.html": {
    "href": "doc/large-objects.html",
    "title": "Large Objects | Npgsql Documentation",
    "keywords": "Large Objects The Large Objects feature is a way of storing large files in a PostgreSQL database. Files can normally be stored in bytea columns but there are two downsides; a file can only be 1 GB and the backend buffers the whole file when reading or writing a column, which may use significant amounts of RAM on the backend. With the Large Objects feature, objects are instead stored in a separate system table in smaller chunks and provides a streaming API for the user. Each object is given an integral identifier that is used for accessing the object, that can, for example, be stored in a user's table containing information about this object. Example // Retrieve a Large Object Manager for this connection var manager = new NpgsqlLargeObjectManager(Conn); // Create a new empty file, returning the identifier to later access it uint oid = manager.Create(); // Reading and writing Large Objects requires the use of a transaction using (var transaction = Conn.BeginTransaction()) { // Open the file for reading and writing using (var stream = manager.OpenReadWrite(oid)) { var buf = new byte[] { 1, 2, 3 }; stream.Write(buf, 0, buf.Length); stream.Seek(0, System.IO.SeekOrigin.Begin); var buf2 = new byte[buf.Length]; stream.Read(buf2, 0, buf2.Length); // buf2 now contains 1, 2, 3 } // Save the changes to the object transaction.Commit(); } See also See the PostgreSQL documentation for more information. All functionality are implemented and wrapped in the classes NpgsqlLargeObjectManager and NpgsqlLargeObjectStream using standard .NET Stream as base class."
  },
  "doc/wait.html": {
    "href": "doc/wait.html",
    "title": "Waiting for Notifications | Npgsql Documentation",
    "keywords": "Waiting for Notifications Note: This functionality replaces Npgsql 3.0's \"Continuous processing mode\" . PostgreSQL Asynchronous messages PostgreSQL has a feature whereby arbitrary notification messages can be sent between clients. For example, one client may wait until it is notified by another client of a task that it is supposed to perform. Notifications are, by their nature, asynchronous - they can arrive at any point. For more detail about this feature, see the PostgreSQL NOTIFY command . Some other asynchronous message types are notices (e.g. database shutdown imminent) and parameter changes, see the PostgreSQL protocol docs for more details. Note that despite the word \"asynchronous\", this page has nothing to do with ADO.NET async operations (e.g. ExecuteReaderAsync). Processing of Notifications Npgsql exposes notification messages via the Notification event on NpgsqlConnection. Since asynchronous notifications are rarely used and processing can be complex, Npgsql only processes notification messages as part of regular (synchronous) query interaction. That is, if an asynchronous notification is sent, Npgsql will only process it and emit an event to the user the next time a command is sent and processed. To receive notifications outside a synchronous request-response cycle, call NpgsqlConnection.Wait() . This will make your thread block until a single notification is received (note that a version with a timeout as well as an async version exist). Note that the notification is still delivered via the Notification event as before. var conn = new NpgsqlConnection(ConnectionString); conn.Open(); conn.Notification += (o, e) => Console.WriteLine(\"Received notification\"); using (var cmd = new NpgsqlCommand(\"LISTEN channel_name\", conn)) { cmd.ExecuteNonQuery(); } while (true) { conn.Wait(); // Thread will block here } Keepalive You may want to turn on keepalives ."
  },
  "doc/keepalive.html": {
    "href": "doc/keepalive.html",
    "title": "Keepalive | Npgsql Documentation",
    "keywords": "Keepalive Some clients keep idle connections for long periods of time - this is especially frequent when waiting for PostgreSQL notifications. In this scenario, how can the client know the connection is still up, and hasn't been broken by a server or network outage? For this purpose, Npgsql has a keepalive feature, which makes it send periodic SELECT NULL queries. This feature is by default disabled, and must be enabled via the Keepalive connection string parameter, setting the number of seconds between each keepalive. When keepalive is enabled, Npgsql will emit an NpgsqlConnection.StateChange event if the keepalive fails. Note that you should only turn this feature on if you need it. Unless you know you'll have long-lived idle connections, and that your backend (or network equipment) will interfere with these connections, it's better to leave this off. TCP Keepalives The keepalive mechanism above is ideal for long-standing idle connections, but it cannot be used during query processing. With some PostgreSQL-like data warehouse products such as Amazon Redshift or Greenplum , it is not uncommon for a single SQL statement to take a long time to execute, and during that time it is not possible to send SELECT NULL . For these cases you may want to turn on TCP keepalive , which is quite different from the application-level keepalive described above. To better understand the different kinds of keepalives, see this blog post . As that article explains, TCP keepalive depends on networking stack support and might not always work, but it is your only option during query processing. On Linux, you turn keepalives simply by specifying Tcp Keepalive=true in your connection string. The default system-wide settings will be used (for interval, count...) - it is currently impossible to specify these at the application level. On Windows, you can also specify Tcp Keepalive Time and Tcp Keepalive Interval to tweak these settings."
  },
  "doc/logging.html": {
    "href": "doc/logging.html",
    "title": "Logging | Npgsql Documentation",
    "keywords": "Logging Note: Npgsql 3.2.0 and 3.2.1 significantly changed logging to use Microsoft.Extensions.Logging. After several complaints and issues (see #1504 ), this feature was rolled back. Starting with Npgsql 3.2.2, logging support is identical to Npgsql 3.1. Npgsql includes a built-in feature for outputting logging events which can help debug issues. Npgsql logging is disabled by default and must be turned on. Logging can be turned on by setting NpgsqlLogManager.Provider to a class implementing the INpgsqlLoggingProvider interface. Npgsql comes with a console implementation which can be set up as follows: NpgsqlLogManager.Provider = new ??? Note: you must set the logging provider before invoking any other Npgsql method, at the very start of your program. It's trivial to create a logging provider that passes log messages to whatever logging framework you use, you can find such an adapter for NLog below. Note: the logging API is a first implementation and will probably improve/change - don't treat it as a stable part of the Npgsql API. Let us know if you think there are any missing messages or features! ConsoleLoggingProvider Npgsql comes with one built-in logging provider: ConsoleLoggingProvider. It will simply dump all log messages with a given level or above to stdanrd output. You can set it up by including the following line at the beginning of your application: NpgsqlLogManager.Provider = new ConsoleLoggingProvider(<min level>, <print level?>, <print connector id?>); Level defaults to NpgsqlLogLevel.Info (which will only print warnings and errors). You can also have log levels and connector IDs logged. Statement and Parameter Logging Npgsql will log all SQL statements at level Debug, this can help you debug exactly what's being sent to PostgreSQL. By default, Npgsql will not log parameter values as these may contain sensitive information. You can turn on parameter logging by setting NpgsqlLogManager.IsParameterLoggingEnabled to true. NLogLoggingProvider (or implementing your own) The following provider is used in the Npgsql unit tests to pass log messages to NLog . You're welcome to copy-paste it into your project, or to use it as a starting point for implementing your own custom provider. class NLogLoggingProvider : INpgsqlLoggingProvider { public NpgsqlLogger CreateLogger(string name) { return new NLogLogger(name); } } class NLogLogger : NpgsqlLogger { readonly Logger _log; internal NLogLogger(string name) { _log = LogManager.GetLogger(name); } public override bool IsEnabled(NpgsqlLogLevel level) { return _log.IsEnabled(ToNLogLogLevel(level)); } public override void Log(NpgsqlLogLevel level, int connectorId, string msg, Exception exception = null) { var ev = new LogEventInfo(ToNLogLogLevel(level), \"\", msg); if (exception != null) ev.Exception = exception; if (connectorId != 0) ev.Properties[\"ConnectorId\"] = connectorId; _log.Log(ev); } static LogLevel ToNLogLogLevel(NpgsqlLogLevel level) { switch (level) { case NpgsqlLogLevel.Trace: return LogLevel.Trace; case NpgsqlLogLevel.Debug: return LogLevel.Debug; case NpgsqlLogLevel.Info: return LogLevel.Info; case NpgsqlLogLevel.Warn: return LogLevel.Warn; case NpgsqlLogLevel.Error: return LogLevel.Error; case NpgsqlLogLevel.Fatal: return LogLevel.Fatal; default: throw new ArgumentOutOfRangeException(\"level\"); } } }"
  },
  "doc/installation.html": {
    "href": "doc/installation.html",
    "title": "Installation | Npgsql Documentation",
    "keywords": "Offical Packages Official releases of Npgsql are always available on nuget.org . This is the recommended way to use Npgsql. Unstable Packages In additional to the official releases, we automatically publish CI packages for every build. You can use these to test new features or bug fixes that haven't been released yet. Two CI nuget feeds are available: The patch feed ] contains CI packages for the next hotfix/patch version. These packages are generally very stable and safe. The vNext feed contains CI packages for the next minor or major versions. These are less stable and should be tested with care. Visual Studio Integration If you'd like to have Visual Studio Design-Time support, give our VSIX extension a try . GAC Installation In some cases you'll want to install Npgsql into your Global Assembly Cache (GAC) . This is usually the case when you're using a generic .NET Framework program that can work with any ADO.NET provider but doesn't come with Npgsql or reference it directly (e.g. Excel, PowerBI...). For these cases, you can download the Npgsql Windows installer from our Github releases page : it will install Npgsql (and optionally the Entity Framework providers) into your GAC and add Npgsql's DbProviderFactory into your machine.config file. This is not the general recommended method of using Npgsql - always install via Nuget if possible. In addition to Npgsql.dll, this will also install System.Threading.Tasks.Extensions.dll into the GAC. DbProviderFactory in .NET Framework On .NET Framework, you can register Npgsql's DbProviderFactory in your applications App.Config (or Web.Config ), allowing you to use general, provider-independent ADO.NET types in your application (e.g. DbConnection instead of NpgsqlConnection ) - see this tutorial . To do this, add the following to your App.config : <system.data> <DbProviderFactories> <add name=\"Npgsql Data Provider\" invariant=\"Npgsql\" description=\".Net Data Provider for PostgreSQL\" type=\"Npgsql.NpgsqlFactory, Npgsql, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7\"/> </DbProviderFactories> </system.data>"
  },
  "doc/prepare.html": {
    "href": "doc/prepare.html",
    "title": "Prepared Statements | Npgsql Documentation",
    "keywords": "Prepared Statements Introduction It's recommended that you start by reading this blog post . Most applications repeat the same SQL statements many times, passing different parameters. In such cases, it's very beneficial to prepare commands - this will send the command's statement(s) to PostgreSQL, which will parse and plan for them. The prepared statements can then be used on execution, saving valuable planning time. The more complex your queries, the more you'll notice the performance gain; but even very simple queries tend to benefit from preparation. Following is a benchmark Npgsql.Benchmarks.Prepare, which measures the execution time of the same query, executed prepared and unprepared. TablesToJoin is a parameter which increases the query complexity - it determines how many tables the query joins from. Method TablesToJoin Mean StdErr StdDev Op/s Scaled Scaled-StdDev Allocated Unprepared 0 67.1964 us 0.1586 us 0.6142 us 14881.75 1.00 0.00 1.9 kB Prepared 0 43.5007 us 0.2466 us 0.9227 us 22988.13 0.65 0.01 305 B Unprepared 1 98.8502 us 0.1278 us 0.4949 us 10116.32 1.00 0.00 1.93 kB Prepared 1 53.7518 us 0.0486 us 0.1818 us 18604.04 0.54 0.00 306 B Unprepared 2 180.0599 us 0.2990 us 1.1579 us 5553.71 1.00 0.00 2.06 kB Prepared 2 70.3609 us 0.1715 us 0.6417 us 14212.44 0.39 0.00 306 B Unprepared 5 1,084.6065 us 1.1822 us 4.2626 us 921.99 1.00 0.00 2.37 kB Prepared 5 110.0652 us 0.1098 us 0.3805 us 9085.52 0.10 0.00 308 B Unprepared 10 23,086.5956 us 37.2072 us 139.2167 us 43.32 1.00 0.00 3.11 kB Prepared 10 197.1392 us 0.3044 us 1.1790 us 5072.56 0.01 0.00 308 B As is immediately apparent, even an extremely simple scenario (TablesToJoin=0, SQL=SELECT 1), preparing the query with PostgreSQL provides a 36% speedup. As query complexity increases by adding join tables, the gap widens dramatically. The only potential disadvantage of prepared statements is that they hold server-side resources (e.g. cached plans). If you're dynamically generating SQL queries, make sure you don't overwhelm the server by preparing too much. Most reasonable applications shouldn't have to worry about this. Simple Preparation To prepare your commands, simply use the following standard ADO.NET code: var cmd = new NpgsqlCommand(...); cmd.Parameters.Add(\"param\", NpgsqlDbType.Integer); cmd.Prepare(); // Set parameters cmd.ExecuteNonQuery(); // And so on Note that all parameters must be set before calling Prepare() - they are part of the information transmitted to PostgreSQL and used to effectively plan the statement. You must also set the DbType or NpgsqlDbType on your parameters to unambiguously specify the data type (setting the value isn't support). Note that preparation happens on individual statements, and not on commands, which can contain multiple statements, batching them together. This can be important in cases such as the following: var cmd = new NpgsqlCommand(\"UPDATE foo SET bar=@bar WHERE baz=@baz; UPDATE foo SET bar=@bar WHERE baz=@baz\"); // set parameters. cmd.Prepare(); Although there are two statements in this command, the same prepared statement is used to execute since the SQL is identical. Persistency Prior to 3.2, prepared statements were closed when their owning command was disposed. This significantly reduced their usefulness, especially since closing a pooled connection automatically closed all prepared statements. For applications where connections are short-lived, such as most web applications, this effectively made prepared statements useless. Starting from 3.2, all prepared statements are persistent - they no longer get closed when a command or connection is closed. Npgsql keeps track of statements prepared on each physical connection; if you prepare the same SQL a second time on the same connection, Npgsql will simply reuse the prepared statement from the first preparation. This means that in an application with short-lived, pooled connections, prepared statements will gradually be created as the application warms up and the connections are first used. Then, opening a new pooled connection will return a physical connection that already has a prepared statement for your SQL, providing a very substantial performance boost. For example: using (var conn = new NpgsqlConnection(...) using (var cmd = new NpgsqlCommand(\"<some_sql>\", conn) { conn.Open(); cmd.Prepare(); // First time on this physical connection, Npgsql prepares with PostgreSQL cmd.ExecuteNonQuery(); } using (var conn = new NpgsqlConnection(...) using (var cmd = new NpgsqlCommand(\"<some_sql>\", conn) { conn.Open(); // We assume the pool returned the same physical connection used above cmd.Prepare(); // The connection already has a prepared statement for <some_sql>, this doesn't need to do anything cmd.ExecuteNonQuery(); } You can still choose to close a prepared statement by calling NpgsqlCommand.Unprepare() . You can also unprepare all statements on a given connection by calling NpgsqlConnection.UnprepareAll() . Automatic Preparation While the preparation examples shown above provide a very significant performance boost, they depend on you calling the Prepare() command. Unfortunately, if you're using some data layer above ADO.NET, such as Dapper or Entity Framework , chances are these layers don't prepare for you. While issues exist for both Dapper and Entity Framework Core , they don't take advantage of prepared statement at the moment. Npgsql 3.2 introduces automatic preparation. When turned on, this will make Npgsql track the statements you execute and automatically prepare them when you reach a certain threshold. When you reach that threshold, the statement is automatically prepared, and from that point on will be executed as prepared, yielding all the performance benefits discussed above. To turn on this feature, you simply need to set the Max Auto Prepare connection string parameter, which determines how many statements can be automatically prepared on the connection at any given time (this parameter defaults to 0, disabling the feature). A second parameter, Auto Prepare Min Usages , determines how many times a statement needs to be executed before it is auto-prepared (defaults to 5). Since no code changes are required, you can simply try setting Max Auto Prepare and running your application to see an immediate speed increase. Note also that, like explicitly-prepared statements, auto-prepared statements are persistent, allowing you to reap the performance benefits in short-lived connection applications. Note that if you're coding directly against Npgsql or ADO.NET, explicitly preparing your commands with Prepare() is still recommended over letting Npgsql prepare automatically. Automatic preparation does incur a slight performance cost compared to explicit preparation, because of the internal LRU cache and various book-keeping data structures. Explicitly preparing also allows you to better control exactly which statements are prepared and which aren't, and ensures your statements will always stay prepared, and never get ejected because of the LRU mechanism. Note that automatic preparation is a complex new feature which should be considered somewhat experimental; test carefully, and if you see any strange behavior or problem try turning it off."
  },
  "dev/tests.html": {
    "href": "dev/tests.html",
    "title": "Tests | Npgsql Documentation",
    "keywords": "Overview Npgsql comes with an extensive test suite to make sure no regressions occur. All tests are run on our build server on all supported .NET versions (including a recent version of mono) and all supported PostgreSQL backends. There is also a growing suite of speed tests to be able to measure performance. These tests are currently marked [Explicit] and aren't executed automatically. Simple setup The Npgsql test suite requires a PostgreSQL backend to test against. Simply use the latest version of PostgreSQL on your dev machine on the default port (5432). By default, all tests will be run using user npgsql_tests , and password npgsql_tests . Npgsql will automatically create a database called npgsql_tests and run its tests against this. To set this up, connect to PostgreSQL as the admin user as follows: psql -h localhost -U postgres <enter the admin password> create user npgsql_tests password 'npgsql_tests' superuser; And you're done. Superuser access is needed for some tests, e.g. loading the hstore extension, creating and dropping test databases in the Entity Framework tests..."
  },
  "dev/index.html": {
    "href": "dev/index.html",
    "title": "Tests | Npgsql Documentation",
    "keywords": "Tests We maintain a large regression test suite, if you're planning to submit code, please provide a test that reproduces the bug or tests your new feature. See this page for information on the Npgsql test suite. Build Server We have a TeamCity build server running continuous integration builds on commits pushed to our github repository. The Npgsql testsuite is executed over all officially supported PostgreSQL versions to catch errors as early as possible. CI NuGet packages are automatically pushed to our unstable feed at MyGet . For some information about the build server setup, see this page . Thanks to Dave Page at PostgreSQL for donating a VM for this! Release Checklist These are the steps needed to publish release 3.0.6: Merge --no-ff hotfix/3.0.6 into master Tag master with v3.0.6 Push both master and v3.0.6 to Github Wait for the build to complete In TeamCity, go to the artifacts for the build and download them all as a single ZIP Nuget push the packages Write release notes on npgsql.org, publish Create release on github, pointing to npgsql.org Upload MSI to the github release Delete hotfix/3.0.6 both locally and on github Create new branch hotfix/3.0.7 off of master, push to github Close the Github 3.0.6 milestone, create new 3.0.7 milestone Twitter Other stuff Emil compiled a list of PostgreSQL types and their wire representations ."
  },
  "doc/types/jsonnet.html": {
    "href": "doc/types/jsonnet.html",
    "title": "Json.NET Type Plugin | Npgsql Documentation",
    "keywords": "Json.NET Type Plugin Since 4.0, Npgsql supports type plugins , which are external nuget packages that modify how Npgsql maps PostgreSQL values to CLR types. One of these is the Json.NET plugin, which allows Npgsql to automatically make use of Newtonsoft Json.NET when reading and writing JSON data. PostgreSQL natively supports two JSON types : jsonb and json . Out of the box, Npgsql allows reading and writing these types as strings and provides no further processing to avoid taking a dependency on an external JSON library, forcing Npgsql users to serialize and deserialize JSON values themselves. The Json.NET plugin removes this burden from users by perform serialization/deserialization within Npgsql itself. Setup To use the Json.NET plugin, simply add a dependency on Npgsql.Json.NET and set it up: using Npgsql; // Place this at the beginning of your program to use Json.NET everywhere (recommended) NpgsqlConnection.GlobalTypeMapper.UseJsonNet(); // Or to temporarily use JsonNet on a single connection only: conn.TypeMapper.UseJsonNet(); Arbitrary CLR Types Once the plugin is set up, you can transparently read and write CLR objects as JSON values - the plugin will automatically have them serialized/deserialized: // Write arbitrary CLR types as JSON using (var cmd = new NpgsqlCommand(@\"INSERT INTO mytable (my_json_column) VALUES (@p)\", conn)) { cmd.Parameters.Add(new NpgsqlParameter(\"p\", NpgsqlDbType.Jsonb) { Value = MyClrType }); cmd.ExecuteNonQuery(); } // Read arbitrary CLR types as JSON using (var cmd = new NpgsqlCommand(@\"SELECT my_json_column FROM mytable\", conn)) using (var reader = cmd.ExecuteReader()) { reader.Read(); var someValue = reader.GetFieldValue<MyClrType>(0); } Note that in the example above, you must still specify NpgsqlDbType.Json (or Jsonb ) to tell Npgsql that the parameter type is JSON. If you have several CLR types which you'll be using, you have the option of mapping them to JSON: NpgsqlConnection.GlobalTypeMapper.UseJsonNet(new[] { typeof(MyClrType) }); Note that the UseJsonNet() method accepts two type arrays: the first for types to map to jsonb , the second for types to map to json . JObject/JArray You can also read and write Json.NET's JObject/JArray types directly: var value = new JObject { [\"Foo\"] = 8 }; using (var cmd = new NpgsqlCommand(@\"INSERT INTO mytable (my_json_column) VALUES (@p)\", conn)) { cmd.Parameters.Add(new NpgsqlParameter(\"p\", NpgsqlDbType.Jsonb) { Value = value }); cmd.ExecuteNonQuery(); } using (var cmd = new NpgsqlCommand(@\"SELECT my_json_column FROM mytable\", conn)) using (var reader = cmd.ExecuteReader()) { reader.Read(); var someValue = reader.GetFieldValue<JObject>(0); } CLR Arrays You can even read and write native CLR arrays as JSON: using (var cmd = new NpgsqlCommand(@\"INSERT INTO mytable (my_json_column) VALUES (@p)\", conn)) { cmd.Parameters.Add(new NpgsqlParameter(\"p\", NpgsqlDbType.Jsonb) { Value = new[] { 1, 2, 3} }); cmd.ExecuteNonQuery(); } using (var cmd = new NpgsqlCommand(@\"SELECT my_json_column FROM mytable\", conn)) using (var reader = cmd.ExecuteReader()) { reader.Read(); var someValue = reader.GetFieldValue<int[]>(0); } And for extra credit, you can specify JSON by default for array types just like for regular CLR types: NpgsqlConnection.GlobalTypeMapper.UseJsonNet(new[] { typeof(int[]) }); This overwrites the default array mapping (which sends PostgreSQL arrays ), making Npgsql send int arrays as JSON by default."
  },
  "doc/types/legacy-postgis.html": {
    "href": "doc/types/legacy-postgis.html",
    "title": "PostGIS Legacy Type Plugin | Npgsql Documentation",
    "keywords": "PostGIS Legacy Type Plugin Since 4.0, Npgsql supports type plugins , which are external nuget packages that modify how Npgsql maps PostgreSQL values to CLR types. The previous support for PostGIS spatial types has been moved out of Npgsql and into the plugin Npgsql.LegacyPostgis. The recommended way to read and write spatial types is now Npgsql.NetTopologySuite , which maps PostGIS types to NetTopologySuite , a more complete library dedicated to spatial. The NetTopologySuite plugin is now the recommended way to do spatial in Npgsql, but the Npgsql.LegacyPostgis still exists to provide support for the previous types. At this time, the legacy types only support geometry, not geography, and only XY (not XYZ, XYM or XYZM). Setup To use the PostGIS legacy plugin, simply add a dependency on Npgsql.LegacyPostgis and set it up: using Npgsql; // Place this at the beginning of your program to use legacy PostGIS everywhere (recommended): NpgsqlConnection.GlobalTypeMapper.UseLegacyPostgis(); // Or to temporarily use legacy PostGIS on a single connection only: conn.TypeMapper.UseLegacyPostgis(); Usage If you've used the internal PostGIS types in Npgsql 3.2 or earlier, the plugin works in the same way: NpgsqlConnection.GlobalTypeMapper.UseLegacyPostgis(); // Write var cmd = new NpgsqlCommand(\"INSERT INTO table (pg_point, pg_polygon) VALUES (@point, @polygon)\", conn); cmd.Parameters.AddWithValue(\"point\", new PostgisPoint(3.5, 4.5)); cmd.ExecuteNonQuery(); // Read var cmd = new NpgsqlCommand(\"SELECT * FROM table\", conn); var reader = cmd.ExecuteReader(); while (reader.Read()) { var point = reader.GetFieldValue<PostgisPoint>(0); var polygon = reader.GetFieldValue<PostgisPolygon>(1); }"
  },
  "doc/types/nts.html": {
    "href": "doc/types/nts.html",
    "title": "PostGIS/NetTopologySuite Type Plugin | Npgsql Documentation",
    "keywords": "PostGIS/NetTopologySuite Type Plugin Before 4.0, Npgsql has supported reading and writing PostGIS types via some bundled .NET classes: PostgisPoint , PostgisLineString , etc. While this model provided some basic support, a proper representation of spatial types is a complicated task that's beyond Npgsql's scope, and should be handled by a specialized spatial library instead. The leading spatial library in the .NET world is currently NetTopologySuite , and with the introduction of type plugins in Npgsql 4.0, it is now possible to map PostGIS types directly to NetTopologySuite types. This is now the recommended way to store and load PostGIS types. If you prefer to work with the pre-4.0 types, you can still do so by using the Npgsql.LegacyPostgis plugin . Setup To use the NetTopologySuite plugin, simply add a dependency on Npgsql.NetTopologySuite and set it up: using Npgsql; // Place this at the beginning of your program to use NetTopologySuite everywhere (recommended) NpgsqlConnection.GlobalTypeMapper.UseNetTopologySuite(); // Or to temporarily use NetTopologySuite on a single connection only conn.TypeMapper.UseNetTopologySuite(); By default the plugin handles only ordinates provided by the DefaultCoordinateSequenceFactory of GeometryServiceProvider.Instance . If GeometryServiceProvider is initialized automatically the X and Y ordinates are handled. To change the behavior specify the handleOrdinates parameter like in the following example: conn.TypeMapper.UseNetTopologySuite(handleOrdinates: Ordinates.XYZ); To process the M ordinate, you must initialize GeometryServiceProvider.Instance to a new NtsGeometryServices instance with coordinateSequenceFactory set to a DotSpatialAffineCoordinateSequenceFactory . Or you can specify the factory when calling UseNetTopologySuite . // Place this at the beginning of your program to use the specified settings everywhere (recommended) GeometryServiceProvider.Instance = new NtsGeometryServices( new DotSpatialAffineCoordinateSequenceFactory(Ordinates.XYM), new PrecisionModel(PrecisionModels.Floating), -1); // Or specify settings for Npgsql only conn.TypeMapper.UseNetTopologySuite( new DotSpatialAffineCoordinateSequenceFactory(Ordinates.XYM)); Reading and Writing Geometry Values When reading PostGIS values from the database, Npgsql will automatically return the appropriate NetTopologySuite types: Point , LineString , and so on. Npgsql will also automatically recognize NetTopologySuite's types in parameters, and will automatically send the corresponding PostGIS type to the database. The following code demonstrates a roundtrip of a NetTopologySuite Point to the database: var point = new Point(new Coordinate(1d, 1d)); conn.ExecuteNonQuery(\"CREATE TEMP TABLE data (geom GEOMETRY)\"); using (var cmd = new NpgsqlCommand(\"INSERT INTO data (geom) VALUES (@p)\", conn)) { cmd.Parameters.AddWithValue(\"@p\", point); cmd.ExecuteNonQuery(); } using (var cmd = new NpgsqlCommand(\"SELECT geom FROM data\", conn)) using (var reader = cmd.ExecuteReader()) { reader.Read(); Assert.That(reader[0], Is.EqualTo(point)); } You may also explicitly specify a parameter's type by setting NpgsqlDbType.Geometry . Geography (geodetic) Support PostGIS has two types: geometry (for Cartesian coordinates) and geography (for geodetic or spherical coordinates). You can read about the geometry/geography distinction in the PostGIS docs or in this blog post . In a nutshell, geography is much more accurate when doing calculations over long distances, but is more expensive computationally and supports only a small subset of the spatial operations supported by geometry . Npgsql uses the same NetTopologySuite types to represent both geometry and geography - the Point type represents a point in either Cartesian or geodetic space. You usually don't need to worry about this distinction because PostgreSQL will usually cast types back and forth as needed. However, it's worth noting that Npgsql sends Cartesian geometry by default, because that's the usual requirement. You have the option of telling Npgsql to send geography instead by specifying NpgsqlDbType.Geography : using (var cmd = new NpgsqlCommand(\"INSERT INTO data (geog) VALUES (@p)\", conn)) { cmd.Parameters.AddWithValue(\"@p\", NpgsqlDbType.Geography, point); cmd.ExecuteNonQuery(); } If you prefer to use geography everywhere by default, you can also specify that when setting up the plugin: NpgsqlConnection.GlobalTypeMapper.UseNetTopologySuite(geographyAsDefault: true);"
  },
  "doc/types/nodatime.html": {
    "href": "doc/types/nodatime.html",
    "title": "NodaTime Type Plugin | Npgsql Documentation",
    "keywords": "NodaTime Type Plugin Since 4.0, Npgsql supports type plugins , which are external nuget packages that modify how Npgsql maps PostgreSQL values to CLR types. One of these is the NodaTime plugin, which makes Npgsql read and write NodaTime types. The NodaTime plugin is now the recommended way to interact with PostgreSQL date/time types, and isn't the default only because of the added dependency on the NodaTime library. What is NodaTime? By default, the PostgreSQL date/time types are mapped to the built-in .NET types ( DateTime , TimeSpan ). Unfortunately, these built-in types are flawed in many ways. The NodaTime library was created to solve many of these problems, and if your application handles dates and times in anything but the most basic way, you should consider using it. To learn more read this blog post by Jon Skeet . Beyond NodaTime's general advantages, some specific advantages NodaTime for PostgreSQL date/time mapping include: NodaTime defines some types which are missing from the BCL, such as LocalDate , LocalTime , and OffsetTime . These cleanly correspond to PostgreSQL date , time and timetz . Period is much more suitable for mapping PostgreSQL interval than TimeSpan . NodaTime types can fully represent PostgreSQL's microsecond precision, and can represent dates outside the BCL's date limit (1AD-9999AD). Setup To use the NodaTime plugin, simply add a dependency on Npgsql.NodaTime and set it up: using Npgsql; // Place this at the beginning of your program to use NodaTime everywhere (recommended) NpgsqlConnection.GlobalTypeMapper.UseNodaTime(); // Or to temporarily use NodaTime on a single connection only: conn.TypeMapper.UseNodaTime(); Reading and Writing Values Once the plugin is set up, you can transparently read and write NodaTime objects: // Write NodaTime Instant to PostgreSQL \"timestamp without time zone\" using (var cmd = new NpgsqlCommand(@\"INSERT INTO mytable (my_timestamp) VALUES (@p)\", conn)) { cmd.Parameters.Add(new NpgsqlParameter(\"p\", Instant.FromUtc(2011, 1, 1, 10, 30))); cmd.ExecuteNonQuery(); } // Read timestamp back from the database as an Instant using (var cmd = new NpgsqlCommand(@\"SELECT my_timestamp FROM mytable\", conn)) using (var reader = cmd.ExecuteReader()) { reader.Read(); var instant = reader.GetFieldValue<Instant>(0); } Mapping Table Warning A common mistake is for users to think that the PostgreSQL timestamp with timezone type stores the timezone in the database. This is not the case: only the t imestamp is stored. There is no single PostgreSQL type that stores both a date/time and a timezone, similar to .NET DateTimeOffset . PostgreSQL Type Default NodaTime Type Additional NodaTime Type Notes timestamp Instant LocalDateTime It's common to store UTC timestamps in databases - you can simply do so and read/write Instant values. You also have the option of readin/writing LocalDateTime, which is a date/time with no information about timezones; this makes sense if you're storing the timezone in a different column and want to read both into a NodaTime ZonedDateTime. timestamp with time zone Instant ZonedDateTime, OffsetDateTime This PostgreSQL type stores only a timestamp, assumed to be in UTC. If you read/write this as an Instant, it will be provided as stored with no timezone conversions whatsoever. If, however, you read/write as a ZonedDateTime or OffsetDateTime, the plugin will automatically convert to and from UTC according to your PostgreSQL session's timezone. date LocalDate A simple date with no timezone or offset information. time LocalTime A simple time-of-day, with no timezone or offset information. time with time zone OffsetTime This is a PostgreSQL type that stores a time and an offset. interval Period This is a human interval which does not have a fixed absolute length (\"two months\" can vary depending on the months in question), and so it is mapped to NodaTime's Period (and not Duration or TimeSpan). Additional Notes The plugin automatically converts timestamp with time zone to and from your PostgreSQL session's configured timezone; this is unlike Npgsql's default mapping which uses your machine's local timezone instead. The NodaTime plugin behavior matches the regular PostgreSQL behavior when interacting with timestamptz values. To read and write timestamp or date infinity values, set the Convert Infinity DateTime connection string parameter to true and read/write MaxValue/MinValue."
  },
  "doc/index.html": {
    "href": "doc/index.html",
    "title": "Documentation | Npgsql Documentation",
    "keywords": "Getting Started The best way to use Npgsql is to install its nuget package . Npgsql aims to be fully ADO.NET-compatible, its API should feel almost identical to other .NET database drivers. Here's a basic code snippet to get you started. var connString = \"Host=myserver;Username=mylogin;Password=mypass;Database=mydatabase\"; await using var conn = new NpgsqlConnection(connString); await conn.OpenAsync(); // Insert some data await using (var cmd = new NpgsqlCommand(\"INSERT INTO data (some_field) VALUES (@p)\", conn)) { cmd.Parameters.AddWithValue(\"p\", \"Hello world\"); await cmd.ExecuteNonQueryAsync(); } // Retrieve all rows await using (var cmd = new NpgsqlCommand(\"SELECT some_field FROM data\", conn)) await using (var reader = await cmd.ExecuteReaderAsync()) while (await reader.ReadAsync()) Console.WriteLine(reader.GetString(0)); You can find more info about the ADO.NET API in the MSDN docs or in many tutorials on the Internet."
  },
  "doc/ddex.html": {
    "href": "doc/ddex.html",
    "title": "Visual Studio Integration | Npgsql Documentation",
    "keywords": "Visual Studio Integration Npgsql has a Visual Studio extension (VSIX) which integrates PostgreSQL access into Visual Studio. It allows connecting to PostgreSQL from within Visual Studio's Server Explorer, create an Entity Framework 6 model from an existing database, etc. The extension can be installed directly from the Visual Studio Marketplace page . The VSIX doesn't automatically add Npgsql to your GAC, App.config , machines.config or any other project or system-wide resource. It only allows accessing PostgreSQL from Visual Studio itself. Visual Studio Compatibility The VSIX extension has been tested and works on Visual Studio 2015, 2017 and 2019. It is probably compatible with versions all the way back to 2012, but these haven't been tested. Note that installing into pre-2015 versions will display a warning, although it should be safe to proceed. Upgrading from an older version Note that the extension has been pretty much rewritten for Npgsql 3.2 - if you encountered installation issues with previous versions, these issues should hopefully be gone. A summary of work done for 3.2 is available here . If you already have an earlier version of the VSIX (or MSI) installed, it's highly recommended that you uninstall them to avoid conflicts. It is no longer necessary or recommended to have Npgsql in your GAC, or to have Npgsql listed in your machines.config. Simply installing the VSIX should work just fine, and a GAC/machines.config may actually cause issues. If you previously installed Npgsql into your GAC/machines.config, it's recommended you uninstall it. If you have any entries (binding redirects, DbProviderFactory registrations) in either your machines.config or in your Visual Studio setup (e.g. App.config, devenv.exe.config ), please remove them The VSIX should work on a totally clean setup. Features The provider isn't feature complete - please let us know of missing features or bugs by opening issues. Server Explorer You can add a PostgreSQL database in Server Explorer, explore tables and columns, send ad-hoc queries, etc. Entity Framework 6 The extension supports generating a model from an existing database. To do so, install EntityFramework6.Npgsql into your project, and then make sure you have the same version of Npgsql as your extension does. A mismatch between the version installed in your project and the VSIX's may cause issues. Development Development on the VSIX is currently possible only on Visual Studio 2017, 2019. Be sure to install the \"Visual Studio extension development\" workload."
  },
  "doc/transactions.html": {
    "href": "doc/transactions.html",
    "title": "Transactions | Npgsql Documentation",
    "keywords": "Transactions Basic Transactions Transactions can be started by calling the standard ADO.NET method NpgsqlConnection.BeginTransaction() . PostgreSQL doesn't support nested or concurrent transactions - only one transaction may be in progress at any given moment. Calling BeginTransaction() while a transaction is already in progress will throw an exception. Because of this, it isn't necessary to pass the NpgsqlTransaction object returned from BeginTransaction() to commands you execute - calling BeginTransaction() means that all subsequent commands will automatically participate in the transaction, until either a commit or rollback is performed. However, for maximum portability it's recommended to set the transaction on your commands. Although concurrent transactions aren't supported, PostgreSQL supports the concept of savepoints - you may set named savepoints in a transaction and roll back to them later without rolling back the entire transaction. Savepoints can be created, rolled back to, and released via NpgsqlTransaction.Save(name) , NpgsqlTransaction.Rollback(name) and NpgsqlTransaction.Release(name) respectively. See the PostgreSQL documentation for more details. . When calling BeginTransaction() , you may optionally set the isolation level . See the docs for more details. System.Transactions and Distributed Transactions In addition to DbConnection.BeginTransaction() , .NET includes System.Transactions, an alternative API for managing transactions - read the MSDN docs to understand the concepts involved . Npgsql fully supports this API, and starting with version 3.3 will automatically enlist to ambient TransactionScopes (you can disable enlistment by specifying Enlist=false in your connection string). When more than one connection (or resource) enlists in the same transaction, the transaction is said to be distributed . Distributed transactions allow you to perform changes atomically across more than one database (or resource) via a two-phase commit protocol - here is the MSDN documentation . Npgsql supports distributed transactions - support has been rewritten for version 3.2, fixing many previous issues. However, at this time Npgsql enlists as a volatile resource manager , meaning that if your application crashes while performing, recovery will not be managed properly. For more information about this, see this page and the related ones . If you would like to see better distributed transaction recovery (i.e. durable resource manager enlistment), please say so on this issue and subscribe to it for updates. Note that if you open and close connections to the same database inside an ambient transaction, without ever having two connections open at the same time , Npgsql will internally reuse the same connection, avoiding the escalation to a full-blown distributed transaction. This is better for performance and for general simplicity."
  },
  "efcore/mapping/array.html": {
    "href": "efcore/mapping/array.html",
    "title": "Array Type Mapping | Npgsql Documentation",
    "keywords": "Array Type Mapping PostgreSQL has the unique feature of supporting array data types . This allow you to conveniently and efficiently store several values in a single column, where in other database you'd typically resort to concatenating the values in a string or defining another table with a one-to-many relationship. Note Although PostgreSQL supports multidimensional arrays, these aren't yet supported by the EF Core provider. Mapping arrays Simply define a regular .NET array or List<> property, and the provider public class Post { public int Id { get; set; } public string Name { get; set; } public string[] Tags { get; set; } public List<string> AlternativeTags { get; set; } } The provider will create text[] columns for the above two properties, and will properly detect changes in them - if you load an array and change one of its elements, calling SaveChanges() will automatically update the row in the database accordingly. Operation translation The provider can also translate CLR array operations to the corresponding SQL operation; this allows you to efficiently work with arrays by evaluating operations in the database and avoids pulling all the data. The following table lists the range operations that currently get translated. If you run into a missing operation, please open an issue. Note that operation translation on List<> is limited at this time, but will be improved in the future. It's recommended to use an array for now. C# expression SQL generated by Npgsql .Where(c => c.SomeArray[1] == \"foo\") WHERE \"c\".\"SomeArray\"[1] = 'foo' .Where(c => c.SomeArray.SequenceEqual(new[] { 1, 2, 3 }) WHERE \"c\".\"SomeArray\" = ARRAY[1, 2, 3]) .Where(c => c.SomeArray.Contains(3)) WHERE 3 = ANY(\"c\".\"SomeArray\") .Where(c => c.SomeArray.Length == 3) WHERE cardinality(\"c\".\"SomeArray\") = 3"
  },
  "efcore/mapping/general.html": {
    "href": "efcore/mapping/general.html",
    "title": "Type mapping | Npgsql Documentation",
    "keywords": "Type mapping The EF Core provider transparently maps the types supported by Npgsql at the ADO.NET level - see the Npgsql ADO type mapping page . This means that you can use PostgreSQL-specific types, such as inet or circle , directly in your entities. Simply define your properties just as if they were a simple type, such as a string : public class MyEntity { public int Id { get; set; } public string Name { get; set; } public IPAddress IPAddress { get; set; } public NpgsqlCircle Circle { get; set; } public int[] SomeInts { get; set; } } Special types such as arrays and enums have their own documentation pages with more details. PostgreSQL composite types , while supported at the ADO.NET level, aren't yet supported in the EF Core provider. This is tracked by #22 . Explicitly specifying data types In some cases, your .NET property type can be mapped to several PostgreSQL data types; a good example is a string , which will be mapped to text by default, but can also be mapped to jsonb . You can explicitly specify the PostgreSQL data type by adding the following to your model's OnModelCreating : builder.Entity<Blog>() .Property(b => b.SomeStringProperty) .HasColumnType(\"jsonb\"); Or, if you prefer annotations, use a ColumnAttribute : [Column(TypeName=\"jsonb\")] public string SomeStringProperty { get; set; } Operation translation to SQL Entity Framework Core allows providers to translate query expressions to SQL for database evaluation. For example, PostgreSQL supports regular expression operations , and the Npgsql EF Core provider automatically translates .NET's Regex.IsMatch() to use this feature. Since evaluation happens at the server, table data doesn't need to be transferred to the client (saving bandwidth), and in some cases indexes can be used to speed things up. The same C# code on other providers will trigger client evaluation. Below are some Npgsql-specific translations, many additional standard ones are supported as well. See the other pages in the mapping section for more supported types and operations. C# expression SQL generated by Npgsql .Where(c => Regex.IsMatch(c.Name, \"^A+\") WHERE \"c\".\"Name\" ~ '^A+' .Where(c => EF.Functions.Like(c.Name, \"foo%\") WHERE \"c\".\"Name\" LIKE 'foo%' .Where(c => EF.Functions.ILike(c.Name, \"foo%\") WHERE \"c\".\"Name\" ILIKE 'foo%' (case-insensitive LIKE) .Select(c => EF.Functions.ToTsVector(\"english\", c.Name)) SELECT to_tsvector('english'::regconfig, \"c\".\"Name\") .Select(c => EF.Functions.ToTsQuery(\"english\", \"pgsql\")) SELECT to_tsquery('english'::regconfig, 'pgsql') .Where(c => c.SearchVector.Matches(\"Npgsql\")) WHERE \"c\".\"SearchVector\" @@ 'Npgsql' .Select(c => EF.Functions.ToTsQuery(c.SearchQuery).ToNegative()) SELECT (!! to_tsquery(\"c\".\"SearchQuery\")) .Select(c => EF.Functions.ToTsVector(c.Name).SetWeight(NpgsqlTsVector.Lexeme.Weight.A)) SELECT setweight(to_tsvector(\"c\".\"Name\"), 'A')"
  },
  "efcore/mapping/json.html": {
    "href": "efcore/mapping/json.html",
    "title": "JSON Mapping | Npgsql Documentation",
    "keywords": "JSON Mapping PostgreSQL has rich, built-in support for storing JSON columns and efficiently performing complex queries operations on them. Newcomers can read more about the PostgreSQL support on the JSON types page , and on the functions and operators page . Note that the below mapping mechanisms support both the jsonb and json types, although the former is almost always preferred for efficiency reasons. The Npgsql EF Core provider allows you to map PostgreSQL JSON columns in three different ways: As simple strings As strongly-typed user-defined types (POCOs) As System.Text.Json DOM types (JsonDocument or JsonElement) Note Mapping to POCO or to System.Text.Json types was introduced in version 3.0.0 String mapping The simplest form of mapping to JSON is via a regular string property, just like an ordinary text column: Data Annotations Fluent API public class SomeEntity { public int Id { get; set; } [Column(TypeName = \"jsonb\")] public string Customer { get; set; } } class MyContext : DbContext { public DbSet<SomeEntity> SomeEntities { get; set; } protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<SomeEntity>() .Property(b => b.Customer) .HasColumnType(\"jsonb\"); } } public class SomeEntity { public int Id { get; set; } public Customer Customer { get; set; } } With string mapping, the EF Core provider will save and load properties to database JSON columns, but will not do any further serialization or parsing - it's the developer's responsibility to handle the JSON contents, possibly using System.Text.Json to parse them. This mapping approach is more limited compared to the others. POCO mapping If your column's JSON documents have a stable schema, you can map them to your own .NET types (or POCOs). The provider will use the new System.Text.Json APIs under the hood to serialize instances to JSON documents before sending them to the database, and to deserialize documents coming from the database back. Just like EF Core can map a .NET type to rows in the table, this capability allows you to map a .NET type to a single JSON column. Mapping POCOs is extremely easy: simply add a property with your custom POCO type and instruct the provider to map it to JSON: Data Annotations Fluent API public class SomeEntity { public int Id { get; set; } [Column(TypeName = \"jsonb\")] public Customer Customer { get; set; } } public class Customer // Mapped to a JSON column in the table { public string Name { get; set; } public int Age { get; set; } public Order[] Orders { get; set; } } public class Order // Part of the JSON column { public decimal Price { get; set; } public string ShippingAddress { get; set; } } class MyContext : DbContext { public DbSet<SomeEntity> SomeEntities { get; set; } protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<SomeEntity>() .Property(b => b.Customer) .HasColumnType(\"jsonb\"); } } public class SomeEntity // Mapped to a database table { public int Id { get; set; } public Customer Customer { get; set; } } public class Customer // Mapped to a JSON column in the table { public string Name { get; set; } public int Age { get; set; } public Order[] Orders { get; set; } } public class Order // Part of the JSON column { public decimal Price { get; set; } public string ShippingAddress { get; set; } } You can now assign a regular Customer instance to the property, and once you call SaveChanges() it will be serialized to database, producing a document such as the following: { \"Age\": 25, \"Name\": \"Joe\", \"Orders\": [ {\"Price\": 9, \"ShippingAddress\": \"Some address 1\"}, {\"Price\": 23, \"ShippingAddress\": \"Some address 2\"} ] } Reading is just as simple: var someEntity = context.Entities.First(); Console.WriteLine(someEntity.Customer.Orders[0].Price) This provides a seamless mapping approach, and supports embedding nested types and arrays, resulting in complex JSON document schemas as shown above. This approach also allows you to traverse loaded JSON documents in a type-safe way, using regular C# syntax, and to use LINQ to query inside database JSON documents (see Querying JSON columns below). JsonDocument DOM mapping If your column JSON schema isn't stable, a strongly-typed POCO mapping may not be appropriate. The Npgsql provider also allows you to map the DOM document type provided by System.Text.Json APIs . public class SomeEntity { public int Id { get; set; } public JsonDocument Customer { get; set; } } Note that neither a data annotation nor the fluent API are required, as JsonDocument is automatically recognized and mapped to jsonb . Once a document is loaded from the database, you can traverse it: var someEntity = context.Entities.First(); Console.WriteLine(someEntity.Customer.GetProperty(\"Orders\")[0].GetProperty(\"Price\").GetInt32()); Querying JSON columns Saving and loading documents these documents wouldn't be much use without the ability to query them. You can express your queries via the same LINQ constructs you are already using in EF Core: POCO Mapping JsonDocument Mapping var joes = context.CustomerEntries .Where(e => e.Customer.Name == \"Joe\") .ToList(); var joes = context.CustomerEntries .Where(e => e.Customer.GetProperty(\"Name\").GetString() == \"Joe\") .ToList(); The provider will recognize the traversal of a JSON document, and translate it to the correspond PostgreSQL JSON traversal operator, producing the following PostgreSQL-specific SQL: SELECT c.\"\"Id\"\", c.\"\"Customer\"\" FROM \"\"CustomerEntries\"\" AS c WHERE c.\"\"Customer\"\"->>'Name' = 'Joe' If indexes are set up properly , this can result in very efficient, server evaluation of searches with database JSON documents. The following expression types and functions are translated: POCO Mapping JsonDocument Mapping C# expression SQL generated by Npgsql .Where(e => e.Customer.Name == \"Joe\") WHERE \"Customer\"->>'Name' = 'Joe' .Where(e => e.Customer.Orders[1].Price = 8) WHERE \"Customer\"#>>'{Orders,0,Price}'[1] = 8 .Where(e => e.Customer.Orders.Length == 2) WHERE jsonb_array_length(\"Customer\"->'Orders' = 2 .Where(e => EF.Functions.JsonContains(e.Customer, @\"{\"\"Name\"\": \"\"Joe\"\", \"\"Age\"\": 25}\") WHERE \"Customer\" @> '{\"Name\": \"Joe\", \"Age\": 25}' .Where(e => EF.Functions.JsonContained(@\"{\"\"Name\"\": \"\"Joe\"\", \"\"Age\"\": 25}\", e.Customer) WHERE '{\"Name\": \"Joe\", \"Age\": 25}' <@ \"Customer\" .Where(e => EF.Functions.JsonExists(e.Customer, \"Age\") WHERE \"Customer\" ? 'Age' .Where(e => EF.Functions.JsonExistsAny(e.Customer, \"Age\", \"Address\") WHERE \"Customer\" ?\\| ARRAY['Age','Address'] .Where(e => EF.Functions.JsonExistsAll(e.Customer, \"Age\", \"Address\") WHERE \"Customer\" ?& ARRAY['Age','Address'] .Where(e => EF.Functions.JsonTypeof(e.Customer.Age) WHERE jsonb_typeof(\"Customer\"->'Age') C# expression SQL generated by Npgsql .Where(e => e.Customer.GetProperty(\"Name\").GetString() == \"Joe\") WHERE \"Customer\"->>'Name' = 'Joe' .Where(e => e.Customer.GetProperty(\"Orders\")[1].GetProperty(\"Price\").GetInt32() = 8) WHERE \"Customer\"#>>'{Orders,0,Price}'[1] = 8 .Where(e => e.Customer.GetProperty(\"Orders\").GetArrayLength() == 2) WHERE jsonb_array_length(\"Customer\"->'Orders' = 2 .Where(e => EF.Functions.JsonContains(e.Customer, @\"{\"\"Name\"\": \"\"Joe\"\", \"\"Age\"\": 25}\") WHERE \"Customer\" @> '{\"Name\": \"Joe\", \"Age\": 25}' .Where(e => EF.Functions.JsonContained(@\"{\"\"Name\"\": \"\"Joe\"\", \"\"Age\"\": 25}\", e.Customer) WHERE '{\"Name\": \"Joe\", \"Age\": 25}' <@ \"Customer\" .Where(e => EF.Functions.JsonExists(e.Customer, \"Age\") WHERE \"Customer\" ? 'Age' .Where(e => EF.Functions.JsonExistsAny(e.Customer, \"Age\", \"Address\") WHERE \"Customer\" ?\\| ARRAY['Age','Address'] .Where(e => EF.Functions.JsonExistsAll(e.Customer, \"Age\", \"Address\") WHERE \"Customer\" ?& ARRAY['Age','Address'] .Where(e => EF.Functions.JsonTypeof(e.Customer.GetProperty(\"Age\")) WHERE jsonb_typeof(\"Customer\"->'Age') Indexing JSON columns Note A section on indices will be added. In the meantime consult the PostgreSQL documentation and other guides on the Internet. These are early days for EF Core JSON support, and you'll likely run into some limitations. Please let us know how the current features are working for you and what you'd like to see."
  },
  "efcore/mapping/range.html": {
    "href": "efcore/mapping/range.html",
    "title": "Range Type Mapping | Npgsql Documentation",
    "keywords": "Range Type Mapping PostgreSQL has the unique feature of supporting range data types . Ranges represent a range of numbers, dates or other data types, and allow you to easily query ranges which contain a value, perform set operations (e.g. query ranges which contain other ranges), and other similar operations. The range operations supported by PostgreSQL are listed in this page . The Npgsql EF Core provider allows you to seemlessly map PostgreSQL ranges, and even perform operations on them that get translated to SQL for server evaluation. Mapping ranges Npgsql maps PostgreSQL ranges to the generic CLR type NpgqslRange<T> : public class Event { public int Id { get; set; } public string Name { get; set; } public NpgsqlRange<DateTime> Duration { get; set; } } This will create a column of type daterange in your database. You can similarly have properties of type NpgsqlRange<int> , NpgsqlRange<long> , etc. User-defined ranges Note This feature was introduced in version 2.2 PostgreSQL comes with 6 built-in ranges: int4range , int8range , numrange , tsrange , tstzrange , daterange ; these can be used simply by adding the appropriate NpgsqlRange<T> property in your entities as shown above. You can also define your own range types over arbitrary types, and use those in EF Core as well. To make the EF Core type mapper aware of your user-defined range, call the MapRange() method in your context's OnConfiguring() method as follows: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql( \"<connection_string>\", options => options.MapRange<float>(\"floatrange\")); This allows you to have properties of type NpgsqlRange<float> , which will be mapped to PostgreSQL floatrange . The above does not create the floatrange type for you. In order to do that, include the following in your context's OnModelCreating() : protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.HasPostgresRange(\"floatrange\", \"real\"); This will cause the appropriate CREATE TYPE ... AS RANGE statement to be generated in your migrations, ensuring that your range is created and ready for use. Note that HasPostgresRange() supports additional parameters as supported by PostgreSQL CREATE TYPE . Operation translation Ranges can be queried via extensions methods on NpgsqlRange : var events = context.Events.Where(p => p.Duration.Contains(someDate)); This will translate to an SQL operation using the PostgreSQL @> operator, evaluating at the server and saving you from transfering the entire Events table to the client. Note that you can (and probably should) create indexes to make this operation more efficient, see the PostgreSQL docs for more info. The following table lists the range operations that currently get translated. If you run into a missing operation, please open an issue. C# expression SQL generated by Npgsql .Where(c => c.SomeRange.Contains(3)) WHERE x.\"SomeRange\" @> 3 .Where(c => c.SomeRange.Contains(otherRange)) WHERE x.\"SomeRange\" @> @__otherRange_0 .Where(c => c.SomeRange.ContainedBy(otherRange)) WHERE x.\"SomeRange\" <@ @__otherRange_0 .Where(c => c.SomeRange == otherRange) WHERE x.\"SomeRange\" = @__otherRange_0 .Where(c => c.SomeRange != otherRange) WHERE x.\"SomeRange\" <> @__otherRange_0 .Where(c => c.SomeRange.Overlaps(otherRange)) WHERE x.\"SomeRange\" && @__otherRange_0 .Where(c => c.SomeRange.IsStrictlyLeftOf(otherRange)) WHERE x.\"SomeRange\" << @__otherRange_0 .Where(c => c.SomeRange.IsStrictlyRightOf(otherRange)) WHERE x.\"SomeRange\" >> @__otherRange_0 .Where(c => c.SomeRange.DoesNotExtendLeftOf(otherRange)) WHERE x.\"SomeRange\" &> @__otherRange_0 .Where(c => c.SomeRange.DoesNotExtendRightOf(otherRange)) WHERE x.\"SomeRange\" <& @__otherRange_0 .Where(c => c.SomeRange.IsAdjacentTo(otherRange)) WHERE x.\"SomeRange\" -\\|- @__otherRange_0 .Select(c => c.SomeRange.Union(otherRange)) SELECT x.\"SomeRange\" + @__otherRange_0 .Select(c => c.SomeRange.Intersect(otherRange)) SELECT x.\"SomeRange\" * @__otherRange_0 .Select(c => c.SomeRange.Except(otherRange)) SELECT x.\"SomeRange\" - @__otherRange_0"
  },
  "efcore/mapping/nts.html": {
    "href": "efcore/mapping/nts.html",
    "title": "Spatial Mapping with NetTopologySuite | Npgsql Documentation",
    "keywords": "Spatial Mapping with NetTopologySuite Note It's recommended that you start by reading the general Entity Framework Core docs on spatial support . PostgreSQL supports spatial data and operations via the PostGIS extension , which is a mature and feature-rich database spatial implementation. .NET doesn't provide a standard spatial library, but NetTopologySuite is quite a good candidate. The Npgsql EF Core provider has a plugin which allows you to map NetTopologySuite's types PostGIS columns, and even translate many useful spatial operations to SQL. This is the recommended way to interact with spatial types in Npgsql. Note that the EF Core NetTopologySuite plugin depends on the Npgsql ADO.NET NetTopology plugin , which provides NetTopologySuite support at the lower level. The EF Core plugin automatically arranged for the ADO.NET plugin to be set up. Setup To set up the NetTopologySuite plugin, add the Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite nuget to your project. Then, make the following modification to your UseNpgsql() line: protected override void OnConfiguring(DbContextOptionsBuilder builder) { builder.UseNpgsql(\"Host=localhost;Database=test;Username=npgsql_tests;Password=npgsql_tests\", o => o.UseNetTopologySuite()); } This will set up all the necessary mappings and operation translators. In addition, to make sure that the PostGIS extension is installed in your database, add the following to your DbContext: protected override void OnModelCreating(ModelBuilder builder) { builder.HasPostgresExtension(\"postgis\"); } At this point spatial support is set up. You can now use NetTopologySuite types as regular properties in your entities, and even perform some operations: public class City { public int Id { get; set; } public string Name { get; set; } public Point Location { get; set; } } var nearbyCities = context.Cities.Where(c => c.Location.Distance(somePoint) < 100); Constraining your type names With the code above, the provider will create a database column of type geometry . This is perfectly fine, but be aware that this type accepts any geometry type (point, polygon...), with any coordinate system (XY, XYZ...). It's good practice to constrain the column to the exact type of data you will be storing, but unfortunately the provider isn't aware of your required coordinate system and therefore can't do that for you. Consider explicitly specifying your column types on your properties as follows: [Column(TypeName=\"geometry (point)\")] public Point Location { get; set; } This will constrain your column to XY points only. The same can be done via the fluent API with HasColumnType() . Operation translation The following table lists NetTopologySuite operations which are translated to PostGIS SQL operations. This allows you to use these NetTopologySuite methods and members efficiently - evaluation will happen on the server side. Since evaluation happens at the server, table data doesn't need to be transferred to the client (saving bandwidth), and in some cases indexes can be used to speed things up. Note that the plugin is far from covering all spatial operations. If an operation you need is missing, please open an issue to request for it. This C# expression... ... gets translated to this SQL .Where(c => c.Polygon.Area() > x) WHERE ST_Area(c.\"Polygon\") > x .Where(c => c.Polygon.AsText() = x WHERE ST_AsText(c.\"Polygon\") = x .Where(c => c.Polygon.Boundary = x WHERE ST_AsCoundary(c.\"Polygon\") = x .Where(c => c.Polygon.Contains(x)) WHERE ST_Contains(c.\"Polygon\", x) .Where(c => c.Polygon.Covers(x)) WHERE ST_Covers(c.\"Polygon\", x) .Where(c => c.Polygon.CoveredBy(x)) WHERE ST_CoveredBy(c.\"Polygon\", x) .Where(c => c.Polygon.Crosses(x)) WHERE ST_Crosses(c.\"Polygon\", x) .Where(c => c.Polygon.Difference(x) = y) WHERE ST_Difference(c.\"Polygon\", x) = y .Where(c => c.Polygon.Disjoint(x)) WHERE ST_Disjoint(c.\"Polygon\", x) .Where(c => c.Point.Distance(x) > y) WHERE ST_Distance(c.\"Polygon\", x) > y .Where(c => c.Polygon.Equals(x)) WHERE c.\"Polygon\" = x .Where(c => c.Polygon.EqualsExact(x)) WHERE c.\"Polygon\" = x .Where(c => c.Polygon.EqualsTopologically(x)) WHERE ST_Equals(c.\"Polygon\", x) .Where(c => c.Geometry.GeometryType() = x) WHERE GeometryType(c.\"GeomCollection\") = x .Where(c => c.GeomCollection.GetGeometryN(2) = x) WHERE ST_GeometryN(c.\"GeomCollection\", 3) = x .Where(c => c.Polygon.Intersection(x) = y) WHERE ST_Intersection(c.\"Polygon\", x) = y .Where(c => c.Polygon.Intersects(x)) WHERE ST_Intersects(c.\"Polygon\", x) .Where(c => c.LineString.IsClosed()) WHERE ST_IsClosed(c.\"LineString\") .Where(c => c.GeomCollection.IsEmpty()) WHERE ST_IsEmpty(c.\"GeomCollection\") .Where(c => c.Polygon.IsSimple()) WHERE ST_IsSimple(c.\"Polygon\") .Where(c => c.Polygon.IsValid()) WHERE ST_IsValid(c.\"Polygon\") .Where(c => c.LineString.Length > x) WHERE ST_Length(c.\"LineString\") > x .Where(c => c.GeomCollection.NumGeometries > x) WHERE ST_NumGeometries(c.\"GeomCollection\") > x .Where(c => c.LineString.NumPoints > x) WHERE ST_NumPoints(c.\"LineString\") > x .Where(c => c.Polygon.Overlaps(x)) WHERE ST_Overlaps(c.\"Polygon\", x) .Where(c => c.Polygon.Relate(x) == y) WHERE ST_Relate(c.\"Polygon\", x) = y .Where(c => c.LineString.Reverse() == x) WHERE ST_Reverse(c.\"Polygon\") = x .Where(c => c.Polygon.SymmetricDifference(x) == y) WHERE ST_SymDifference(c.\"Polygon\", x) = y .Where(c => c.Polygon.Touches(x)) WHERE ST_Touches(c.\"Polygon\", x) .Where(c => c.Polygon.ToText() = x) WHERE ST_AsText(c.\"Polygon\") = x .Where(c => c.Polygon.Union(x) = y) WHERE ST_Union(c.\"Polygon\", x) = y .Where(c => c.Polygon.Within(x)) WHERE ST_Within(c.\"Polygon\", x) .Where(c => c.Point.X == 3) WHERE ST_X(c.\"Point\") = 3 .Where(c => c.Point.Y == 3) WHERE ST_Y(c.\"Point\") = 3 .Where(c => c.Point.Z == 3) WHERE ST_Z(c.\"Point\") = 3 Geography (geodetic) support PostGIS has two types: geometry (for Cartesian coordinates) and geography (for geodetic or spherical coordinates). You can read about the geometry/geography distinction in the PostGIS docs or in this blog post . In a nutshell, geography is much more accurate when doing calculations over long distances, but is more expensive computationally and supports only a small subset of the spatial operations supported by geometry . The Npgsql provider will be default map all NetTopologySuite types to PostGIS geometry . However, you can instruct it to map certain properties to geography instead: protected override void OnModelCreating(ModelBuilder builder) { builder.Entity<City>().Property(b => b.Location).HasColumnType(\"geography (point)\"); } or via an attribute: public class City { public int Id { get; set; } public string Name { get; set; } [Column(TypeName=\"geography\")] public Point Location { get; set; } } Once you do this, your column will be created as geography , and spatial operations will behave as expected."
  },
  "efcore/mapping/enum.html": {
    "href": "efcore/mapping/enum.html",
    "title": "Enum Type Mapping | Npgsql Documentation",
    "keywords": "Enum Type Mapping By default, any enum properties in your model will be mapped to database integers. EF Core 2.1 also allows you to map these to strings in the database with value converters. However, the Npgsql provider also allows you to map your CLR enums to database enum types . This option, unique to PostgreSQL, provides the best of both worlds: the enum is internally stored in the database as a number (minimal storage), but is handled like a string (more usable, no need to remember numeric values) and has type safety. Creating your database enum First, you must specify the PostgreSQL enum type on your model, just like you would with tables, sequences or other databases objects: Version 2.2 Version 2.1 protected override void OnModelCreating(ModelBuilder builder) => builder.HasPostgresEnum<Mood>(); protected override void OnModelCreating(ModelBuilder builder) => builder.HasPostgresEnum(\"Mood\", new[] { \"happy\", \"sad\" }); This causes the EF Core provider to create your data enum type, Mood , with two labels: happy and sad . This will cause the appropriate migration to be created. Mapping your enum Even if your database enum is created, Npgsql has to know about it, and especially about your CLR enum type that should be mapped to it. This is done by adding the following code, before any EF Core operations take place. An appropriate place for this is in the static constructor on your DbContext class: static MyDbContext() => NpgsqlConnection.GlobalTypeMapper.MapEnum<Mood>(); This code lets Npgsql know that your CLR enum type, Mood , should be mapped to a database enum called Mood . If you're curious as to inner workings, this code maps the enum with the ADO.NET provider - see here for the full docs . When the Npgsql EF Core first initializes, it calls into the ADO.NET provider to get all mapped enums, and sets everything up internally at the EF Core layer as well. Using enum properties Once your enum is mapped and created in the database, you can use your CLR enum type just like any other property: public class Blog { public int Id { get; set; } public Mood Mood { get; set; } } using (var ctx = new MyDbContext()) { // Insert ctx.Blogs.Add(new Blog { Mood = Mood.Happy }); ctx.Blogs.SaveChanges(); // Query var blog = ctx.Blogs.Single(b => b.Mood == Mood.Happy); } Altering enum definitions Although PostgreSQL allows altering enum types , the Npgsql provider currently does not generate SQL for those operations (beyond creating and dropping the entire type). If you to add, remove or rename enum values, you'll have to include raw SQL in your migrations (this is quite easy to do). As always, test your migrations carefully before running them on production databases. Scaffolding from an existing database If you're creating your model from an existing database, the provider will recognize enums in your database, and scaffold the appropriate HasPostgresEnum() lines in your model. However, since the scaffolding process has no knowledge of your CLR type, and will therefore skip your enum columns (warnings will be logged). You will have to create the CLR type, add the global mapping and add the properties to your entities. In the future it may be possible to scaffold the actual enum type (and with it the properties), but this doesn't happen at the moment."
  },
  "efcore/mapping/nodatime.html": {
    "href": "efcore/mapping/nodatime.html",
    "title": "Date/Time Mapping with NodaTime | Npgsql Documentation",
    "keywords": "Date/Time Mapping with NodaTime What is NodaTime? By default, the PostgreSQL date/time types are mapped to the built-in .NET types ( DateTime , TimeSpan ). Unfortunately, these built-in types are flawed in many ways. The NodaTime library was created to solve many of these problems, and if your application handles dates and times in anything but the most basic way, you should consider using it. To learn more read this blog post by Jon Skeet . Beyond NodaTime's general advantages, some specific advantages NodaTime for PostgreSQL date/time mapping include: NodaTime defines some types which are missing from the BCL, such as LocalDate , LocalTime , and OffsetTime . These cleanly correspond to PostgreSQL date , time and timetz . Period is much more suitable for mapping PostgreSQL interval than TimeSpan . NodaTime types can fully represent PostgreSQL's microsecond precision, and can represent dates outside the BCL's date limit (1AD-9999AD). Setup To set up the NodaTime plugin, add the Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime nuget to your project. Then, make the following modification to your UseNpgsql() line: protected override void OnConfiguring(DbContextOptionsBuilder builder) { builder.UseNpgsql(\"Host=localhost;Database=test;Username=npgsql_tests;Password=npgsql_tests\", o => o.UseNodaTime()); } This will set up all the necessary mappings and operation translators. You can now use NodaTime types as regular properties in your entities, and even perform some operations: public class Post { public int Id { get; set; } public string Name { get; set; } public Instant CreationTime { get; set; } } var recentPosts = context.Posts.Where(p => p.CreationTime > someInstant); Member translation Currently, the EF Core provider knows how to translate the most date/time component members of NodaTime's LocalDateTime , LocalDate , LocalTime and Period . In other words, the following query will be translated to SQL and evaluated server-side: // Get all events which occurred on a Monday var mondayEvents = context.Events.Where(p => p.SomeDate.DayOfWeek == DayOfWeek.Monday); // Get all events which occurred before the year 2000 var oldEvents = context.Events.Where(p => p.SomeDate.Year < 2000); Note that the plugin is far from covering all translations. If a translation you need is missing, please open an issue to request for it."
  },
  "efcore/mapping/full-text-search.html": {
    "href": "efcore/mapping/full-text-search.html",
    "title": "Full Text Search | Npgsql Documentation",
    "keywords": "Full Text Search PostgreSQL has built-in support for full-text search , which allows you to conveniently and efficiently query natural language documents. Mapping PostgreSQL full text search types are mapped onto .NET types built-in to Npgsql. The tsvector type is mapped to NpgsqlTsVector and tsquery is mapped to NpgsqlTsQuery . This means you can use properties of type NpgsqlTsVector directly in your model to create tsvector columns. The NpgsqlTsQuery type on the other hand, is used in LINQ queries. public class BlogPost { public string Title { get; set; } public string Content { get; set; } public NpgsqlTsVector SearchVector { get; set; } } Operation translation Almost all PostgreSQL full text search functions can be called through LINQ queries. All supported EF Core LINQ methods are defined in extension classes in the Microsoft.EntityFrameworkCore namespace, so simply referencing the Npgsql provider will light up these methods. Here is a table showing translations for some operations; if an operation you need is missing, please open an issue to request for it. This C# expression... ... gets translated to this SQL .Select(c => EF.Functions.ToTsVector(\"english\", c.Name)) SELECT to_tsvector('english'::regconfig, c.\"Name\") .Select(c => NpgsqlTsVector.Parse(\"b\")) SELECT CAST('b' AS tsvector) .Select(c => EF.Functions.ToTsQuery(\"english\", \"pgsql\")) SELECT to_tsquery('english'::regconfig, 'pgsql')` .Select(c => NpgsqlTsQuery.Parse(\"b\")) SELECT CAST('b' AS tsquery) .Where(c => c.SearchVector.Matches(\"Npgsql\")) WHERE c.\"SearchVector\" @@ 'Npgsql' .Select(c => EF.Functions.ToTsQuery(c.SearchQuery).ToNegative()) SELECT !! to_tsquery(c.\"SearchQuery\") .Select(c => EF.Functions.ToTsVector(c.Name).SetWeight(NpgsqlTsVector.Lexeme.Weight.A)) SELECT setweight(to_tsvector(c.\"Name\"), 'A') Setting up and querying a full text search index on an entity As the PostgreSQL documentation explains, full-text search requires an index to run efficiently. This section will show two ways to do this, both (currently) requiring raw SQL in your migrations. Read the PostgreSQL docs for more information on the different approaches. Method 1: Expression index The simpler method to use full-text search is to set up an expression index. Let's take the following entity: public class Product { public int Id { get; set; } public string Name { get; set; } public string Description { get; set; } } Create a migration which will contain the index creation SQL ( dotnet ef migrations add ... ). At this point, open the generated migration with your editor and add the following: protected override void Up(MigrationBuilder migrationBuilder) { migrationBuilder.Sql(@\"CREATE INDEX fts_idx ON \"\"Product\"\" USING GIN (to_tsvector('english', \"\"Name\"\" || ' ' || \"\"Description\"\"));\"); } protected override void Down(MigrationBuilder migrationBuilder) migrationBuilder.Sql(@\"DROP INDEX fts_idx;\"); } This will create a full-text search index on the Name and Description columns. You can query as follows: var context = new ProductDbContext(); var npgsql = context.Products .Where(p => EF.Functions.ToTsVector(\"english\", p.Name + \" \" + p.Description).Matches(\"Npgsql\")) .ToList(); Method 2: tsvector column Instead of an expression index, this method will add a tsvector column on your table that updates itself with a trigger. First, add an NpgsqlTsVector property to your entity: public class Product { public int Id { get; set; } public string Name { get; set; } public string Description { get; set; } public NpgsqlTsVector SearchVector { get; set; } } and modify the OnModelCreating() of your context class to add an index as follows: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.Entity<Product>() .HasIndex(p => p.SearchVector) .HasMethod(\"GIN\"); // Index method on the search vector (GIN or GIST) } Now generate a migration ( dotnet ef migrations add .... ), and open it with your favorite editor, adding the following: public partial class CreateProductTable : Migration { protected override void Up(MigrationBuilder migrationBuilder) { // Migrations for creation of the column and the index will appear here, all we need to do is set up the trigger to update the column: migrationBuilder.Sql( @\"CREATE TRIGGER product_search_vector_update BEFORE INSERT OR UPDATE ON \"\"Products\"\" FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger(\"\"SearchVector\"\", 'pg_catalog.english', \"\"Name\"\", \"\"Description\"\");\"); // If you were adding a tsvector to an existing table, you should populate the column using an UPDATE // migrationBuilder.Sql(\"UPDATE \\\"Products\\\" SET \\\"Name\\\" = \\\"Name\\\";\"); } protected override void Down(MigrationBuilder migrationBuilder) { // Migrations for dropping of the column and the index will appear here, all we need to do is drop the trigger: migrationBuilder.Sql(\"DROP TRIGGER product_search_vector_update\"); } } Any inserts or updates on the Products table will now update the SearchVector column and maintain it automatically. You can query it as follows: var context = new ProductDbContext(); var npgsql = context.Products .Where(p => p.SearchVector.Matches(\"Npgsql\")) .ToList();"
  },
  "efcore/release-notes/2.2.html": {
    "href": "efcore/release-notes/2.2.html",
    "title": "2.2 Release Notes | Npgsql Documentation",
    "keywords": "2.2 Release Notes Version 2.2.0 of the Npgsql Entity Framework Core provider has been released and is available on nuget. This version works with version 2.2.0 of Entity Framework Core , and contains some new Npgsql features as well. This release was result of hard work by @roji , @austindrenski , @yohdeadfall and @khellang . New Features Aside from general EF Core features new in 2.2.0, the Npgsql EF Core provider contains the following major new features: PostgreSQL 11 covering indexes PostgreSQL 11 introduced covering indexes feature , which allow you to include \"non-key\" columns in your indexes. This allows you to perform index-only scans and can provide a significant performance boost. Support has been added in ( #697 ): protected override void OnConfiguring(DbContextOptionsBuilder builder) => modelBuilder.Entity<Blog>() .ForNpgsqlHasIndex(b => b.Id) .ForNpgsqlInclude(b => b.Name); This will create an index for searching on Id , but containing also the column Name , so that reading the latter will not involve accessing the table. See the documentation for more details . Thanks to @khellang for contributing this! PostgreSQL user-defined ranges The provider already supported PostgreSQL range types , but prior to 2.2 that support was limited to the built-in range types which come with PostgreSQL. #329 extends that support to range types which you define: protected override void OnConfiguring(DbContextOptionsBuilder builder) => builder.UseNpgsql(\"...\", b => b.MapRange<float>(\"floatrange\")); protected override void OnModelCreating(ModelBuilder builder) => builder.ForNpgsqlHasRange(\"floatrange\", \"real\"); This will make the provider create a PostgreSQL range called floatrange , over the PostgreSQL type real . Any property with type NpgsqlRange<float> will be seamlessly mapped to it. See the documentation for more details . Seeding for Npgsql-specific types When using some Npgsql-specific types, it wasn't possible to seed values for those types. With EF Core support for seeding any type, #667 allows seeding values for network, bit and range types (more are coming). PostgreSQL index operator classes PostgreSQL allows you to specify operator classes on your indexes , to allow tweaking how the index should work. #481 adds support for managing these. See the documentation for more details . Thanks to @khellang for contributing this! Other features Various issues with enum and range types were fixed, including upper/lower case, quoting and schema management. Many new SQL translations were added, so more of your LINQ expressions can run in the database. We'll be working on our documentation to make these more discoverable. The full list of issues for this release is available here ."
  },
  "efcore/index.html": {
    "href": "efcore/index.html",
    "title": "Getting Started | Npgsql Documentation",
    "keywords": "Getting Started Npgsql has an Entity Framework (EF) Core provider. It behaves like other EF Core providers (e.g. SQL Server), so the general EF Core docs apply here as well. If you're just getting started with EF Core, those docs are the best place to start. Development happens in the Npgsql.EntityFrameworkCore.PostgreSQL repository, all issues should be reported there. Configuring the project file To use the Npgsql EF Core provider, add a dependency on Npgsql.EntityFrameworkCore.PostgreSQL . You can follow the instructions in the general EF Core Getting Started docs . Below is a .csproj file for a console application that uses the Npgsql EF Core provider: <Project Sdk=\"Microsoft.NET.Sdk\"> <PropertyGroup> <TargetFramework>netcoreapp2.2</TargetFramework> </PropertyGroup> <ItemGroup> <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"2.2.0\" /> </ItemGroup> </Project> Defining a DbContext using System.Collections.Generic; using Microsoft.EntityFrameworkCore; namespace ConsoleApp.PostgreSQL { public class BloggingContext : DbContext { public DbSet<Blog> Blogs { get; set; } public DbSet<Post> Posts { get; set; } protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql(\"Host=my_host;Database=my_db;Username=my_user;Password=my_pw\"); } public class Blog { public int BlogId { get; set; } public string Url { get; set; } public List<Post> Posts { get; set; } } public class Post { public int PostId { get; set; } public string Title { get; set; } public string Content { get; set; } public int BlogId { get; set; } public Blog Blog { get; set; } } } Additional configuration for ASP.NET Core applications Consult this tutorial for general information on how to make ASP.NET work with EF Core. For Npgsql specifically, simply place the following in your ConfigureServices method in Startup.cs : public void ConfigureServices(IServiceCollection services) { // Other DI initializations services.AddDbContext<BloggingContext>(options => options.UseNpgsql(Configuration.GetConnectionString(\"BloggingContext\"))); } Using an Existing Database (Database-First) The Npgsql EF Core provider also supports reverse-engineering a code model from an existing PostgreSQL database (\"database-first\"). To do so, use dotnet CLI to execute the following: dotnet ef dbcontext scaffold \"Host=my_host;Database=my_db;Username=my_user;Password=my_pw\" Npgsql.EntityFrameworkCore.PostgreSQL"
  },
  "efcore/miscellaneous.html": {
    "href": "efcore/miscellaneous.html",
    "title": "Miscellaneous | Npgsql Documentation",
    "keywords": "Miscellaneous PostgreSQL extensions The Npgsql EF Core provider allows you to specify PostgreSQL extensions that should be set up in your database. Simply use HasPostgresExtension in your context's OnModelCreating method: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.HasPostgresExtension(\"hstore\"); Execution Strategy Since 2.0.0, the Npgsql EF Core provider provides a retrying execution strategy, which will attempt to detect most transient PostgreSQL/network errors and will automatically retry your operation. To enable, place the following code in your context's OnModelConfiguring : protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql( \"<connection_string>\", options => options.EnableRetryOnFailure()); This strategy relies on the IsTransient property of NpgsqlException . Both this property and the retrying strategy are new and should be considered somewhat experimental - please report any issues. Comments PostgreSQL allows you to attach comments to database objects, which can help explain their purpose for someone examining the schema. The Npgsql EF Core provider supports this for tables or columns, simply set the comment in your model's OnModelCreating as follows: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<MyEntity>() .HasComment(\"Some comment\"); Certificate authentication The Npgsql allows you to provide a callback for verifying the server-provided certificates, and to provide a callback for providing certificates to the server. The latter, if properly set up on the PostgreSQL side, allows you to do client certificate authentication - see the Npgsql docs and also the PostgreSQL docs on setting this up. The Npgsql EF Core provider allows you to set these two callbacks on the DbContextOptionsBuilder as follows: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql( \"<connection_string>\", options => { options.RemoteCertificateValidationCallback(MyCallback1); options.ProvideClientCertificatesCallback(MyCallback2); }); You may also consider passing Trust Server Certificate=true in your connection string to make Npgsql accept whatever certificate your PostgreSQL provides (useful for self-signed certificates). Database Creation Specifying the administrative db When the Npgsql EF Core provider creates or deletes a database ( EnsureCreated() , EnsureDeleted() ), it must connect to an administrative database which already exists (with PostgreSQL you always have to be connected to some database, even when creating/deleting another database). Up to now the postgres database was used, which is supposed to always be present. However, there are some PostgreSQL-like databases where the postgres database is not available. For these cases you can specify the administrative database as follows: protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) => optionsBuilder.UseNpgsql( \"<connection_string>\", options => options.UseAdminDatabase(\"my_admin_db\")); Using a database template When creating a new database, PostgreSQL allows specifying another \"template database\" which will be copied as the basis for the new one. This can be useful for including database entities which are not managed by Entity Framework Core. You can trigger this by using HasDatabaseTemplate in your context's OnModelCreating : protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.HasDatabaseTemplate(\"my_template_db\"); Setting a tablespace PostgreSQL allows you to locate your database in different parts of your filesystem, via tablespaces . The Npgsql EF Core provider allows you to specify your database's namespace: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.UseTablespace(\"my_tablespace\"); You must have created your tablespace prior to this via the CREATE TABLESPACE command - the Npgsql EF Core provider does not do this for you. Note also that specifying a tablespace on specific tables is not supported. CockroachDB Interleave In Parent If you're using CockroachDB, the Npgsql EF Core provider exposes its \"interleave in parent\" feature . Use the following code: protected override void OnModelCreating(ModelBuilder modelBuilder) => modelBuilder.Entity<Customer>() .UseCockroachDbInterleaveInParent( typeof(ParentEntityType), new List<string> { \"prefix_column_1\", \"prefix_column_2\" });"
  },
  "doc/release-notes/4.1.html": {
    "href": "doc/release-notes/4.1.html",
    "title": "Npgsql 4.1 release notes | Npgsql Documentation",
    "keywords": "Npgsql 4.1 Npgsql 4.1 is out and available at nuget.org. New Features The major new features of 4.1 are: Support for reading and writing your types as JSON via the new, high-perf System.Text.Json API ( #2306 ). Support for the new async methods introduced in .NET Standard 2.1 ( #2481 ). Expose performance statistics via the new .NET event counters ( #1725 ). Async support for binary imports and exports ( #1632 ). Easier and PostgreSQL standard ways to provide client certificates for authentication ( #2129 ). Many other small improvements and performance optimizations have been introduced as well - you can track progress here . Breaking changes from 4.0 .NET 4.5, .NET 4.5.1 and .NET 4.5.2 are no longer supported. .NET 4.6.1 and .NET Standard 2.0 are the lowest supported versions. The spatial plugin, Npgsql.NetTopologySuite, has been updated to depend on NetTopologySuite 2.0.0, which is a major version introducing breaking changes. Specifically, EF Core 3.0 is the first version supporting NetTopologySuite 2.0.0; it is not possible to use EF Core 2.x with the new version of Npgsql.NetTopologySuite. The UseSslStream property of NpgsqlConnectionStringBuilder is now marked as Obselete . SslStream is always used."
  },
  "doc/release-notes/3.1.html": {
    "href": "doc/release-notes/3.1.html",
    "title": "Npgsql 3.1 Release Notes | Npgsql Documentation",
    "keywords": "Migrating from 3.0 to 3.1 CommandTimeout used to be implemented with PostgreSQL's statement_timeout parameter, but this wasn't a very reliable method and has been removed. CommandTimeout is now implemented via socket timeouts only, see #689 for more details. Note that if a socket timeout occurs, the connection is broken and must be reopened. The Persist Security Info parameter has been implemented and is false by default. This means that once a connection has been opened, you will not be able to get its password. Removed ContinuousProcessing mode, and replaced it with Wait , a simpler and less bug-prone mechanism for consuming asynchronous notifications ( #1024 ). The Maximum Pool Size connection is parameter is now 100 default instead of 20 (this is default in SqlClient, pg_bouncer...). The Connection Lifetime parameter has been renamed to Connection Idle Lifetime , and its default has been changed from 15 to 300. Also, once the number of seconds has elapsed the connection is closed immediately; the previous behavior closed half of the connections. RegisterEnum and RegisterEnumGlobally have been renamed to MapEnum and MapEnumGlobally respectively. If you used enum mapping in 3.0, the strategy for translating between CLR and PostgreSQL type names has changed. In 3.0 Npgsql simply used the CLR name (e.g. SomeField) as the PostgreSQL name; Npgsql 3.1 uses a user-definable name translator, default to snake case (e.g. some_field). See #859 . The EnumLabel attribute has been replaced by the PgName attribute (which is also used for the new composite type support). When PostgreSQL sends an error, it is no longer raised by an NpgsqlException but by a PostgresException. PostgresException is a subclass of NpgsqlException so code catching NpgsqlException should still work, but the PostgreSQL-specific exception properties will only be available on PostgresException. The Code property on NpgsqlException has been renamed to SqlState. It has also been moved to PostgresException. NpgsqlNotice has been renamed to PostgresNotice For multistatement commands, PostgreSQL parse errors will now be thrown only when the user calls NextResult() and gets to the problematic statement. It is no longer possible to dispose a prepared statement while a reader is still open. Since disposing a prepared statement includes database interaction, the connection must be idle. Removed NpgsqlConnection.SupportsHexByteFormat . Renamed NpgsqlConnection.Supports_E_StringPrefix to SupportsEStringPrefix ."
  },
  "doc/release-notes/3.0.html": {
    "href": "doc/release-notes/3.0.html",
    "title": "Npgsql 3.0 Release Notes | Npgsql Documentation",
    "keywords": "Migrating from 2.2 to 3.0 Version 3.0 represents a near-total rewrite of Npgsql. In addition to changing how Npgsql works internally and communicates with PostgreSQL, a conscious effort was made to better align Npgsql with the ADO.NET specs/standard and with SqlClient where that made sense. This means that you cannot expect to drop 3.0 as a replacement to 2.2 and expect things to work - upgrade cautiously and test extensively before deploying anything to production. The following is a non-exhaustive list of things that changed. If you run against a breaking change not documented here, please let us know and we'll add it. Major Support for .NET 2.0, .NET 3.5 and .NET 4.0 has been dropped - you will have to upgrade to .NET 4.5 to use Npgsql 3.0. We'll continue to do bugfixes on the 2.2 branch for a while on a best-effort basis. The Entity Framework provider packages have been renamed to align with Microsoft's new naming. The new packages are EntityFramework5.Npgsql and EntityFramework6.Npgsql . EntityFramework7.Npgsql is in alpha. A brand-new bulk copy API has been written, using binary encoding for much better performance. See the docs . Composite (custom) types aren't supported yet, but this is a high-priority feature for us. See #441 . SSL Npgsql 2.2 didn't perform validation on the server's certificate by default, so self-signed certificate were accepted. The new default is to perform validation. Specify the Trust Server Certificate connection string parameter to get back previous behavior. The \"SSL\" connection string parameter has been removed, use \"SSL Mode\" instead. The \"SSL Mode\" parameter's Allow option has been removed, as it wasn't doing anything. Type Handling Previously, Npgsql allowed writing a NULL by setting NpgsqlParameter.Value to null . This is not allowed in ADO.NET and is no longer supported, set to DBNull.Value instead. In some cases, you will now be required to explicitly set a parameter's type although you didn't have to before (you'll get an error 42804 explaining this). This can happen especially in Dapper custom custom type handlers ( #694 ). Simply set the NpgsqlDbType property on the parameter. Removed support for writing a parameter with an IEnumerable<T> value, since that would require Npgsql to enumerate it multiple times internally. IList<T> and IList are permitted. It is no longer possible to write a .NET enum to an integral PostgreSQL column (e.g. int4). Proper enum support has been added which allows writing to PostgreSQL enum columns (see the docs . To continue writing enums to integral columns as before, simply add an explicit cast to the integral type in your code. NpgsqlMacAddress has been removed and replaced by the standard .NET PhysicalAddress. Npgsql's BitString has been removed and replaced by the standard .NET BitArray. NpgsqlTime has been removed and replaced by the standard .NET TimeSpan. NpgsqlTimeZone has been removed. NpgsqlTimeTZ now holds 2 TimeSpans, rather than an NpgsqlTime and an NpgsqlTimeZone. NpgsqlTimeStamp no longer maps DateTime.{Max,Min}Value to {positive,negative} infinity. Use NpgsqlTimeStamp.Infinity and NpgsqlTimeStamp.MinusInfinity explicitly for that. You can also specify the \"Convert Infinity DateTime\" connection string parameter to retain the old behavior. Renamed NpgsqlInet's addr and mask to Address and Mask. NpgsqlPoint now holds Doubles instead of Singles ( #437 ). NpgsqlDataReader.GetFieldType() and GetProviderSpecificFieldType() now return Array for arrays. Previously they returned int[], even for multidimensional arrays. NpgsqlDataReader.GetDataTypeName() now returns the name of the PostgreSQL type rather than its OID. Retired features Removed the \"Preload Reader\" feature, which loaded the entire resultset into memory. If you require this (inefficient) behavior, read the result into memory outside Npgsql. We plan on working on MARS support, see #462 . The \"Use Extended Types\" parameter is no longer needed and isn't supported. To access PostgreSQL values that can't be represented by the standard CLR types, use the standard ADO.NET NpgsqlDataReader.GetProviderSpecificValue or even better, the generic NpgsqlDataReader.GetFieldValue<T> . Removed the feature where Npgsql automatically \"dereferenced\" a resultset of refcursors into multiple resultsets (this was used to emulate returning multiple resultsets from stored procedures). Note that if your function needs to return a single resultset, it should be simply returning a table rather than a cursor (see RETURNS TABLE ). See #438 . Removed the AlwaysPrepare connection string parameter Removed the Encoding connection string parameter, which was obsolete and unused anyway (UTF8 was always used regardless of what was specified) Removed the Protocol connection string parameter, which was obsolete and unused anyway (protocol 3 was always used) Removed NpgsqlDataReader.LastInsertedOID, it did not allow accessing individual OIDs in multi-statement commands. Replaced with NpgsqlDataReader.Statements, which provides OID and affected row information on a statement-by-statement basis. Removed NpgsqlDataReader.HasOrdinal , was a badly-named non-standard API without a serious use case. GetName() can be used as a workaround. Other It is no longer possible to create database entities (tables, functions) and then use them in the same multi-query command - you must first send a command creating the entity, and only then send commands using it. See #641 for more details. Previously, Npgsql set DateStyle=ISO, lc_monetary=C and extra_float_digits=3 on all connections it created. This is no longer case, if you rely on these parameters you must send them yourself. NpgsqlConnection.Clone() will now only return a new connection with the same connection string as the original. Previous versions returned an open connection if the original was open, and copied the Notice event listeners as well. Note: NpgsqlConnection.Clone() was accidentally missing from 3.0.0 and 3.0.1. Removed the obsolete NpgsqlParameterCollection.Add(name, value) method. Use AddWithValue() instead, which also exists in SqlClient. The savepoint manipulation methods on NpgsqlTransaction have been renamed from Save , and Rollback to CreateSavepoint and RollbackToSavepoint . This broke the naming conventions for these methods across other providers (SqlClient, Oracle...) and so in 3.0.2 the previous names were returned and the new names marked as obsolete. 3.1 will remove the the new names and leaves only Save and Rollback . See #738 . The default CommandTimeout has changed from 20 seconds to 30 seconds, as in ADO.NET . CommandType.TableDirect now requires CommandText to contain the name of a table, as per the MSDN docs . Multiple tables (join) aren't supported. CommandType.StoredProcedure now requires CommandText contain only the name of a function, without parentheses or parameter information, as per the MSDN docs . Moved the LastInsertedOID property from NpgsqlCommand to NpgsqlReader, like the standard ADO.NET RecordsAffected ."
  },
  "doc/release-notes/4.0.html": {
    "href": "doc/release-notes/4.0.html",
    "title": "Npgsql 4.0 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 4.0 Npgsql 4.0 is out and available at nuget.org. This is a major version with significant changes, upgrade with care, consult the breaking changes section below and test well before deploying to production. A special thanks goes out to @YohDeadfall for his many contributions and reviews. Thanks also (alphabetically) to @austindrenski, @Brar, @kspeakman, @rwasef1830, @shortspider, @StillLearnin, @uhayat for their valuable contributions. High performance A concentrated effort has substantially increased Npgsql performance, especially in highly concurrent, low-latency scenarios. Improvements include: Rewriting of the connection pool to be lock-free, since contention started to be an issue in highly concurrent, short-lived connection scenarios ( #1839 ). Significant reduction of allocations through more recycling and other techniques. New API for generically providing parameters, avoiding boxing of value types ( #1639 ). Avoiding numerous internal async calls where they weren't needed. ... many others In round 16 of the TechEmpower benchmark, .NET Core/ASP.NET Core came in 7th place running with Npgsql , making it one of the fastest mainstream web stacks available - see this blog post for more info . Please let us know how the new version works for you - both positive and negative comments are welcome. If you're interested in Npgsql performance and haven't yet seen the performance page , it's a good opportunity to check it out (it's valid also for 3.2 users). Improved spatial support (PostGIS) Previous versions have allowed basic usage of PostGIS's spatial types via built-in Npgsql types, which were limited in many ways. Thanks to a new plugin infrastructure, you can now use the Npgsql.NetTopologySuite plugin, which maps PostGIS types to the NetTopologySuite spatial library's types. NetTopologySuite's types are more complete, and support a variety of spatial operations and conversions you can perform after loading your spatial data from PostgreSQL. If you prefer to use JSON for your spatial types, the Npgsql.GeoJSON plugin maps PostGIS types to GeoJSON.NET types . GeoJSON is a standard JSON format for spatial data. Finally, if you prefer to use the previous Npgsql types (e.g. PostgisPoint ), these are available via the Npgsql.LegacyPostgis plugin. Thanks to @YohDeadfall for implementing both the NetTopologySuite and GeoJSON plugins. NodaTime date/time support NodaTime is a powerful alternative to .NET's built-in date/time types, such as DateTime . The built-in types are flawed in many ways: they have problematic support for timezones, don't have a date-only or time-only types, and promote problematic programming but not making the right distinctions. If your application handles dates and times in anything but the most basic way, you should seriously consider using NodaTime. To learn more read this blog post by Jon Skeet . You can now use the new Npgsql.NodaTime to have Npgsql map PostgreSQL date/time types to NodaTime types. Json.NET Another plugin, Npgsql.Json.NET , works with Newtonsoft Json.NET to automatically serialize and deserialize PostgreSQL's jsonb and json types to your objects, providing a seamless database JSON programming experience. Instead of working with strings which you have to serialize and deserialize, Npgsql does it for you. Other improvements Fix the binary COPY API to make it interact better with exceptions ( #1646 ). Npgsql better supports working with enums and composites, even without mapping them, and better supports new types introduced via plugins ( #1792 ). Better \"reflection\" capabilities. Continuing work from 3.2, Npgsql now exposes more information about PostgreSQL types, allowing you to dynamically reflect on columns types returned by queries, or required as parameters ( #1276 , #1779 ). Derive parameters for queries. You can now also use NpgsqlCommandBuilder to dynamically understand which parameters and types are required for arbitrary queries (previously supported only for functions) ( #1698 , thanks @Brar!). Allow reading a single character from a PostgreSQL text column ( #1188 ). Decimals read from PostgreSQL will now have the correct scale ( #1925 ). Thanks @StillLearnin and @YohDeadfall. In addition to more documentation, several blog posts are planned to explain the above in more details (to be announced on @shayrojansky ). Breaking changes from 3.2 Caution The date/time behavior has changed in the following ways: DateTime is always sent as timestamp by default, regardless of its kind. You can still specify NpgsqlDbType.TimestampTz , in which case local DateTime gets converted to UTC before sending. When reading timestamptz as a DateTimeOffset , the machine local offset will be used. Previously a DateTimeOffset in UTC was returned. It is no longer possible to read or write DateTimeOffset as timestamp , only as timestamptz . Caution The API for binary import (COPY IN) has changed substantially in a breaking way, and code from 3.2 will not work as-is on 4.0. You must now call NpgsqlBinaryImporter.Complete() to save your imported data; not doing so will roll the operation back. NpgsqlBinaryImporter.Cancel() has been removed - simply closing/disposing the importer will implicitly cancel the import. This is similar to how TransactionScope works and is necessary to prevent accidental commit of data on exception. See #1646 . Caution If you're using decimal/numeric numbers (not floating-point), there's a chance your data needs to be fixed (previous versions incorrectly inserted a scale larger than 28, which is the maximum allowed by .NET decimal ). If you're having trouble reading data previously inserted by Npgsql, consider running this fixup code . If your data really does contain more than 28/29 fractional digits and you need to keep that precision, see the workarounds proposed in this comment for loading these values. .NET Standard 1.3 is no longer supported. .NET Standard 2.0 is the lowest supported version. Npgsql used to use its own internal TLS/SSL due to issues with some server. As these issues have been resolved, the standard .NET SslStream is now used by default ( #1482 ), but you can still set Use SSL Stream=false to keep using the internal implementation (please report why you need this, as it's likely the internal implementation will be removed in a future release). The reader instances returned by NpgsqlCommand.ExecuteReader() are now recycled, to reduce memory allocations ( #1649 ). You should not keep a reference or interact with a reader after its command has been disposed (such interaction was limited in any case). The Min Pool Size parameter will no longer make the pool create new connections internally - it will only have an effect on how many connections are pruned. Previously, in various points the pool would check if the current number of connections was below Min Pool Size , and if so, automatically created new ones - this no longer happens. Parameter types have become more strict. Previous versions allowed to you pass arbitrary value types, such as writing CLR string to int columns, or anything that implemented IConvertible. Although some implicit conversions are still supported (e.g. long -> int, short -> int), some have been removed. Data type names returned from NpgsqlDataReader.GetDataTypeName() and other APIs are now more standards-conforming (e.g. integer[] instead of _int4 ), and properly include type modifiers (e.g. character varying(10) ) ( #1919 ). NpgsqlParameter.EnumType and NpgsqlParameter.SpecificType have been removed. See Composites and Enums for more details. Parameter names are no longer trimmed, set your names to the exact parameter name specified in your SQL. If a parameter's name isn't set, it will no longer default to Parameter1, Parameter2, etc. The following APIs \"connection capability\" APIs have been removed from NpgsqlConnection: UseConformantStrings , SupportsEStringPrefix , UseSslStream . The default name translator, NpgsqlSnakeCaseNameTranslator , has been changed to handle acronyms better. Given the property name IsJSON , the old translator algorithm would output is_j_s_o_n , while the new outputs is_json . To revert back to the old algorithm, create a NpgsqlSnakeCaseNameTranslator instance with legacyMode: true and pass it when calling the MapComposite and MapEnum methods. If you are reading tables as composites ( #990 ), you will have to add the new Load Table Composites to your connection string. NpgsqlConnection.GetSchema() will no longer return system tables (i.e. tables in schemas pg_catalog and information_schema ), #1831 . You may no longer have multiple streams or text readers open on a reader (this was previously supported with non-sequential readers). Accessing a new column closes any open stream or text reader. The DateTimeOffset instances returned for PostgreSQL timetz now have their date set to 0001-01-02 instead of the previous 0001-01-01 ( #1924 )."
  },
  "doc/release-notes/3.2.html": {
    "href": "doc/release-notes/3.2.html",
    "title": "Npgsql 3.2 Release Notes | Npgsql Documentation",
    "keywords": "Npgsql 3.2 Npgsql 3.2 is out and available on nuget.org. This is a major release with substantial internal changes and should be deployed with care. For critical applications it may be advisable to wait until 3.2.1 is out. This release contains a large number of new features, but the main focus is performance - some usage scenarios may show dramatic improvements. See below for more details. Major Changes Prepared statements are now persistent (survive beyond pooled connection close/open), providing significant performance improvements for applications with short-lived connections, such as most webapps ( #483 ). Also, statements can optionally be prepared automatically by Npgsql based on use, unlocking prepared statement performance for O/RMs and data layers which don't prepare themselves, such as Dapper or Entity Framework Core ( #1237 ). See this blog post for more info . The internal I/O system has been overhauled to continue supporting sync and async I/O, but with a vastly better coding model. This should eliminate most protocol sync bugs, and make it much easier to maintain and write new type handlers ( #1326 ). Kerberos login (\"integrated security\") is now support on Linux/Mac ( #1079 ). Support for System.Transactions and distributed transactions has been rewritten, and should have fewer problems than before ( #122 ). Performance counters have been implemented, similar to what SqlClient provides . See the documentation for more information ( #619 ). The Visual Studio integration extension (DDEX) has been rewritten for a much better installation experience, and includes some new features as well ( #1407 ). See the docs for more info . If your application attempts to make use of more than one connection at the same time, an \"operation already in progress\" was thrown. This exception now provides more information to help you track down the bug ( #1248 ). Many other small changes have been made, especially with regards to performance. Here's the full list . Breaking Changes from 3.1 Connections can no longer be constructed with NpgsqlConnectionStringBuilder - only plain string connection strings are supported ( #1415 ). The Buffer Size connection string parameter has been replaced by Read Buffer Size and Write Buffer Size ."
  },
  "doc/basic-usage.html": {
    "href": "doc/basic-usage.html",
    "title": "Npgsql Basic Usage | Npgsql Documentation",
    "keywords": "Npgsql Basic Usage Parameters When sending data values to the database, you should use parameters rather than including the values in the SQL as follows: using (var cmd = new NpgsqlCommand(\"INSERT INTO table (col1) VALUES (@p)\", conn)) { cmd.Parameters.AddWithValue(\"p\", \"some_value\"); cmd.ExecuteNonQuery(); } The @p in your SQL is called a parameter placeholder ; Npgsql will expect to find a parameter with that name in the command's parameter list, and will send it along with your query. This has the following advantages over embedding the value in your SQL: Avoid SQL injection for user-provided inputs: the parameter data is sent to PostgreSQL separately from the SQL, and is never interpreted as SQL. Required to make use of prepared statements , which dramatically improve performance if you execute the same SQL many times. Parameter data is sent in an efficient, binary format, rather than being represented as a string in your SQL. Note that PostgreSQL does not support parameters in arbitrary locations - you can only parameterize data values. For example, trying to parameterize a table or column name will fail - parameters aren't a simple way to stick an arbitrary string in your SQL. Parameter types PostgreSQL has a strongly-typed type system; columns and parameters have a type, and types are usually not implicitly converted to other types. This means you have to think about which type you will be sending: trying to insert a string into an integer column (or vice versa) will fail. In the example above, we let Npgsql infer the PostgreSQL data type from the .NET type: when Npgsql sees a .NET string , it automatically sends a parameter of type text (note that this isn't the same as, say varchar ). In many cases this will work just fine, and you don't need to worry. In some cases, however, you will need to explicitly set the parameter type. For example, Npgsql sends .NET DateTime as timestamp without time zone , but you may want to send a PostgreSQL date instead, which doesn't have a direct counterpart in .NET. For more information on supported types and their mappings, see this page . NpgsqlParameter exposes several properties that allow you to specify the parameter's data type: DbType DbType is a portable enum that can be used to specify database types. While this approach will allow you to write portable code across databases, it obviously won't let you specify types that are specific to PostgreSQL. NpgsqlDbType NpgsqlDbType is an Npgsql-specific enum that contains (almost) all PostgreSQL types supported by Npgsql. DataTypeName DataTypeName is an Npgsql-specific string property which allows to directly set a PostgreSQL type name on the parameter. This is rarely needed - NpgsqlDbType should be suitable for the majority of cases. However, it may be useful if you're using unmapped user-defined types ( enums or composites ) or some PostgreSQL type which isn't included in NpgsqlDbType (because it's supported via an external plugin). Strongly-typed parameters The standard ADO.NET parameter API is unfortunately weakly-typed: parameter values are set on NpgsqlParameter.Value , which, being an object , will box value types such as int . If you're sending lots of value types to the database, this will create large amounts of useless heap allocations and strain the garbage collector. As an alternative, you can use NpgsqlParameter<T> . This generic class has a TypedValue member, which is similar to NpgsqlParameter.Value but is strongly-typed, thus avoiding the boxing and heap allocation. Note that this strongly-typed parameter API is entirely Npgsql-specific, and will make your code non-portable to other database. See #8955 for an issue discussing this at the ADO.NET level. Stored functions and procedures PostgreSQL supports stored (or server-side) functions , and since PostgreSQL 11 also stored procedures . These can be written in SQL (similar to views), or in PL/pgSQL (PostgreSQL's procedural language), PL/Python or several other server-side languages. Once a function or procedure has been defined, calling it is a simple matter of executing a regular command: // For functions using (var cmd = new NpgsqlCommand(\"SELECT my_func(1, 2)\", conn)) using (var reader = cmd.ExecuteReader()) { ... } // For procedures using (var cmd = new NpgsqlCommand(\"CALL my_proc(1, 2)\", conn)) using (var reader = cmd.ExecuteReader()) { ... } You can replace the parameter values above with regular placeholders (e.g. @p1 ), just like with a regular query. In some other databases, calling a stored procedures involves setting the command's behavior : using (var cmd = new NpgsqlCommand(\"my_func\", conn)) { cmd.CommandType = CommandType.StoredProcedure; cmd.Parameters.AddWithValue(\"p1\", \"some_value\"); using (var reader = cmd.ExecuteReader()) { ... } } Npgsql supports this mainly for portability, but this style of calling has no advantage over the regular command shown above. When CommandType.StoredProcedure is set, Npgsql will simply generate the appropriate SELECT my_func() for you, nothing more. Unless you have specific portability requirements, it is recommended you simply avoid CommandType.StoredProcedure and construct the SQL yourself. Note that if CommandType.StoredProcedure is set and your parameter instances have names, Npgsql will generate parameters with named notation : SELECT my_func(p1 => 'some_value') . This means that your NpgsqlParameter names must match your PostgreSQL function parameters, or the function call will fail. If you omit the names on your NpgsqlParameters, positional notation will be used instead. See the PostgreSQL docs for more info . Be aware that CommandType.StoredProcedure will generate a SELECT command - suitable for functions - and not a CALL command suitable for procedures. Npgsql has behaved this way since long before stored procedures were introduced, and changing this behavior would break backwards compatibility for many applications. The only way to call a stored procedure is to write your own CALL my_proc(...) command, without setting CommandBehavior.StoredProcedure . In/out parameters In SQL Server (and possibly other databases), functions can have output parameters, input/output parameters, and a return value, which can be either a scalar or a table (TVF). To call functions with special parameter types, the Direction property must be set on the appropriate DbParameter . PostgreSQL functions, on the hand, always return a single table - they can all be considered TVFs. Somewhat confusingly, PostgreSQL does allow your functions to be defined with input/and output parameters: CREATE FUNCTION dup(in int, out f1 int, out f2 text) AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$ LANGUAGE SQL; However, the above syntax is nothing more than a definition of the function's resultset, and is identical to the following ( see the PostgreSQL docs ): CREATE FUNCTION dup(int) RETURNS TABLE(f1 int, f2 text) AS $$ SELECT $1, CAST($1 AS text) || ' is text' $$ LANGUAGE SQL; In other words, PostgreSQL functions don't have output parameters that are distinct from the resultset they return - output parameters are just a syntax for describing that resultset. Because of this, on the Npgsql side there's no need to think about output (or input/output) parameters: simply invoke the function and process its resultset just like you would any regular resultset. However, to help portability, Npgsql does provide support for output parameters as follows: using (var cmd = new NpgsqlCommand(\"SELECT my_func()\", conn)) { cmd.Parameters.Add(new NpgsqlParameter(\"p_out\", DbType.String) { Direction = ParameterDirection.Output }); cmd.ExecuteNonQuery(); Console.WriteLine(cmd.Parameters[0].Value); } When Npgsql sees a parameter with ParameterDirection.Output (or InputOutput ), it will simply search the function's resultset for a column whose name matches the parameter, and copy the first row's value into the output parameter. This provides no value whatsoever over processing the resultset yourself, and is discouraged - you should only use output parameters in Npgsql if you need to maintain portability with other databases which require it."
  },
  "doc/faq.html": {
    "href": "doc/faq.html",
    "title": "FAQ | Npgsql Documentation",
    "keywords": "FAQ How can I call a PostgreSQL 11 stored procedure? I tried doing so with CommandType.StoredProcedure and got an error... PostgreSQL 11 stored procedures can be called, but unfortunately not with CommandType.StoredProcedure . PostgreSQL has supported stored functions for a long while, and since these have acted as replacements for non-existing procedures, Npgsql's CommandType.StoredProcedure has been implemented to invoke them; this means that CommandType.StoredProcedure translates into SELECT * FROM my_stored_function() . The new stored procedures introduce a special invocation syntax - CALL my_stored_procedure() - which is incompatible with the existing stored function syntax. On the brighter side, it's very easy to invoke stored procedures (or functions) yourself - you don't really need CommandType.StoredProcedure . Simply create a regular command and set CommandText to CALL my_stored_procedure(@p1, @p2) , handling parameters like you would any other statement. In fact, with Npgsql and PostgreSQL, CommandType.StoredProcedure doesn't really have any added value over constructing the command yourself. I get an exception \"The field field1 has a type currently unknown to Npgsql (OID XXXXX). You can retrieve it as a string by marking it as unknown\". Npgsql has to implement support for each PostgreSQL type, and it seems you've stumbled upon an unsupported type. First, head over to our issues page and check if an issue already exists on your type, otherwise please open one to let us know. Then, as a workaround, you can have your type treated as text - it will be up to you to parse it in your program. One simple way to do this is to append ::TEXT in your query (e.g. SELECT 3::TEXT ). If you don't want to modify your query, Npgsql also includes an API for requesting types as text. The fetch all the columns in the resultset as text, using (var cmd = new NpgsqlCommand(...)) { cmd.AllResultTypesAreUnknown = true; var reader = cmd.ExecuteReader(); // Read everything as strings } You can also specify text only for some columns in your resultset: using (var cmd = new NpgsqlCommand(...)) { // Only the second field will be fetched as text cmd.UnknownResultTypeList = new[] { false, true }; var reader = cmd.ExecuteReader(); // Read everything as strings } I'm trying to write a JSONB type and am getting 'column \"XXX\" is of type jsonb but expression is of type text' When sending a JSONB parameter, you must explicitly specify its type to be JSONB with NpgsqlDbType: using (var cmd = new NpgsqlCommand(\"INSERT INTO foo (col) VALUES (@p)\", conn)) { cmd.Parameters.AddWithValue(\"p\", NpgsqlDbType.Jsonb, jsonText); } I'm trying to apply an Entity Framework 6 migration and I get Type is not resolved for member 'Npgsql.NpgsqlException,Npgsql' ! Unfortunately, a shortcoming of EF6 requires you to have Npgsql.dll in the Global Assembly Cache (GAC), otherwise you can't see migration-triggered exceptions. You can add Npgsql.dll to the GAC by opening a VS Developer Command Prompt as administator and running the command gacutil /i Npgsql.dll . You can remove it from the GAC with gacutil /u Npgsql ."
  },
  "doc/security.html": {
    "href": "doc/security.html",
    "title": "Security and Encryption | Npgsql Documentation",
    "keywords": "Security and Encryption Logging in The simplest way to log into PostgreSQL is by specifying a Username and a Password in your connection string. Depending on how your PostgreSQL is configured (in the pg_hba.conf file), Npgsql will send the password in MD5 or in cleartext (not recommended). If a Password is not specified and your PostgreSQL is configured to request a password (plain or MD5), Npgsql will look for a standard PostgreSQL password file . If you specify the Passfile connection string parameter, the file it specifies will be used. If that parameter isn't defined, Npgsql will look under the path taken from PGPASSFILE environment variable. If the environment variable isn't defined, Npgsql will fall back to the system-dependent default directory which is $HOME/.pgpass for Unix and %APPDATA%\\postgresql\\pgpass.conf for Windows. NpgsqlConnection can also be configured with a ProvidePasswordCallback . This will be executed when new database connections are opened to generate a password in code. This can be useful if you are using Amazon Web Services RDS for Postgres which can be configured to use short lived tokens generated based on access credentials. The ProvidePasswordCallback delegate is executed when both password and passFile connection string parameters are not specified. For documentation about all auth methods supported by PostgreSQL, see this page . Note that Npgsql supports Unix-domain sockets (auth method local ), simply set your Host parameter to the absolute path of your PostgreSQL socket directory, as configred in your postgresql.conf . Integrated Security (GSS/SSPI/Kerberos) Logging in with a username and password isn't recommended, since your application must have access to your password. An alternate way of authenticating is \"Integrated Security\", which uses GSS or SSPI to negotiate Kerberos. The advantage of this method is that authentication is handed off to your operating system, using your already-open login session. Your application never needs to handle a password. You can use this method for a Kerberos login, Windows Active Directory or a local Windows session. Note that since 3.2, this method of authentication also works on non-Windows platforms. Instructions on setting up Kerberos and SSPI are available in the PostgreSQL auth methods docs . Some more instructions for SSPI are available here . Once your PostgreSQL is configured correctly, simply include Integrated Security=true in your connection string and drop the Password parameter. However, Npgsql must still send a username to PostgreSQL. If you specify a Username connection string parameter, Npgsql will send that as usual. If you omit it, Npgsql will attempt to detect your system username, including the Kerberos realm. Note that by default, PostgreSQL expects your Kerberos realm to be sent in your username (e.g. username@REALM ); you can have Npgsql detect the realm by setting Include Realm to true in your connection string. Alternatively, you can disable add include_realm=0 in your PostgreSQL's pg_hba.conf entry, which will make it strip the realm. You always have the possibility of explicitly specifying the username sent to PostgreSQL yourself. Encryption (SSL/TLS) By default PostgreSQL connections are unencrypted, but you can turn on SSL/TLS encryption if you wish. First, you have to set up your PostgreSQL to receive SSL/TLS connections as described here . Once that's done, specify SSL Mode in your connection string, setting it to either Require (connection will fail if the server isn't set up for encryption), or Prefer (use encryption if possible but fallback to unencrypted otherwise). By default, Npgsql will validate your server's certificate; if you're using a self-signed certificate, this will fail. You can instruct Npgsql to ignore this by specifying Trust Server Certificate=true in the connection string. To precisely control how the server's certificate is validated, you can register UserCertificateValidationCallback on NpgsqlConnection (this works just like on .NET's SslStream ). If you need provide client certificates as part of authentication, you can point Npgsql to a certificate file by setting the Client Certificate connection string parameter. Npgsql will also implement the standard PostgreSQL behavior and will recognize the PGSSLCERT environment variable, as well as ~/.postgresql/postgresql.crt ( %APPDATA%\\postgresql\\postgresql.crt on Windows). Finally, you can set the ProvideClientCertificatesCallback on NpgsqlConnection to further customize how client certificates are provided (this works just like on .NET's SslStream )."
  },
  "doc/copy.html": {
    "href": "doc/copy.html",
    "title": "COPY | Npgsql Documentation",
    "keywords": "COPY PostgreSQL has a feature allowing efficient bulk import or export of data to and from a table. This is usually a much faster way of getting data in and out of a table than using INSERT and SELECT. See documentation for the COPY command for more details. Npgsql supports three COPY operation modes: binary, text and raw binary. Binary COPY This mode uses the efficient PostgreSQL binary format to transfer data in and out of the database. The user uses an API to read and write rows and fields, which Npgsql decodes and encodes. When you've finished, you must call Complete() to save the data; not doing so will cause the COPY operation to be rolled back when the writer is disposed (this behavior is important in case an exception is thrown). IMPORTANT : Note that it is the your responsibility to read and write the correct type! If you use COPY to write an int32 into a string field you may get an exception, or worse, silent data corruption. It is also highly recommended to use the overload of Write() which accepts an NpgsqlDbType , allowing you to unambiguously specify exactly what type you want to write. Test your code throroughly. // Import two columns to table data using (var writer = conn.BeginBinaryImport(\"COPY data (field_text, field_int2) FROM STDIN (FORMAT BINARY)\")) { writer.StartRow(); writer.Write(\"Hello\"); writer.Write(8, NpgsqlDbType.Smallint); writer.StartRow(); writer.Write(\"Goodbye\"); writer.WriteNull(); writer.Complete(); } // Export two columns to table data using (var reader = Conn.BeginBinaryExport(\"COPY data (field_text, field_int2) TO STDOUT (FORMAT BINARY)\")) { reader.StartRow(); Console.WriteLine(reader.Read<string>()); Console.WriteLine(reader.Read<int>(NpgsqlDbType.Smallint)); reader.StartRow(); reader.Skip(); Console.WriteLine(reader.IsNull); // Null check doesn't consume the column Console.WriteLine(reader.Read<int>()); reader.StartRow(); // Last StartRow() returns -1 to indicate end of data } Text COPY This mode uses the PostgreSQL text or csv format to transfer data in and out of the database. It is the user's responsibility to format the text or CSV appropriately, Npgsql simply provides a TextReader or Writer. This mode is less efficient than binary copy, and is suitable mainly if you already have the data in a CSV or compatible text format and don't care about performance. using (var writer = conn.BeginTextImport(\"COPY data (field_text, field_int4) FROM STDIN\")) { writer.Write(\"HELLO\\t1\\n\"); writer.Write(\"GOODBYE\\t2\\n\"); } using (var reader = conn.BeginTextExport(\"COPY data (field_text, field_int4) TO STDOUT\")) { Console.WriteLine(reader.ReadLine()); Console.WriteLine(reader.ReadLine()); } Raw Binary COPY In this mode, data transfer is binary, but Npgsql does no encoding or decoding whatsoever - data is exposed as a raw .NET Stream. This mode makes sense only for bulk data and restore a table: the table is saved as a blob, which can later be restored. If you need to actually make sense of the data, you should be using regular binary mode instead (not raw). Example: int len; var data = new byte[10000]; // Export table1 to data array using (var inStream = conn.BeginRawBinaryCopy(\"COPY table1 TO STDOUT (FORMAT BINARY)\")) { // We assume the data will fit in 10000 bytes, in real usage you would read repeatedly, writine to a file. len = inStream.Read(data, 0, data.Length); } // Import data array into table2 using (var outStream = conn.BeginRawBinaryCopy(\"COPY table2 FROM STDIN (FORMAT BINARY)\")) { outStream.Write(data, 0, len); } Cancel Import operations can be cancelled at any time by disposing NpgsqlBinaryImporter without calling Complete() on it. Export operations can be cancelled as well, by calling Cancel() . Other See the CopyTests.cs test fixture for more usage samples."
  },
  "dev/types.html": {
    "href": "dev/types.html",
    "title": "PostgreSQL Types | Npgsql Documentation",
    "keywords": "Overview The following are notes by Emil Lenngren on PostgreSQL wire representation of types: bool: text: t or f binary: a byte: 1 or 0 bytea: text: either \\x followed by hex-characters (lowercase by default), or plain characters, where non-printable characters (between 0x20 and 0x7e, inclusive) are written as \\nnn (octal) and \\ is written as \\\\ binary: the bytes as they are char: This type holds a single char/byte. (Not to be confused with bpchar (blank-padded char) which is PostgreSQL's alias to the SQL standard's char). The char may be the null-character text: the char as a byte, encoding seems to be ignored binary: the char as a byte name: A null-padded string of NAMEDATALEN (currently 64) bytes (the last byte must be a null-character). Used in pg catalog. text: the name as a string binary: the name as a string int2/int4/int8: text: text representation in base 10 binary: binary version of the integer int2vector: non-null elements, 0-indexed, 1-dim text: 1 2 3 4 binary: same as int2[] oidvector: non-null elements, 0-indexed, 1-dim text: 1 2 3 4 binary: same as oid[] regproc: internally just an OID (UInt32) text: -, name of procedure, or numeric if not found binary: only the OID in binary regprocedure/regoper/regoperator/regclass/regconfig/regdictionary: similar to regproc text: text: the string as it is binary: the string as it is oid: A 32-bit unsigned integer used for internal object identification. text: the text-representation of this integer in base 10 binary: the UInt32 tid: tuple id Internally a tuple of a BlockNumber (UInt32) and an OffsetNumber (UInt16) text: (blockNumber,offsetNumber) binary: the block number in binary followed by offset number in binary xid: transaction id Internally just a TransactionId (UInt32) text: the number binary: the number in binary cid: command id Internally just a CommandId (UInt32) text: the number binary: the number in binary json: json text: the json an text binary: the json as text jsonb: json internally stored in an efficient binary format text: the json as text binary: An Int32 (version number, currently 1), followed by data (currently just json as text) xml: Xml. It is probably most efficient to use the text format, especially when receiving from client. text: the xml as text (when sent from the server: encoding removed, when receiving: assuming database encoding) binary: the xml as text (when sent from the server: in the client's specified encoding, when receiving: figures out itself) pg_node_tree: used as type for the column typdefaultbin in pg_type does not accept input text: text binary: text smgr: storage manager can only have the value \"magnetic disk\" text: magnetic disk binary: not available point: A tuple of two float8 text: (x,y) The floats are interpreted with the C strtod function. The floats are written with the snprintf function, with %.*g format. NaN/-Inf/+Inf can be written, but not interpretability depends on platform. The extra_float_digits setting is honored. For linux, NaN, [+-]Infinity, [+-]Inf works, but not on Windows. Windows also have other output syntax for these special numbers. (1.#QNAN for example) binary: the two floats lseg: A tuple of two points text: [(x1,y1),(x2,y2)] see point for details binary: the four floats in the order x1, y1, x2, y2 path: A boolean whether the path is opened or closed + a vector of points. text: [(x1,y1),...] for open path and ((x1,y1),...) for closed paths. See point for details. binary: first a byte indicating open (0) or close (1), then the number of points (Int32), then a vector of points box: A tuple of two points. The coordinates will be reordered so that the first is the upper right and the second is the lower left. text: (x1,y1),(x2,y2) see point for details binary: the four floats in the order x1, y1, x2, y2 (doesn't really matter since they will be reordered) polygon: Same as path but with two differences: is always closed and internally stores the bounding box. text: same as closed path binary: the number of points (Int32), then a vector of points line (version 9.4): Ax + By + C = 0. Stored with three float8. Constraint: A and B must not both be zero (only checked on text input, not binary). text: {A,B,C} see point for details about the string representation of floats. Can also use the same input format as a path with two different points, representing the line between those. binary: the three floats circle: <(x,y),r> (center point and radius), stored with three float8. text: <(x,y),r> see point for details about the string representation of floats. binary: the three floats x, y, r in that order float4/float8: text: (leading/trailing whitespace is skipped) interpreted with the C strtod function, but since it has problems with NaN, [+-]Infinity, [+-]Inf, those strings are identified (case-insensitively) separately. when outputting: NaN, [+-]Infinity is treated separately, otherwise the string is printed with snprintf %.*g and the extra_float_digits setting is honored. binary: the float abstime: A unix timestamp stored as a 32-bit signed integer with seconds-precision (seconds since 1970-01-01 00:00:00), in UTC Has three special values: Invalid (2^31-1), infinity (2^31-3), -infinity (-2^31) text: same format as timestamptz, or \"invalid\", \"infinity\", \"-infinity\" binary: Int32 reltime: A time interval with seconds-precision (stored as an 32-bit signed integer) text: same as interval binary: Int32 tinterval: Consists of a status (Int32) and two abstimes. Status is valid (1) iff both abstimes are valid, else 0. Note that the docs incorrectly states that ' is used as quote instead of \" text: [\"<abstime>\" \"<abstime>\"] binary: Int32 (status), Int32 (abstime 1), Int32 (abstime 2) unknown: text: text binary: text money: A 64-bit signed integer. For example, $123.45 is stored as the integer 12345. Number of fraction digits is locale-dependent. text: a locale-depedent string binary: the raw 64-bit integer macaddr: 6 bytes text: the 6 bytes in hex (always two characters per byte) separated by : binary: the 6 bytes appearing in the same order as when written in text inet/cidr: Struct of Family (byte: ipv4=2, ipv6=3), Netmask (byte with number of bits in the netmask), Ipaddr bytes (16) Text: The IP-address in text format and /netmask. /netmask is omitted in inet if the netmask is the whole address. Binary: family byte, netmask byte, byte (cidr=1, inet=0), number of bytes in address, bytes of the address aclitem: Access list item used in pg_class Text: Something like postgres=arwdDxt/postgres Binary: not available bpchar: Blank-padded char. The type modifier is used to blank-pad the input. text: text binary: text varchar: Variable-length char. The type modifier is used to check the input's length. text: text binary: text date: A signed 32-bit integer of a date. 0 = 2000-01-01. Infinity: INT_MAX, -Infinity: INT_MIN Text: Date only using the specified date style Binary: Int32 time: A signed 64-bit integer representing microseconds from 00:00:00.000000. (Legacy uses 64-bit float). Negative values are not allowed. Max value is 24:00:00.000000. text: hh:mm:ss or hh:mm:ss.ffffff where the fraction part is between 1 and 6 digits (trailing zeros are not written) binary: the 64-bit integer timetz: A struct of Time: A signed 64-bit integer representing microseconds from 00:00:00.000000. (Legacy uses 64-bit float). Negative values are not allowed. Max value is 24:00:00.000000. Zone: A signed 32-bit integer representing the zone (in seconds). Note that the sign is inverted. So GMT+1h is stored as -1h. text: hh:mm:ss or hh:mm:ss.ffffff where the fraction part is between 1 and 6 digits (trailing zeros are not written) binary: the 64-bit integer followed by the 32-bit integer timestamp: A signed 64-bit integer representing microseconds from 2000-01-01 00:00:00.000000 Infinity is LONG_MAX and -Infinity is LONG_MIN (Infinity would be 294277-01-09 04:00:54.775807) Earliest possible timestamp is 4714-11-24 00:00:00 BC. Even earlier would be possible, but due to internal calculations those are forbidden. text: dependent on date style binary: the 64-bit integer timestamptz: A signed 64-bit integer representing microseconds from 2000-01-01 00:00:00.000000 UTC. (Time zone is not stored). Infinity is LONG_MAX and -Infinity is LONG_MIN text: first converted to the time zone in the db settings, then printed according to the date style binary: the 64-bit integer interval: A struct of Time (Int64): all time units other than days, months and years (microseconds) Day (Int32): days, after time for alignment Month (Int32): months and years, after time for alignment text: Style dependent, but for example: \"-11 mons +15435 days -11111111:53:00\" binary: all fields in the struct bit/varbit: First a signed 32-bit integer containing the number of bits (negative length not allowed). Then all the bits in big end first. So a varbit of length 1 has the first (and only) byte set to either 0x80 or 0x00. Last byte is assumed (and is automatically zero-padded in recv) to be zero-padded. text: when sending from backend: all the bits, written with 1s and 0s. when receiving from client: (optionally b or B followed by) all the bits as 1s and 0s, or a x or X followed by hexadecimal digits (upper- or lowercase), big endian first. binary: the 32-bit length followed by the bytes containing the bits numeric: A variable-length numeric value, can be negative. text: NaN or first - if it is negative, then the digits with . as decimal separator binary: first a header of 4 16-bit signed integers: number of digits in the digits array that follows (can be 0, but not negative), weight of the first digit (10000^weight), can be both negative, positive or 0, sign: negative=0x4000, positive=0x0000, NaN=0xC000 dscale: number of digits (in base 10) to print after the decimal separator then the array of digits: The digits are stored in base 10000, where each digit is a 16-bit integer. Trailing zeros are not stored in this array, to save space. The digits are stored such that, if written as base 10000, the decimal separator can be inserted between two digits in base 10000, i.e. when this is to be printed in base 10, only the first digit in base 10000 can (possibly) be printed with less than 4 characters. Note that this does not apply for the digits after the decimal separator; the digits should be printed out in chunks of 4 characters and then truncated with the given dscale. refcursor: uses the same routines as text record: Describes a tuple. Is also the \"base class\" for composite types (i.e. it uses the same i/o functions). text: ( followed by a list of comma-separated text-encoded values followed by ). Empty element means null. Quoted with \" and \" if necessary. \" is escaped with \"\" and \\ is escaped with \\\\ (this differs from arrays where \" is escaped with \\\"). Must be quoted if it is an empty string or contains one of \"\\,() or a space. binary: First a 32-bit integer with the number of columns, then for each column: An OID indicating the type of the column The length of the column (32-bit integer), or -1 if null The column data encoded as binary cstring: text/binary: all characters are sent without the trailing null-character void: Used for example as return value in SELECT * FROM func_returning_void() text: an empty string binary: zero bytes uuid: A 16-byte uuid. text: group of 8, 4, 4, 4, 12 hexadecimal lower-case characters, separated by -. The first byte is written first. It is allowed to surround it with {}. binary: the 16 bytes txid_snapshot: (txid is a UInt64) A struct of UInt32 nxip (size of the xip array) txid xmin (no values in xip is smaller than this) txid xmax (no values in xip is larger than or equal this) txid[] xip (is ordered in ascending order) text: xmin:xmax:1,2,3,4 binary: all fields in the structure tsvector: Used for text searching. Example of tsvector: 'a':1,6,10 'on':5 'and':8 'ate':9A 'cat':3 'fat':2,11 'mat':7 'rat':12 'sat':4 Max length for each lexeme string is 2046 bytes (excluding the trailing null-char) The words are sorted when parsed, and only written once. Positions are also sorted and only written once. For some reason, the unique check does not seem to be made for binary input, only text input... text: As seen above. ' is escaped with '' and \\ is escaped with \\\\. binary: UInt32 number of lexemes for each lexeme: lexeme text in client encoding, null-terminated UInt16 number of positions for each position: UInt16 WordEntryPos, where the most significant 2 bits is weight, and the 14 least significant bits is pos (can't be 0). Weights 3,2,1,0 represent A,B,C,D tsquery: A tree with operands and operators (&, |, !). Operands are strings, with optional weight (bitmask of ABCD) and prefix search (yes/no, written with *). text: the tree written in infix notation. Example: ( 'abc':*B | 'def' ) & !'ghi' binary: the tree written in prefix notation: First the number of tokens (a token is an operand or an operator). For each token: UInt8 type (1 = val, 2 = oper) followed by For val: UInt8 weight + UInt8 prefix (1 = yes / 0 = no) + null-terminated string, For oper: UInt8 oper (1 = not, 2 = and, 3 = or, 4 = phrase). In case of phrase oper code, an additional UInt16 field is sent (distance value of operator). Default is 1 for <->, otherwise the n value in '<n>'. enum: Simple text gtsvector: GiST for tsvector. Probably internal type. int4range/numrange/tsrange/tstzrange/daterange/int8range and user-defined range types: /* A range's flags byte contains these bits: */ #define RANGE_EMPTY 0x01 /* range is empty */ #define RANGE_LB_INC 0x02 /* lower bound is inclusive */ #define RANGE_UB_INC 0x04 /* upper bound is inclusive */ #define RANGE_LB_INF 0x08 /* lower bound is -infinity */ #define RANGE_UB_INF 0x10 /* upper bound is +infinity */ #define RANGE_LB_NULL 0x20 /* lower bound is null (NOT USED) */ #define RANGE_UB_NULL 0x40 /* upper bound is null (NOT USED) */ #define RANGE_CONTAIN_EMPTY 0x80/* marks a GiST internal-page entry whose * subtree contains some empty ranges */ A range has no lower bound if any of RANGE_EMPTY, RANGE_LB_INF (or RANGE_LB_NULL, not used anymore) is set. The same applies for upper bounds. text: A range with RANGE_EMPTY is just written as the string \"empty\". Inclusive bounds are written with [ and ], else ( and ) is used. The two values are comma-separated. Missing bounds are written as an empty string (without quotes). Each value is quoted with \" if necessary. Quotes are necessary if the string is either the empty string or contains \"\\,()[] or spaces. \" is escaped with \"\" and \\ is escaped with \\\\. Example: [18,21] binary: First the flag byte. Then, if has lower bound: 32-bit length + binary-encoded data. Then, if has upper bound: 32-bit length + binary-encoded data. hstore: Key/value-store. Both keys and values are strings. text: Comma-space separated string, where each item is written as \"key\"=>\"value\" or \"key\"=>NULL. \" and \\ are escaped as \\\" and \\\\. Example: \"a\"=>\"b\", \"c\"=>NULL, \"d\"=>\"q\" binary: Int32 count for each item: Int32 keylen string of the key (not null-terminated) Int32 length of item (or -1 if null) the item as a string ghstore: internal type for indexing hstore domain types: mapped types used in information_schema: cardinal_number: int4 (must be nonnegative or null) character_data: varchar sql_identifier: varchar time_stamp: timestamptz yes_or_no: varchar(3) (must be \"YES\" or \"NO\" or null) intnotnull: when an int4 is cast to this type, it is checked that the int4 is not null, but it still returns an int4 and not intnotnull..."
  },
  "doc/dev/type-representations.html": {
    "href": "doc/dev/type-representations.html",
    "title": "PostgreSQL Types | Npgsql Documentation",
    "keywords": "Overview The following are notes by Emil Lenngren on PostgreSQL wire representation of types: bool: text: t or f binary: a byte: 1 or 0 bytea: text: either \\x followed by hex-characters (lowercase by default), or plain characters, where non-printable characters (between 0x20 and 0x7e, inclusive) are written as \\nnn (octal) and \\ is written as \\\\ binary: the bytes as they are char: This type holds a single char/byte. (Not to be confused with bpchar (blank-padded char) which is PostgreSQL's alias to the SQL standard's char). The char may be the null-character text: the char as a byte, encoding seems to be ignored binary: the char as a byte name: A null-padded string of NAMEDATALEN (currently 64) bytes (the last byte must be a null-character). Used in pg catalog. text: the name as a string binary: the name as a string int2/int4/int8: text: text representation in base 10 binary: binary version of the integer int2vector: non-null elements, 0-indexed, 1-dim text: 1 2 3 4 binary: same as int2[] oidvector: non-null elements, 0-indexed, 1-dim text: 1 2 3 4 binary: same as oid[] regproc: internally just an OID (UInt32) text: -, name of procedure, or numeric if not found binary: only the OID in binary regprocedure/regoper/regoperator/regclass/regconfig/regdictionary: similar to regproc text: text: the string as it is binary: the string as it is oid: A 32-bit unsigned integer used for internal object identification. text: the text-representation of this integer in base 10 binary: the UInt32 tid: tuple id Internally a tuple of a BlockNumber (UInt32) and an OffsetNumber (UInt16) text: (blockNumber,offsetNumber) binary: the block number in binary followed by offset number in binary xid: transaction id Internally just a TransactionId (UInt32) text: the number binary: the number in binary cid: command id Internally just a CommandId (UInt32) text: the number binary: the number in binary json: json text: the json an text binary: the json as text jsonb: json internally stored in an efficient binary format text: the json as text binary: An Int32 (version number, currently 1), followed by data (currently just json as text) xml: Xml. It is probably most efficient to use the text format, especially when receiving from client. text: the xml as text (when sent from the server: encoding removed, when receiving: assuming database encoding) binary: the xml as text (when sent from the server: in the client's specified encoding, when receiving: figures out itself) pg_node_tree: used as type for the column typdefaultbin in pg_type does not accept input text: text binary: text smgr: storage manager can only have the value \"magnetic disk\" text: magnetic disk binary: not available point: A tuple of two float8 text: (x,y) The floats are interpreted with the C strtod function. The floats are written with the snprintf function, with %.*g format. NaN/-Inf/+Inf can be written, but not interpretability depends on platform. The extra_float_digits setting is honored. For linux, NaN, [+-]Infinity, [+-]Inf works, but not on Windows. Windows also have other output syntax for these special numbers. (1.#QNAN for example) binary: the two floats lseg: A tuple of two points text: [(x1,y1),(x2,y2)] see point for details binary: the four floats in the order x1, y1, x2, y2 path: A boolean whether the path is opened or closed + a vector of points. text: [(x1,y1),...] for open path and ((x1,y1),...) for closed paths. See point for details. binary: first a byte indicating open (0) or close (1), then the number of points (Int32), then a vector of points box: A tuple of two points. The coordinates will be reordered so that the first is the upper right and the second is the lower left. text: (x1,y1),(x2,y2) see point for details binary: the four floats in the order x1, y1, x2, y2 (doesn't really matter since they will be reordered) polygon: Same as path but with two differences: is always closed and internally stores the bounding box. text: same as closed path binary: the number of points (Int32), then a vector of points line (version 9.4): Ax + By + C = 0. Stored with three float8. Constraint: A and B must not both be zero (only checked on text input, not binary). text: {A,B,C} see point for details about the string representation of floats. Can also use the same input format as a path with two different points, representing the line between those. binary: the three floats circle: <(x,y),r> (center point and radius), stored with three float8. text: <(x,y),r> see point for details about the string representation of floats. binary: the three floats x, y, r in that order float4/float8: text: (leading/trailing whitespace is skipped) interpreted with the C strtod function, but since it has problems with NaN, [+-]Infinity, [+-]Inf, those strings are identified (case-insensitively) separately. when outputting: NaN, [+-]Infinity is treated separately, otherwise the string is printed with snprintf %.*g and the extra_float_digits setting is honored. binary: the float abstime: A unix timestamp stored as a 32-bit signed integer with seconds-precision (seconds since 1970-01-01 00:00:00), in UTC Has three special values: Invalid (2^31-1), infinity (2^31-3), -infinity (-2^31) text: same format as timestamptz, or \"invalid\", \"infinity\", \"-infinity\" binary: Int32 reltime: A time interval with seconds-precision (stored as an 32-bit signed integer) text: same as interval binary: Int32 tinterval: Consists of a status (Int32) and two abstimes. Status is valid (1) iff both abstimes are valid, else 0. Note that the docs incorrectly states that ' is used as quote instead of \" text: [\"<abstime>\" \"<abstime>\"] binary: Int32 (status), Int32 (abstime 1), Int32 (abstime 2) unknown: text: text binary: text money: A 64-bit signed integer. For example, $123.45 is stored as the integer 12345. Number of fraction digits is locale-dependent. text: a locale-depedent string binary: the raw 64-bit integer macaddr: 6 bytes text: the 6 bytes in hex (always two characters per byte) separated by : binary: the 6 bytes appearing in the same order as when written in text inet/cidr: Struct of Family (byte: ipv4=2, ipv6=3), Netmask (byte with number of bits in the netmask), Ipaddr bytes (16) Text: The IP-address in text format and /netmask. /netmask is omitted in inet if the netmask is the whole address. Binary: family byte, netmask byte, byte (cidr=1, inet=0), number of bytes in address, bytes of the address aclitem: Access list item used in pg_class Text: Something like postgres=arwdDxt/postgres Binary: not available bpchar: Blank-padded char. The type modifier is used to blank-pad the input. text: text binary: text varchar: Variable-length char. The type modifier is used to check the input's length. text: text binary: text date: A signed 32-bit integer of a date. 0 = 2000-01-01. Infinity: INT_MAX, -Infinity: INT_MIN Text: Date only using the specified date style Binary: Int32 time: A signed 64-bit integer representing microseconds from 00:00:00.000000. (Legacy uses 64-bit float). Negative values are not allowed. Max value is 24:00:00.000000. text: hh:mm:ss or hh:mm:ss.ffffff where the fraction part is between 1 and 6 digits (trailing zeros are not written) binary: the 64-bit integer timetz: A struct of Time: A signed 64-bit integer representing microseconds from 00:00:00.000000. (Legacy uses 64-bit float). Negative values are not allowed. Max value is 24:00:00.000000. Zone: A signed 32-bit integer representing the zone (in seconds). Note that the sign is inverted. So GMT+1h is stored as -1h. text: hh:mm:ss or hh:mm:ss.ffffff where the fraction part is between 1 and 6 digits (trailing zeros are not written) binary: the 64-bit integer followed by the 32-bit integer timestamp: A signed 64-bit integer representing microseconds from 2000-01-01 00:00:00.000000 Infinity is LONG_MAX and -Infinity is LONG_MIN (Infinity would be 294277-01-09 04:00:54.775807) Earliest possible timestamp is 4714-11-24 00:00:00 BC. Even earlier would be possible, but due to internal calculations those are forbidden. text: dependent on date style binary: the 64-bit integer timestamptz: A signed 64-bit integer representing microseconds from 2000-01-01 00:00:00.000000 UTC. (Time zone is not stored). Infinity is LONG_MAX and -Infinity is LONG_MIN text: first converted to the time zone in the db settings, then printed according to the date style binary: the 64-bit integer interval: A struct of Time (Int64): all time units other than days, months and years (microseconds) Day (Int32): days, after time for alignment Month (Int32): months and years, after time for alignment text: Style dependent, but for example: \"-11 mons +15435 days -11111111:53:00\" binary: all fields in the struct bit/varbit: First a signed 32-bit integer containing the number of bits (negative length not allowed). Then all the bits in big end first. So a varbit of length 1 has the first (and only) byte set to either 0x80 or 0x00. Last byte is assumed (and is automatically zero-padded in recv) to be zero-padded. text: when sending from backend: all the bits, written with 1s and 0s. when receiving from client: (optionally b or B followed by) all the bits as 1s and 0s, or a x or X followed by hexadecimal digits (upper- or lowercase), big endian first. binary: the 32-bit length followed by the bytes containing the bits numeric: A variable-length numeric value, can be negative. text: NaN or first - if it is negative, then the digits with . as decimal separator binary: first a header of 4 16-bit signed integers: number of digits in the digits array that follows (can be 0, but not negative), weight of the first digit (10000^weight), can be both negative, positive or 0, sign: negative=0x4000, positive=0x0000, NaN=0xC000 dscale: number of digits (in base 10) to print after the decimal separator then the array of digits: The digits are stored in base 10000, where each digit is a 16-bit integer. Trailing zeros are not stored in this array, to save space. The digits are stored such that, if written as base 10000, the decimal separator can be inserted between two digits in base 10000, i.e. when this is to be printed in base 10, only the first digit in base 10000 can (possibly) be printed with less than 4 characters. Note that this does not apply for the digits after the decimal separator; the digits should be printed out in chunks of 4 characters and then truncated with the given dscale. refcursor: uses the same routines as text record: Describes a tuple. Is also the \"base class\" for composite types (i.e. it uses the same i/o functions). text: ( followed by a list of comma-separated text-encoded values followed by ). Empty element means null. Quoted with \" and \" if necessary. \" is escaped with \"\" and \\ is escaped with \\\\ (this differs from arrays where \" is escaped with \\\"). Must be quoted if it is an empty string or contains one of \"\\,() or a space. binary: First a 32-bit integer with the number of columns, then for each column: An OID indicating the type of the column The length of the column (32-bit integer), or -1 if null The column data encoded as binary cstring: text/binary: all characters are sent without the trailing null-character void: Used for example as return value in SELECT * FROM func_returning_void() text: an empty string binary: zero bytes uuid: A 16-byte uuid. text: group of 8, 4, 4, 4, 12 hexadecimal lower-case characters, separated by -. The first byte is written first. It is allowed to surround it with {}. binary: the 16 bytes txid_snapshot: (txid is a UInt64) A struct of UInt32 nxip (size of the xip array) txid xmin (no values in xip is smaller than this) txid xmax (no values in xip is larger than or equal this) txid[] xip (is ordered in ascending order) text: xmin:xmax:1,2,3,4 binary: all fields in the structure tsvector: Used for text searching. Example of tsvector: 'a':1,6,10 'on':5 'and':8 'ate':9A 'cat':3 'fat':2,11 'mat':7 'rat':12 'sat':4 Max length for each lexeme string is 2046 bytes (excluding the trailing null-char) The words are sorted when parsed, and only written once. Positions are also sorted and only written once. For some reason, the unique check does not seem to be made for binary input, only text input... text: As seen above. ' is escaped with '' and \\ is escaped with \\\\. binary: UInt32 number of lexemes for each lexeme: lexeme text in client encoding, null-terminated UInt16 number of positions for each position: UInt16 WordEntryPos, where the most significant 2 bits is weight, and the 14 least significant bits is pos (can't be 0). Weights 3,2,1,0 represent A,B,C,D tsquery: A tree with operands and operators (&, |, !). Operands are strings, with optional weight (bitmask of ABCD) and prefix search (yes/no, written with *). text: the tree written in infix notation. Example: ( 'abc':*B | 'def' ) & !'ghi' binary: the tree written in prefix notation: First the number of tokens (a token is an operand or an operator). For each token: UInt8 type (1 = val, 2 = oper) followed by For val: UInt8 weight + UInt8 prefix (1 = yes / 0 = no) + null-terminated string, For oper: UInt8 oper (1 = not, 2 = and, 3 = or, 4 = phrase). In case of phrase oper code, an additional UInt16 field is sent (distance value of operator). Default is 1 for <->, otherwise the n value in '<n>'. enum: Simple text gtsvector: GiST for tsvector. Probably internal type. int4range/numrange/tsrange/tstzrange/daterange/int8range and user-defined range types: /* A range's flags byte contains these bits: */ #define RANGE_EMPTY 0x01 /* range is empty */ #define RANGE_LB_INC 0x02 /* lower bound is inclusive */ #define RANGE_UB_INC 0x04 /* upper bound is inclusive */ #define RANGE_LB_INF 0x08 /* lower bound is -infinity */ #define RANGE_UB_INF 0x10 /* upper bound is +infinity */ #define RANGE_LB_NULL 0x20 /* lower bound is null (NOT USED) */ #define RANGE_UB_NULL 0x40 /* upper bound is null (NOT USED) */ #define RANGE_CONTAIN_EMPTY 0x80/* marks a GiST internal-page entry whose * subtree contains some empty ranges */ A range has no lower bound if any of RANGE_EMPTY, RANGE_LB_INF (or RANGE_LB_NULL, not used anymore) is set. The same applies for upper bounds. text: A range with RANGE_EMPTY is just written as the string \"empty\". Inclusive bounds are written with [ and ], else ( and ) is used. The two values are comma-separated. Missing bounds are written as an empty string (without quotes). Each value is quoted with \" if necessary. Quotes are necessary if the string is either the empty string or contains \"\\,()[] or spaces. \" is escaped with \"\" and \\ is escaped with \\\\. Example: [18,21] binary: First the flag byte. Then, if has lower bound: 32-bit length + binary-encoded data. Then, if has upper bound: 32-bit length + binary-encoded data. hstore: Key/value-store. Both keys and values are strings. text: Comma-space separated string, where each item is written as \"key\"=>\"value\" or \"key\"=>NULL. \" and \\ are escaped as \\\" and \\\\. Example: \"a\"=>\"b\", \"c\"=>NULL, \"d\"=>\"q\" binary: Int32 count for each item: Int32 keylen string of the key (not null-terminated) Int32 length of item (or -1 if null) the item as a string ghstore: internal type for indexing hstore domain types: mapped types used in information_schema: cardinal_number: int4 (must be nonnegative or null) character_data: varchar sql_identifier: varchar time_stamp: timestamptz yes_or_no: varchar(3) (must be \"YES\" or \"NO\" or null) intnotnull: when an int4 is cast to this type, it is checked that the int4 is not null, but it still returns an int4 and not intnotnull..."
  },
  "doc/types/geojson.html": {
    "href": "doc/types/geojson.html",
    "title": "PostGIS/GeoJSON Type Plugin | Npgsql Documentation",
    "keywords": "PostGIS/GeoJSON Type Plugin Before 4.0, Npgsql has supported reading and writing PostGIS types via some bundled .NET classes: PostgisPoint , PostgisLineString , etc. While this model provided some basic support, a proper representation of spatial types is a complicated task that's beyond Npgsql's scope, and should be handled by a specialized spatial library instead. The Npgsql.GeoJSON plugin makes Npgsql read and write PostGIS spatial types as GeoJSON (RFC7946) types , via the GeoJSON.NET library. As an alternative, you can use Npgsql.NetTopologySuite , which is a full-fledged .NET spatial library with many features. If you prefer to work with the pre-4.0 types, you can still do so by using the Npgsql.LegacyPostgis plugin . Setup To use the GeoJSON plugin, simply add a dependency on Npgsql.GeoJSON and set it up: using Npgsql; // Place this at the beginning of your program to use NetTopologySuite everywhere (recommended) NpgsqlConnection.GlobalTypeMapper.UseGeoJSON(); // Or to temporarily use GeoJSON on a single connection only: conn.TypeMapper.UseGeoJSON(); Reading and Writing Geometry Values When reading PostGIS values from the database, Npgsql will automatically return the appropriate GeoJSON types: Point , LineString , and so on. Npgsql will also automatically recognize GeoJSON's types in parameters, and will automatically send the corresponding PostGIS type to the database. The following code demonstrates a roundtrip of a GeoJSON Point to the database: var point = new Point(new Position(51.899523, -2.124156)); conn.ExecuteNonQuery(\"CREATE TEMP TABLE data (geom GEOMETRY)\"); using (var cmd = new NpgsqlCommand(\"INSERT INTO data (geom) VALUES (@p)\", conn)) { cmd.Parameters.AddWithValue(\"@p\", point); cmd.ExecuteNonQuery(); } using (var cmd = new NpgsqlCommand(\"SELECT geom FROM data\", conn)) using (var reader = cmd.ExecuteReader()) { reader.Read(); Assert.That(reader[0], Is.EqualTo(point)); } You may also explicitly specify a parameter's type by setting NpgsqlDbType.Geometry . Geography (geodetic) Support PostGIS has two types: geometry (for Cartesian coordinates) and geography (for geodetic or spherical coordinates). You can read about the geometry/geography distinction in the PostGIS docs or in this blog post . In a nutshell, geography is much more accurate when doing calculations over long distances, but is more expensive computationally and supports only a small subset of the spatial operations supported by geometry . Npgsql uses the same GeoJSON types to represent both geometry and geography - the Point type represents a point in either Cartesian or geodetic space. You usually don't need to worry about this distinction because PostgreSQL will usually cast types back and forth as needed. However, it's worth noting that Npgsql sends Cartesian geometry by default, because that's the usual requirement. You have the option of telling Npgsql to send geography instead by specifying NpgsqlDbType.Geography : using (var cmd = new NpgsqlCommand(\"INSERT INTO data (geog) VALUES (@p)\", conn)) { cmd.Parameters.AddWithValue(\"@p\", NpgsqlDbType.Geography, point); cmd.ExecuteNonQuery(); } If you prefer to use geography everywhere by default, you can also specify that when setting up the plugin: NpgsqlConnection.GlobalTypeMapper.UseGeoJSON(geographyAsDefault: true);"
  },
  "doc/types/datetime.html": {
    "href": "doc/types/datetime.html",
    "title": "Date and Time Handling | Npgsql Documentation",
    "keywords": "Date and Time Handling Note Since 4.0 the recommended way of working with date/time types is the NodaTime plugin . Handling date and time values usually isn't hard, but you must pay careful attention to differences in how the .NET types and PostgreSQL represent dates. It's worth reading the PostgreSQL date/time type documentation to familiarize yourself with PostgreSQL's types. .NET types and PostgreSQL types Warning A common mistake is for users to think that the PostgreSQL timestamp with timezone type stores the timezone in the database. This is not the case: only the timestamp is stored. There is no single PostgreSQL type that stores both a date/time and a timezone, similar to .NET DateTimeOffset . The .NET and PostgreSQL types differ in the resolution and range they provide; the .NET type usually have a higher resolution but a lower range than the PostgreSQL types: PostgreSQL type Precision/Range .NET Native Type Precision/Range Npgsql .NET Provider-Specific Type timestamp 1 microsecond, 4713BC-294276AD DateTime 100 nanoseconds, 1AD-9999AD NpgsqlDateTime timestamp with timezone 1 microsecond, 4713BC-294276AD DateTime 100 nanoseconds, 1AD-9999AD NpgsqlDateTime date 1 day, 4713BC-5874897AD DateTime 100 nanoseconds, 1AD-9999AD NpgsqlDate time 1 microsecond, 0-24 hours TimeSpan 100 nanoseconds, -10,675,199 - 10,675,199 days N/A time with timezone 1 microsecond, 0-24 hours DateTimeOffset (ignore date) 100 nanoseconds, 1AD-9999AD N/A interval 1 microsecond, -178000000-178000000 years TimeSpan 100 nanoseconds, -10,675,199 - 10,675,199 days NpgsqlTimeSpan If your needs are met by the .NET native types, it is best that you use them directly with Npgsql. If, however, you require the extended range of a PostgreSQL type you can use Npgsql's provider-specific types, which represent PostgreSQL types in an exact way. Timezones It's critical to understand exactly how timezones and timezone conversions are handled between .NET types and PostgreSQL. In particular, .NET's DateTime has a Kind property which impacts how Npgsql reads and writes the value. By default, DateTime is sent to PostgreSQL as a timestamp without time zone - no timezone conversion of any kind will occur, and your DateTime instance will be transferred as-is to PostgreSQL. This is the recommended way to store timestamps in the database. Note that you may still send DateTime as timestamp with time zone by setting NpgsqlDbType.TimestampTz on your NpgsqlParameter ; in this case, if the Kind is Local , Npgsql will convert the value to UTC before sending it to PostgreSQL. Otherwise, it will be sent as-is. You can also send DateTimeOffset values, which are written as timestamptz and are converted to UTC before sending. PostgreSQL time with time zone is the only date/time type which actually stores a timezone in the database. You can use a DateTimeOffset to send one to PostgreSQL, in which case the date component is dropped and the time and timezone are preserved. You can also send a DateTime , in which case the Kind will determine the the timezone sent to the database. Detailed Behavior: Sending values to the database .NET value NpgsqlDbType Action DateTime NpgsqlDbType.Timestamp (default) Send as-is DateTime(Kind=UTC,Unspecified) NpgsqlDbType.TimestampTz Send as-is DateTime(Kind=Local) NpgsqlDbType.TimestampTz Convert to UTC locally before sending DateTimeOffset NpgsqlDbType.TimestampTz (default) Convert to UTC locally before sending TimeSpan NpgsqlDbType.Time (default) Send as-is DateTimeOffset NpgsqlDbType.TimeTz Send time and timezone DateTime(Kind=UTC) NpgsqlDbType.TimeTz Send time and UTC timezone DateTime(Kind=Local) NpgsqlDbType.TimeTz Send time and local system timezone DateTime(Kind=Unspecified) NpgsqlDbType.TimeTz Assume local, send time and local system timezone Detailed Behavior: Reading values from the database PG type .NET value Action timestamp DateTime (default) Kind=Unspecified timestamptz DateTime (default) Kind=Local (according to system timezone) timestamptz DateTimeOffset In local timezone offset time TimeSpan (default) As-is timetz DateTimeOffset (default) Date component is empty timetz TimeSpan Strip offset, read as-is timetz DateTime Strip offset, date is empty Further Reading If you're really interested in some of the mapping decisions above, check out this issue ."
  },
  "doc/types/enums_and_composites.html": {
    "href": "doc/types/enums_and_composites.html",
    "title": "PostgreSQL enums and composites | Npgsql Documentation",
    "keywords": "PostgreSQL enums and composites PostgreSQL supports enum types and composite types as database columns, and Npgsql supports reading and writing these. This allows you to seamlessly read and write enum and composite values to the database without worrying about conversions. Mapping your CLR types The recommended way to work with enums and composites is to set up a mapping for your CLR types. Doing so provides the following advantages: To set up a global mapping that applies to all connections, place this code before the initial connection is opened: NpgsqlConnection.GlobalTypeMapper.MapEnum<SomeEnum>(\"some_enum_type\"); NpgsqlConnection.GlobalTypeMapper.MapComposite<SomeType>(\"some_composite_type\"); This sets up a mapping between your CLR types SomeEnum and SomeType to the PostgreSQL types some_enum_type and some_composite_type . If you don't want to set up a mapping for all your connections, you can set it up one connection only: var conn = new NpgsqlConnection(...); conn.TypeMapper.MapEnum<SomeEnum>(\"some_enum_type\"); conn.TypeMapper.MapComposite<SomeType>(\"some_composite_type\"); After mapping, you can read and write your CLR types as usual: // Writing using (var cmd = new NpgsqlCommand(\"INSERT INTO some_table (some_enum_column, some_composite_column) VALUES (@p1, @p2)\", conn)) { cmd.Parameters.Add(new NpgsqlParameter { ParameterName = \"p1\", Value = SomeEnum.Good }); cmd.Parameters.Add(new NpgsqlParameter { ParameterName = \"p2\", Value = new SomeType { ... } }); cmd.ExecuteNonQuery(); } // Reading using (var cmd = new NpgsqlCommand(\"SELECT some_enum_column, some_composite_column FROM some_table\", conn)) using (var reader = cmd.ExecuteReader()) { reader.Read(); var enumValue = reader.GetFieldValue<SomeEnum>(0); var compositeValue = reader.GetFieldValue<SomeType>(1); } Note that your PostgreSQL enum and composites types ( some_enum_type and some_composite_type in the sample above) must be defined in your database before the first connection is created (see CREATE TYPE ). If you're creating PostgreSQL types within your program, call NpgsqlConnection.ReloadTypes() to make sure Npgsql becomes properly aware of them. Name Translation CLR type and field names are usually camel case (e.g. SomeType ), whereas in PostgreSQL they are snake case (e.g. some_type ). To help make the mapping for enums and composites seamless, pluggable name translators are used translate all names. The default translation scheme is NpgsqlSnakeCaseNameTranslator , which maps names like SomeType to some_type , but you can specify others. The default name translator can be set for all your connections via NpgsqlConnection.GlobalTypeMapper.DefaultNameTranslator , or for a specific connection for NpgsqlConnection.TypeMapper.DefaultNameTranslator . You also have the option of specifying a name translator when setting up a mapping: NpgsqlConnection.GlobalTypeMapper.MapComposite<SomeType>(\"some_type\", new NpgsqlNullNameTranslator()); Finally, you may control mappings on a field-by-field basis via the [PgName] attribute. This will override the name translator. using NpgsqlTypes; enum SomeEnum { [PgName(\"happy\")] Good, [PgName(\"sad\")] Bad } Reading and Writing Dynamically (without CLR types) In some cases, it may be desirable to interact with PostgreSQL enums and composites without a pre-existing CLR type - this is useful mainly if your program doesn't know the database schema and types in advance, and needs to interact with any enum/composite type. Note that using CLR types is safer and faster (for composites), and should be preferred when possible. Enums can be read and written as simple strings: // Writing enum as string using (var cmd = new NpgsqlCommand(\"INSERT INTO some_table (some_enum_column) VALUES (@p1)\", conn)) { cmd.Parameters.Add(new NpgsqlParameter { ParameterName = \"p1\", Value = \"Good\" DataTypeName = \"some_enum_type\" }); cmd.ExecuteNonQuery(); } // Reading enum as string using (var cmd = new NpgsqlCommand(\"SELECT some_enum_column FROM some_table\", conn)) using (var reader = cmd.ExecuteReader()) { reader.Read(); var enumValue = reader.GetFieldValue<string>(0); } Composites can be read and written as C# dynamic ExpandoObjects: // Writing composite as ExpandoObject using (var cmd = new NpgsqlCommand(\"INSERT INTO some_table (some_composite_column) VALUES (@p1)\", Conn)) { var someComposite = new ExpandoObject(); some_composite.Foo = 8; some_composite.Bar = \"hello\"; cmd.Parameters.Add(new NpgsqlParameter { ParameterName = \"p1\", Value = someComposite, DataTypeName = \"some_composite_type\" }); cmd.ExecuteNonQuery(); } // Reading composite as ExpandoObject using (var cmd = new NpgsqlCommand(\"SELECT some_composite_column FROM some_table\", conn)) using (var reader = cmd.ExecuteReader()) { reader.Read(); var compositeValue = (dynamic)reader.GetValue(0); Console.WriteLine(compositeValue.Foo); Console.WriteLine(compositeValue.Bar); } As long as your CLR types SomeEnum and SomeType contain fields/properties which correspond to the PostgreSQL type being read/written, everything will work as expected. Note that the default name translator is used (see the section about name translation)."
  },
  "doc/types/basic.html": {
    "href": "doc/types/basic.html",
    "title": "Supported Types and their Mappings | Npgsql Documentation",
    "keywords": "Supported Types and their Mappings The following lists the built-in mappings when reading and writing CLR types to PostgreSQL types. Note that in addition to the below, enum and composite mappings are documented in a separate page . Note also that several plugins exist to add support for more mappings (e.g. spatial support for PostGIS), these are listed in the Types menu. Read mappings The following shows the mappings used when reading values. The default type is returned when using NpgsqlCommand.ExecuteScalar() , NpgsqlDataReader.GetValue() and similar methods. You can read as other types by calling NpgsqlDataReader.GetFieldValue<T>() . Provider-specific types are returne by NpgsqlDataReader.GetProviderSpecificValue() . PostgreSQL type Default .NET type Provider-specific type Other .NET types boolean bool smallint short byte, sbyte, int, long, float, double, decimal integer int byte, short, long, float, double, decimal bigint long long, byte, short, int, float, double, decimal real float double double precision double numeric decimal byte, short, int, long, float, double money decimal text string char[] character varying string char[] character string char[] citext string char[] json string char[] jsonb string char[] xml string char[] point NpgsqlPoint lseg NpgsqlLSeg path NpgsqlPath polygon NpgsqlPolygon line NpgsqlLine circle NpgsqlCircle box NpgsqlBox bit(1) bool BitArray bit(n) BitArray bit varying BitArray hstore Dictionary<string, string> uuid Guid cidr (IPAddress, int) NpgsqlInet inet IPAddress (IPAddress, int) NpgsqlInet macaddr PhysicalAddress tsquery NpgsqlTsQuery tsvector NpgsqlTsVector date DateTime NpgsqlDate interval TimeSpan NpgsqlTimeSpan timestamp DateTime (Unspecified) NpgsqlDateTime timestamp with time zone DateTime (Local) NpgsqlDateTime DateTimeOffset time TimeSpan time with time zone DateTimeOffset DateTimeOffset, DateTime, TimeSpan bytea byte[] oid uint xid uint cid uint oidvector uint[] name string char[] (internal) char char byte, short, int, long geometry (PostGIS) PostgisGeometry record object[] composite types T range subtypes NpgsqlRange<TElement> enum types TEnum array types Array (of element type) The Default .NET type column specifies the data type NpgsqlDataReader.GetValue() will return. NpgsqlDataReader.GetProviderSpecificValue will return a value of a data type specified in the Provider-specific type column, or the Default .NET type if there is no specialization. Finally, the third column specifies other CLR types which Npgsql supports for the PostgreSQL data type. These can be retrieved by calling NpgsqlDataReader.GetBoolean() , GetByte() , GetDouble() etc. or via GetFieldValue<T>() . Write mappings There are three rules that determine the PostgreSQL type sent for a parameter: If the parameter's NpgsqlDbType is set, it is used. If the parameter's DataType is set, it is used. If the parameter's DbType is set, it is used. If none of the above is set, the backend type will be inferred from the CLR value type. Note that for DateTime and NpgsqlDateTime , the Kind attribute determines whether to use timestamp or timestamptz . NpgsqlDbType DbType PostgreSQL type Accepted .NET types Boolean Boolean boolean bool Smallint Int16 smallint short Integer Int32 integer int Bigint Int64 bigint long Real Single real float Double Double double precision double Numeric Decimal, VarNumeric numeric decimal Money Currency money decimal Text String, StringFixedLength, AnsiString, AnsiStringFixedLength text string, char[], char Varchar character varying string, char[], char Char character string, char[], char Citext citext string, char[], char Json json string, char[], char Jsonb jsonb string, char[], char Xml xml string, char[], char Point point NpgsqlPoint LSeg lseg NpgsqlLSeg Path path NpgsqlPath Polygon polygon NpgsqlPolygon Line line NpgsqlLine Circle circle NpgsqlCircle Box box NpgsqlBox Bit bit BitArray, bool, string Varbit bit varying BitArray, bool, string Hstore hstore IDictionary<string, string> Uuid uuid Guid Cidr cidr ValueTuple<IPAddress, int>, IPAddress, NpgsqlInet Inet inet ValueTuple<IPAddress, int>, IPAddress, NpgsqlInet MacAddr macaddr PhysicalAddress TsQuery tsquery NpgsqlTsQuery TsVector tsvector NpgsqlTsVector Date Date date DateTime, NpgsqlDate Interval interval TimeSpan, NpgsqlTimeSpan Timestamp DateTime, DateTime2 timestamp DateTime, NpgsqlDateTime TimestampTz DateTimeOffset timestamp with time zone DateTime, DateTimeOffset, NpgsqlDateTime Time Time time TimeSpan TimeTz time with time zone DateTimeOffset, DateTime, TimeSpan Bytea Binary bytea byte[], ArraySegment<byte> Oid oid uint Xid xid uint Cid cid uint Oidvector oidvector uint[] Name name string, char[], char InternalChar (internal) char byte Composite composite types T Range | (other NpgsqlDbType) range types NpgsqlRange<TElement> Enum enum types TEnum Array | (other NpgsqlDbType) array types Array, IList<T>, IList Notes when using Range and Array, bitwise-or NpgsqlDbType.Range or NpgsqlDbType.Array with the child type. For example, to construct the NpgsqlDbType for a int4range , write NpgsqlDbType.Range | NpgsqlDbType.Integer . To construct the NpgsqlDbType for an int[] , write NpgsqlDbType.Array | NpgsqlDbType.Integer . For information about enums, see the Enums and Composites page . .NET type Auto-inferred PostgreSQL type bool boolean byte smallint sbyte smallint short smallint int integer long bigint float real double double precision decimal numeric string text char[] text char text NpgsqlPoint point NpgsqlLSeg lseg NpgsqlPath path NpgsqlPolygon polygon NpgsqlLine line NpgsqlCircle circle NpgsqlBox box BitArray bit varying Guid uuid IPAddress inet NpgsqlInet inet PhysicalAddress macaddr NpgsqlTsQuery tsquery NpgsqlTsVector tsvector NpgsqlDate date NpgsqlDateTime timestamp DateTime timestamp DateTimeOffset timestamp with time zone TimeSpan interval byte[] bytea Custom composite type composite types NpgsqlRange<TElement> range types Enum types enum types Array types array types"
  },
  "doc/compatibility.html": {
    "href": "doc/compatibility.html",
    "title": "Compatibility Notes | Npgsql Documentation",
    "keywords": "Compatibility Notes This page centralizes Npgsql's compatibility status with PostgreSQL and other components, and documents some important gotchas. PostgreSQL We aim to be compatible with all currently supported PostgreSQL versions , which means 5 years back. Earlier versions may still work but we don't perform continuous testing on them or commit to resolving issues on them. ADO.NET Npgsql is an ADO.NET-compatible provider, so it has the same APIs as other .NET database drivers and should behave the same. Please let us know if you notice any non-standard behavior. .NET Framework/.NET Core/mono Npgsql currently targets .NET Framework 4.6.1, as well as the .NET Standard 2.0 which allows it to run on .NET Core. It is also tested and runs well on mono. Amazon Redshift Amazon Redshift is a cloud-based data warehouse originally based on PostgreSQL 8.0.2. In addition, due to its nature some features have been removed and others changed in ways that make them incompatible with PostgreSQL. We try to support Redshift as much as we can, please let us know about issues you run across. First, check out Amazon's page about Redshift and PostgreSQL which contains lots of useful compatibility information. Additional known issues: If you want to connect over SSL, your connection string must contain Server Compatibility Mode=Redshift , otherwise you'll get a connection error about ssl_renegotiation_limit . Entity Framework with database-computed identity values don't work with Redshift, since it doesn't support sequences (see issue #544 ). DigitalOcean Managed Database DigitalOcean's Managed Database services requires you to connect to PostgreSQL over SSL. Unfortunately when you enable it in your connection string, you will get the same error regarding ssl_renegotiation_limit as Amazon Redshift. The Redshift compatibility mode setting resolves the issue on DigitalOcean. pgbouncer Npgsql works well with PgBouncer, but there are some quirks to be aware of. In many cases, you'll want to turn off Npgsql's internal connection pool by specifying Pooling=false on the connection string. If you decide to keep Npgsql pooling on along with PgBouncer, and are using PgBouncer's transaction or statement mode, then you need to specify No Reset On Close=true on the connection string. This disables Npgsql's connection reset logic ( DISCARD ALL ), which gets executed when a connection is return to Npgsql's pool, and which makes no sense in these modes. Prior to version 3.1, Npgsql sends the statement_timeout startup parameter when it connects, but this parameter isn't supported by pgbouncer. You can get around this by specifying CommandTimeout=0 on the connection string, and then manually setting the CommandTimeout property on your NpgsqlCommand objects. Version 3.1 no longer sends statement_timeout ."
  },
  "doc/contributing.html": {
    "href": "doc/contributing.html",
    "title": "Contributing to Npgsql | Npgsql Documentation",
    "keywords": "Contributing to Npgsql As a general rule, Npgsql makes no attempt to validate what it sends to PostgreSQL. For all cases where PostgreSQL would simply return a reasonable error, we prefer that to happen rather than checking replicating validation checks client-side."
  },
  "doc/performance.html": {
    "href": "doc/performance.html",
    "title": "Performance | Npgsql Documentation",
    "keywords": "Performance Prepared Statements One of the most important (and easy) ways to improve your application's performance is to prepare your commands. Even if you're not coding against ADO.NET directly (e.g. using Dapper or an O/RM), Npgsql has an automatic preparation feature which allows you to benefit from the performance gains associated with prepared statements. See this blog post and/or the documentation for more details. Batching/Pipelining When you execute a command, Npgsql executes a roundtrip to the database. If you execute multiple commands (say, inserting 3 rows or performing multiple selects), you're executing multiple roundtrips; each command has to complete before the next command can start execution. Depending on your network latency, this can considerably degrade your application's performance. You can batch multiple SQL statements in a single command, executing them a single roundtrip: using (var cmd = new NpgsqlCommand(\"SELECT ...; SELECT ...\")) using (var reader = cmd.ExecuteReader()) { while (reader.Read()) { // Read first resultset } reader.NextResult(); while (reader.Read()) { // Read second resultset } } Performance Counters Npgsql 3.2 includes support for performance counters , which provide visibility into connections and the connection pool - this helps you understand what your application is doing in real-time, whether there's a connection leak, etc. Npgsql counter support is very similar to that of other ADO.NET providers, such as SqlClient , it's recommended that your read that page first. Using performance counters first involves setting them up on your Windows system. To do this you will need to install Npgsql's MSI, which is available on the github releases page . Note that GAC installation isn't necessary (or recommended). Once the counters are installed, fire up the Windows Performance Monitor and look for the category \".NET Data Provider for PostgreSQL (Npgsql)\". In addition, you will need to pass Use Perf Counters=true on your connection string. Once you start your Npgsql application with this addition, you should start seeing real-time data in the Performance Monitor. Performance counters are currently only available on Windows with .NET Framework (.NET Core doesn't include performance counters yet). Disable enlisting to TransactionScope By default, Npgsql will enlist to ambient transactions. This occurs when a connection is opened while inside a TransactionScope , and can provide a powerful programming model for working with transactions. However, this involves checking whether an ambient transaction is in progress each time a (pooled) connection is open, an operation that takes more time than you'd think. Scenarios where connections are very short-lived and open/close happens very frequently can benefit from removing this check - simply include Enlist=false in the connection string. Note that you can still enlist manually by calling NpgsqlConnection.Enlist() . Pooled Connection Reset When a pooled connection is closed, Npgsql will arrange for its state to be reset the next time it's used. This prevents leakage of state from one usage cycle of a physical connection to another one. For example, you may change certain PostgreSQL parameters (e.g. statement_timeout ), and it's undesirable for this change to persist when the connection is closed. Connection reset happens via the PostgreSQL DISCARD ALL command , or, if there are any prepared statements at the time of closing, by a combination of the equivalent statements described in the docs (to prevent closing those statements). Note that these statements aren't actually sent when closing the connection - they're written into Npgsql's internal write buffer, and will be sent with the first user statement after the connection is reopened. This prevents a costly database roundtrip. If you really want to squeeze every last bit of performance from PostgreSQL, you may disable connect reset by specifying No Reset On Close on your connection string - this will slightly improve performance in scenarios where connection are very short-lived, and especially if prepared statements are in use. Reading Large Values When reading results from PostgreSQL, Npgsql first reads raw binary data from the network into an internal read buffer, and then parses that data as you call methods such as NpgsqlDataReader.GetString() . While this allows for efficient network reads, it's worth thinking about the size of this buffer, which is 8K by default. Under normal usage,, Npgsql attempts to read each row into the buffer; if that entire row fits in 8K, you'll have optimal performance. However, if a row is bigger than 8K, Npgsql will allocate an \"oversize buffer\", which will be used until the connection is closed or returned to the pool. If you're not careful, this can create significant memory churn that will slow down your application. To avoid this, if you know you're going to be reading 16k rows, you can specify Read Buffer Size=18000 in your connection string (leaving some margin for protocol overhead), this will ensure that the read buffer is reused and no extra allocation occur. Another option is to pass CommandBehavior.SequentialAccess to NpgsqlCommand.ExecuteReader() . Sequential mode means that Npgsql will no longer read entire rows into its buffer, but will rather fill up the buffer as needed, reading more data only when it's empty. The same 8K read buffer will be used regardless of the row's total size, and Npgsql will take care of the details. In sequential mode, however, you must read the row's fields in the order in which you specified them; you cannot read the 2nd field and then go back to the 1st field, and trying to do so will generate an exception. Similarly, you cannot read the same field twice - once you've read a field, it has been consumed. For more information on CommandBehavior.SequentialAccess , see this page . If you decide to use this feature, be aware that it isn't used as often and may therefore contain bugs. You can also control the socket's receive buffer size (not to be confused with Npgsql's internal buffer) by setting the Socket Receive Buffer Size connection string parameter. Writing Large Values Writing is somewhat similar - Npgsql has an internally write buffer (also 8K by default). When writing your query's SQL and parameters to PostgreSQL, Npgsql always writes \"sequentially\", that is, filling up the 8K buffer and flushing it when full. You can use Write Buffer Size to control the buffer's size. You can also control the socket's receive buffer size (not to be confused with Npgsql's internal buffer) by setting the Socket Receive Buffer Size connection string parameter. Avoiding boxing when writing parameter values See this section . Unix Domain Socket If you're on Linux or macOS and are connecting to a PostgreSQL server on the same machine, you can boost performance a little by connecting via Unix domain socket rather than via a regular TCP/IP socket. To do this, simply specify the directory of your PostgreSQL sockets in the Host connection string parameter - if this parameter starts with a slash, it will be taken to mean a filesystem path."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlByteArrayTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlByteArrayTypeMapping.html",
    "title": "Class NpgsqlByteArrayTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlByteArrayTypeMapping Inheritance System.Object NpgsqlByteArrayTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlByteArrayTypeMapping : RelationalTypeMapping Constructors | Improve this Doc View Source NpgsqlByteArrayTypeMapping() Declaration public NpgsqlByteArrayTypeMapping() | Improve this Doc View Source NpgsqlByteArrayTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlByteArrayTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.NpgsqlHistoryRepository.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.NpgsqlHistoryRepository.html",
    "title": "Class NpgsqlHistoryRepository | Npgsql Documentation",
    "keywords": "Class NpgsqlHistoryRepository Inheritance System.Object NpgsqlHistoryRepository Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlHistoryRepository : HistoryRepository Constructors | Improve this Doc View Source NpgsqlHistoryRepository(HistoryRepositoryDependencies) Declaration public NpgsqlHistoryRepository(HistoryRepositoryDependencies dependencies) Parameters Type Name Description HistoryRepositoryDependencies dependencies Properties | Improve this Doc View Source ExistsSql Declaration protected override string ExistsSql { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetBeginIfExistsScript(String) Declaration public override string GetBeginIfExistsScript(string migrationId) Parameters Type Name Description System.String migrationId Returns Type Description System.String | Improve this Doc View Source GetBeginIfNotExistsScript(String) Declaration public override string GetBeginIfNotExistsScript(string migrationId) Parameters Type Name Description System.String migrationId Returns Type Description System.String | Improve this Doc View Source GetCreateIfNotExistsScript() Declaration public override string GetCreateIfNotExistsScript() Returns Type Description System.String | Improve this Doc View Source GetEndIfScript() Declaration public override string GetEndIfScript() Returns Type Description System.String | Improve this Doc View Source InterpretExistsResult(Object) Declaration protected override bool InterpretExistsResult(object value) Parameters Type Name Description System.Object value Returns Type Description System.Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDateTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlDateTypeMapping.html",
    "title": "Class NpgsqlDateTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlDateTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlDateTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDateTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlDateTypeMapping() Declaration public NpgsqlDateTypeMapping() | Improve this Doc View Source NpgsqlDateTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlDateTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlGeometryTypeMapping-1.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlGeometryTypeMapping-1.html",
    "title": "Class NpgsqlGeometryTypeMapping<TGeometry> | Npgsql Documentation",
    "keywords": "Class NpgsqlGeometryTypeMapping<TGeometry> Inheritance System.Object NpgsqlGeometryTypeMapping<TGeometry> Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlGeometryTypeMapping<TGeometry> : RelationalGeometryTypeMapping<TGeometry, TGeometry> Type Parameters Name Description TGeometry Constructors | Improve this Doc View Source NpgsqlGeometryTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlGeometryTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters | Improve this Doc View Source NpgsqlGeometryTypeMapping(String, Boolean) Declaration public NpgsqlGeometryTypeMapping(string storeType, bool isGeography) Parameters Type Name Description System.String storeType System.Boolean isGeography Properties | Improve this Doc View Source WKTReaderType Declaration protected override Type WKTReaderType { get; } Property Value Type Description System.Type Methods | Improve this Doc View Source AsText(Object) Declaration protected override string AsText(object value) Parameters Type Name Description System.Object value Returns Type Description System.String | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source ConfigureParameter(DbParameter) Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description System.Data.Common.DbParameter parameter | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String | Improve this Doc View Source GetSrid(Object) Declaration protected override int GetSrid(object value) Parameters Type Name Description System.Object value Returns Type Description System.Int32"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlTransientExceptionDetector.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlTransientExceptionDetector.html",
    "title": "Class NpgsqlTransientExceptionDetector | Npgsql Documentation",
    "keywords": "Class NpgsqlTransientExceptionDetector Detects the exceptions caused by PostgreSQL or network transient failures. Inheritance System.Object NpgsqlTransientExceptionDetector Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTransientExceptionDetector Methods | Improve this Doc View Source ShouldRetryOn(Exception) Declaration public static bool ShouldRetryOn(Exception ex) Parameters Type Name Description System.Exception ex Returns Type Description System.Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Classes NpgsqlSequenceHiLoValueGenerator<TValue> This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. NpgsqlSequenceValueGeneratorFactory This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. NpgsqlSequenceValueGeneratorState This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. NpgsqlValueGeneratorCache This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. NpgsqlValueGeneratorSelector Interfaces INpgsqlSequenceValueGeneratorFactory This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. INpgsqlValueGeneratorCache This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlValueGenerationStrategyConvention.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlValueGenerationStrategyConvention.html",
    "title": "Class NpgsqlValueGenerationStrategyConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlValueGenerationStrategyConvention A convention that configures the default model NpgsqlValueGenerationStrategy as IdentityByDefaultColumn for newer PostgreSQL versions, and SerialColumn for pre-10.0 versions. Inheritance System.Object NpgsqlValueGenerationStrategyConvention Implements IModelFinalizedConvention Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlValueGenerationStrategyConvention : IModelInitializedConvention, IModelFinalizedConvention Constructors | Improve this Doc View Source NpgsqlValueGenerationStrategyConvention(ProviderConventionSetBuilderDependencies, RelationalConventionSetBuilderDependencies, Version) Creates a new instance of NpgsqlValueGenerationStrategyConvention . Declaration public NpgsqlValueGenerationStrategyConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies, Version postgresVersion) Parameters Type Name Description ProviderConventionSetBuilderDependencies dependencies Parameter object containing dependencies for this convention. RelationalConventionSetBuilderDependencies relationalDependencies Parameter object containing relational dependencies for this convention. System.Version postgresVersion The PostgreSQL version being targeted. This affects the default value generation strategy. Properties | Improve this Doc View Source Dependencies Parameter object containing service dependencies. Declaration protected virtual ProviderConventionSetBuilderDependencies Dependencies { get; } Property Value Type Description ProviderConventionSetBuilderDependencies Methods | Improve this Doc View Source ProcessModelFinalized(IConventionModelBuilder, IConventionContext<IConventionModelBuilder>) Called after a model is finalized. Declaration public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context) Parameters Type Name Description IConventionModelBuilder modelBuilder The builder for the model. IConventionContext < IConventionModelBuilder > context Additional information associated with convention execution. | Improve this Doc View Source ProcessModelInitialized(IConventionModelBuilder, IConventionContext<IConventionModelBuilder>) Called after a model is initialized. Declaration public virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext<IConventionModelBuilder> context) Parameters Type Name Description IConventionModelBuilder modelBuilder The builder for the model. IConventionContext < IConventionModelBuilder > context Additional information associated with convention execution. Implements IModelFinalizedConvention"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceValueGeneratorState.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceValueGeneratorState.html",
    "title": "Class NpgsqlSequenceValueGeneratorState | Npgsql Documentation",
    "keywords": "Class NpgsqlSequenceValueGeneratorState This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Inheritance System.Object NpgsqlSequenceValueGeneratorState Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSequenceValueGeneratorState : HiLoValueGeneratorState Constructors | Improve this Doc View Source NpgsqlSequenceValueGeneratorState(ISequence) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public NpgsqlSequenceValueGeneratorState(ISequence sequence) Parameters Type Name Description ISequence sequence Properties | Improve this Doc View Source Sequence This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public virtual ISequence Sequence { get; } Property Value Type Description ISequence"
  },
  "doc/api/Npgsql.TypeHandlers.GeometricHandlers.LineHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.GeometricHandlers.LineHandler.html",
    "title": "Class LineHandler | Npgsql Documentation",
    "keywords": "Class LineHandler A type handler for the PostgreSQL line data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlLine > NpgsqlSimpleTypeHandler < NpgsqlLine > LineHandler Implements INpgsqlTypeHandler < NpgsqlLine > INpgsqlSimpleTypeHandler < NpgsqlLine > Inherited Members NpgsqlSimpleTypeHandler<NpgsqlLine>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<NpgsqlLine>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<NpgsqlLine>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<NpgsqlLine>.Write(NpgsqlLine, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<NpgsqlLine>.ValidateAndGetLength(NpgsqlLine, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<NpgsqlLine>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<NpgsqlLine>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlLine>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlLine>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<NpgsqlLine>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.GeometricHandlers Assembly : Npgsql.dll Syntax public class LineHandler : NpgsqlSimpleTypeHandler<NpgsqlLine>, INpgsqlTypeHandler<NpgsqlLine>, INpgsqlSimpleTypeHandler<NpgsqlLine> Remarks See http://www.postgresql.org/docs/current/static/datatype-geometric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source LineHandler(PostgresType) Declaration public LineHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override NpgsqlLine Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description NpgsqlLine Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlLine>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlLine, NpgsqlParameter) Declaration public override int ValidateAndGetLength(NpgsqlLine value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlLine value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlLine>.ValidateAndGetLength(NpgsqlTypes.NpgsqlLine, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlLine, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(NpgsqlLine value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlLine value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<NpgsqlTypes.NpgsqlLine>.Write(NpgsqlTypes.NpgsqlLine, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.NpgsqlRowUpdatingEventHandler.html": {
    "href": "doc/api/Npgsql.NpgsqlRowUpdatingEventHandler.html",
    "title": "Delegate NpgsqlRowUpdatingEventHandler | Npgsql Documentation",
    "keywords": "Delegate NpgsqlRowUpdatingEventHandler Represents the method that handles the RowUpdating events. Namespace : Npgsql Assembly : Npgsql.dll Syntax public delegate void NpgsqlRowUpdatingEventHandler(object sender, NpgsqlRowUpdatingEventArgs e); Parameters Type Name Description System.Object sender The source of the event. NpgsqlRowUpdatingEventArgs e A NpgsqlRowUpdatingEventArgs that contains the event data."
  },
  "doc/api/Npgsql.NpgsqlNodaTimeExtensions.html": {
    "href": "doc/api/Npgsql.NpgsqlNodaTimeExtensions.html",
    "title": "Class NpgsqlNodaTimeExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeExtensions Extension adding the NodaTime plugin to an Npgsql type mapper. Inheritance System.Object NpgsqlNodaTimeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.NodaTime.dll Syntax public static class NpgsqlNodaTimeExtensions Methods | Improve this Doc View Source UseNodaTime(INpgsqlTypeMapper) Sets up NodaTime mappings for the PostgreSQL date/time types. Declaration public static INpgsqlTypeMapper UseNodaTime(this INpgsqlTypeMapper mapper) Parameters Type Name Description INpgsqlTypeMapper mapper The type mapper to set up (global or connection-specific) Returns Type Description INpgsqlTypeMapper"
  },
  "doc/api/Npgsql.TypeHandlers.ArrayHandler-1.html": {
    "href": "doc/api/Npgsql.TypeHandlers.ArrayHandler-1.html",
    "title": "Class ArrayHandler<TElement> | Npgsql Documentation",
    "keywords": "Class ArrayHandler<TElement> Base class for all type handlers which handle PostgreSQL arrays. Inheritance System.Object NpgsqlTypeHandler ArrayHandler ArrayHandler<TElement> BitStringArrayHandler Inherited Members ArrayHandler.CreateArrayHandler(PostgresArrayType) ArrayHandler.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public class ArrayHandler<TElement> : ArrayHandler Type Parameters Name Description TElement Remarks http://www.postgresql.org/docs/current/static/arrays.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source ArrayHandler(PostgresType, NpgsqlTypeHandler, Int32) Declaration public ArrayHandler(PostgresType arrayPostgresType, NpgsqlTypeHandler elementHandler, int lowerBound = 1) Parameters Type Name Description PostgresType arrayPostgresType NpgsqlTypeHandler elementHandler System.Int32 lowerBound Methods | Improve this Doc View Source Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TAny with the given length from the provided buffer, using either sync or async I/O. Declaration protected override ValueTask<TAny> Read<TAny>(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. System.Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. System.Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description System.Threading.Tasks.ValueTask <TAny> The fully-read value. Type Parameters Name Description TAny Overrides NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) | Improve this Doc View Source ReadArray<TAnyElement>(NpgsqlReadBuffer, Boolean) Reads an array of element type TAnyElement from the given buffer buf . Declaration protected ValueTask<Array> ReadArray<TAnyElement>(NpgsqlReadBuffer buf, bool async) Parameters Type Name Description NpgsqlReadBuffer buf System.Boolean async Returns Type Description System.Threading.Tasks.ValueTask < System.Array > Type Parameters Name Description TAnyElement | Improve this Doc View Source ReadList<TAnyElement>(NpgsqlReadBuffer, Boolean) Reads an array of element type TAnyElement from the given buffer buf . Declaration protected ValueTask<List<TAnyElement>> ReadList<TAnyElement>(NpgsqlReadBuffer buf, bool async) Parameters Type Name Description NpgsqlReadBuffer buf System.Boolean async Returns Type Description System.Threading.Tasks.ValueTask < System.Collections.Generic.List <TAnyElement>> Type Parameters Name Description TAnyElement | Improve this Doc View Source ValidateAndGetLength<TAny>(TAny, ref NpgsqlLengthCache, NpgsqlParameter) Declaration protected override int ValidateAndGetLength<TAny>(TAny value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description TAny value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Type Parameters Name Description TAny Overrides Npgsql.TypeHandling.NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateObjectAndGetLength(Object, ref NpgsqlLengthCache, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration protected override int ValidateObjectAndGetLength(object value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Object value The value to be written to PostgreSQL NpgsqlLengthCache lengthCache If the byte length calculation is costly (e.g. for UTF-8 strings), its result can be stored in the length cache to be reused in the writing process, preventing recalculation. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description System.Int32 The number of bytes required to write the value. Overrides NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, ref NpgsqlLengthCache, NpgsqlParameter) | Improve this Doc View Source WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Writes a value to the provided buffer, using either sync or async I/O. Declaration protected override Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Object value The value to write. NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlLengthCache lengthCache NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). System.Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. Returns Type Description System.Threading.Tasks.Task Overrides NpgsqlTypeHandler.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean)"
  },
  "doc/api/NpgsqlTypes.NpgsqlDateTime.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlDateTime.html",
    "title": "Struct NpgsqlDateTime | Npgsql Documentation",
    "keywords": "Struct NpgsqlDateTime A struct similar to .NET DateTime but capable of storing PostgreSQL's timestamp and timestamptz types. DateTime is capable of storing values from year 1 to 9999 at 100-nanosecond precision, while PostgreSQL's timestamps store values from 4713BC to 5874897AD with 1-microsecond precision. Implements System.IEquatable < NpgsqlDateTime > System.IComparable < NpgsqlDateTime > System.IComparable System.Collections.Generic.IComparer < NpgsqlDateTime > System.Collections.IComparer Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax [Serializable] public struct NpgsqlDateTime : IEquatable<NpgsqlDateTime>, IComparable<NpgsqlDateTime>, IComparable, IComparer<NpgsqlDateTime>, IComparer Constructors | Improve this Doc View Source NpgsqlDateTime(NpgsqlDate) Declaration public NpgsqlDateTime(NpgsqlDate date) Parameters Type Name Description NpgsqlDate date | Improve this Doc View Source NpgsqlDateTime(NpgsqlDate, TimeSpan, DateTimeKind) Declaration public NpgsqlDateTime(NpgsqlDate date, TimeSpan time, DateTimeKind kind = DateTimeKind.Unspecified) Parameters Type Name Description NpgsqlDate date System.TimeSpan time System.DateTimeKind kind | Improve this Doc View Source NpgsqlDateTime(DateTime) Declaration public NpgsqlDateTime(DateTime dateTime) Parameters Type Name Description System.DateTime dateTime | Improve this Doc View Source NpgsqlDateTime(Int32, Int32, Int32, Int32, Int32, Int32, DateTimeKind) Declaration public NpgsqlDateTime(int year, int month, int day, int hours, int minutes, int seconds, DateTimeKind kind = DateTimeKind.Unspecified) Parameters Type Name Description System.Int32 year System.Int32 month System.Int32 day System.Int32 hours System.Int32 minutes System.Int32 seconds System.DateTimeKind kind | Improve this Doc View Source NpgsqlDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, DateTimeKind) Declaration public NpgsqlDateTime(int year, int month, int day, int hours, int minutes, int seconds, int milliseconds, DateTimeKind kind = DateTimeKind.Unspecified) Parameters Type Name Description System.Int32 year System.Int32 month System.Int32 day System.Int32 hours System.Int32 minutes System.Int32 seconds System.Int32 milliseconds System.DateTimeKind kind | Improve this Doc View Source NpgsqlDateTime(Int64) Declaration public NpgsqlDateTime(long ticks) Parameters Type Name Description System.Int64 ticks | Improve this Doc View Source NpgsqlDateTime(Int64, DateTimeKind) Declaration public NpgsqlDateTime(long ticks, DateTimeKind kind) Parameters Type Name Description System.Int64 ticks System.DateTimeKind kind Fields | Improve this Doc View Source Epoch Declaration public static readonly NpgsqlDateTime Epoch Field Value Type Description NpgsqlDateTime | Improve this Doc View Source Era Declaration public static readonly NpgsqlDateTime Era Field Value Type Description NpgsqlDateTime | Improve this Doc View Source Infinity Declaration public static readonly NpgsqlDateTime Infinity Field Value Type Description NpgsqlDateTime | Improve this Doc View Source NegativeInfinity Declaration public static readonly NpgsqlDateTime NegativeInfinity Field Value Type Description NpgsqlDateTime Properties | Improve this Doc View Source Date Declaration public NpgsqlDate Date { get; } Property Value Type Description NpgsqlDate | Improve this Doc View Source Day Declaration public int Day { get; } Property Value Type Description System.Int32 | Improve this Doc View Source DayOfWeek Declaration public DayOfWeek DayOfWeek { get; } Property Value Type Description System.DayOfWeek | Improve this Doc View Source DayOfYear Declaration public int DayOfYear { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Hour Declaration public int Hour { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsFinite Declaration public bool IsFinite { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInfinity Declaration public bool IsInfinity { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsLeapYear Declaration public bool IsLeapYear { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsNegativeInfinity Declaration public bool IsNegativeInfinity { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Kind Declaration public DateTimeKind Kind { get; } Property Value Type Description System.DateTimeKind | Improve this Doc View Source Millisecond Declaration public int Millisecond { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Minute Declaration public int Minute { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Month Declaration public int Month { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Now Declaration public static NpgsqlDateTime Now { get; } Property Value Type Description NpgsqlDateTime | Improve this Doc View Source Second Declaration public int Second { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Ticks Declaration public long Ticks { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Time Declaration public TimeSpan Time { get; } Property Value Type Description System.TimeSpan | Improve this Doc View Source Year Declaration public int Year { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(NpgsqlTimeSpan) Returns a new NpgsqlDateTime that adds the value of the specified TimeSpan to the value of this instance. Declaration public NpgsqlDateTime Add(NpgsqlTimeSpan value) Parameters Type Name Description NpgsqlTimeSpan value A positive or negative time interval. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the time interval represented by value. | Improve this Doc View Source Add(TimeSpan) Returns a new NpgsqlDateTime that adds the value of the specified NpgsqlTimeSpan to the value of this instance. Declaration public NpgsqlDateTime Add(TimeSpan value) Parameters Type Name Description System.TimeSpan value A positive or negative time interval. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the time interval represented by value. | Improve this Doc View Source AddDays(Double) Returns a new NpgsqlDateTime that adds the specified number of days to the value of this instance. Declaration public NpgsqlDateTime AddDays(double value) Parameters Type Name Description System.Double value A number of whole and fractional days. The value parameter can be negative or positive. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the number of days represented by value. | Improve this Doc View Source AddHours(Double) Returns a new NpgsqlDateTime that adds the specified number of hours to the value of this instance. Declaration public NpgsqlDateTime AddHours(double value) Parameters Type Name Description System.Double value A number of whole and fractional hours. The value parameter can be negative or positive. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the number of hours represented by value. | Improve this Doc View Source AddMilliseconds(Double) Returns a new NpgsqlDateTime that adds the specified number of milliseconds to the value of this instance. Declaration public NpgsqlDateTime AddMilliseconds(double value) Parameters Type Name Description System.Double value A number of whole and fractional milliseconds. The value parameter can be negative or positive. Note that this value is rounded to the nearest integer. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by value. | Improve this Doc View Source AddMinutes(Double) Returns a new NpgsqlDateTime that adds the specified number of minutes to the value of this instance. Declaration public NpgsqlDateTime AddMinutes(double value) Parameters Type Name Description System.Double value A number of whole and fractional minutes. The value parameter can be negative or positive. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by value. | Improve this Doc View Source AddMonths(Int32) Returns a new NpgsqlDateTime that adds the specified number of months to the value of this instance. Declaration public NpgsqlDateTime AddMonths(int value) Parameters Type Name Description System.Int32 value A number of months. The months parameter can be negative or positive. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and months. | Improve this Doc View Source AddSeconds(Double) Returns a new NpgsqlDateTime that adds the specified number of minutes to the value of this instance. Declaration public NpgsqlDateTime AddSeconds(double value) Parameters Type Name Description System.Double value A number of whole and fractional minutes. The value parameter can be negative or positive. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by value. | Improve this Doc View Source AddTicks(Int64) Returns a new NpgsqlDateTime that adds the specified number of ticks to the value of this instance. Declaration public NpgsqlDateTime AddTicks(long value) Parameters Type Name Description System.Int64 value A number of 100-nanosecond ticks. The value parameter can be positive or negative. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the time represented by value. | Improve this Doc View Source AddYears(Int32) Returns a new NpgsqlDateTime that adds the specified number of years to the value of this instance. Declaration public NpgsqlDateTime AddYears(int value) Parameters Type Name Description System.Int32 value A number of years. The value parameter can be negative or positive. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the number of years represented by value. | Improve this Doc View Source Compare(NpgsqlDateTime, NpgsqlDateTime) Declaration public int Compare(NpgsqlDateTime x, NpgsqlDateTime y) Parameters Type Name Description NpgsqlDateTime x NpgsqlDateTime y Returns Type Description System.Int32 | Improve this Doc View Source Compare(Object, Object) Declaration public int Compare(object x, object y) Parameters Type Name Description System.Object x System.Object y Returns Type Description System.Int32 | Improve this Doc View Source CompareTo(NpgsqlDateTime) Declaration public int CompareTo(NpgsqlDateTime other) Parameters Type Name Description NpgsqlDateTime other Returns Type Description System.Int32 | Improve this Doc View Source CompareTo(Object) Declaration public int CompareTo(object o) Parameters Type Name Description System.Object o Returns Type Description System.Int32 | Improve this Doc View Source Equals(NpgsqlDateTime) Declaration public bool Equals(NpgsqlDateTime other) Parameters Type Name Description NpgsqlDateTime other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Normalize() Declaration public NpgsqlDateTime Normalize() Returns Type Description NpgsqlDateTime | Improve this Doc View Source Parse(String) Declaration public static NpgsqlDateTime Parse(string str) Parameters Type Name Description System.String str Returns Type Description NpgsqlDateTime | Improve this Doc View Source Subtract(NpgsqlDateTime) Declaration public NpgsqlTimeSpan Subtract(NpgsqlDateTime timestamp) Parameters Type Name Description NpgsqlDateTime timestamp Returns Type Description NpgsqlTimeSpan | Improve this Doc View Source Subtract(NpgsqlTimeSpan) Declaration public NpgsqlDateTime Subtract(NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlTimeSpan interval Returns Type Description NpgsqlDateTime | Improve this Doc View Source ToDateTime() Cast of an NpgsqlDateTime to a System.DateTime . Declaration public DateTime ToDateTime() Returns Type Description System.DateTime An equivalent System.DateTime . | Improve this Doc View Source ToLocalTime() Converts the value of the current NpgsqlDateTime object to local time. Declaration public NpgsqlDateTime ToLocalTime() Returns Type Description NpgsqlDateTime Remarks See the MSDN documentation for DateTime.ToLocalTime(). Note: this method only takes into account the time zone's base offset, and does not respect daylight savings. See https://github.com/npgsql/npgsql/pull/684 for more details. | Improve this Doc View Source ToNpgsqlDateTime(DateTime) Declaration public static NpgsqlDateTime ToNpgsqlDateTime(DateTime dateTime) Parameters Type Name Description System.DateTime dateTime Returns Type Description NpgsqlDateTime | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source ToUniversalTime() Converts the value of the current NpgsqlDateTime object to Coordinated Universal Time (UTC). Declaration public NpgsqlDateTime ToUniversalTime() Returns Type Description NpgsqlDateTime Remarks See the MSDN documentation for DateTime.ToUniversalTime(). Note: this method only takes into account the time zone's base offset, and does not respect daylight savings. See https://github.com/npgsql/npgsql/pull/684 for more details. Operators | Improve this Doc View Source Addition(NpgsqlDateTime, NpgsqlTimeSpan) Declaration public static NpgsqlDateTime operator +(NpgsqlDateTime timestamp, NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlDateTime timestamp NpgsqlTimeSpan interval Returns Type Description NpgsqlDateTime | Improve this Doc View Source Addition(NpgsqlTimeSpan, NpgsqlDateTime) Declaration public static NpgsqlDateTime operator +(NpgsqlTimeSpan interval, NpgsqlDateTime timestamp) Parameters Type Name Description NpgsqlTimeSpan interval NpgsqlDateTime timestamp Returns Type Description NpgsqlDateTime | Improve this Doc View Source Equality(NpgsqlDateTime, NpgsqlDateTime) Declaration public static bool operator ==(NpgsqlDateTime x, NpgsqlDateTime y) Parameters Type Name Description NpgsqlDateTime x NpgsqlDateTime y Returns Type Description System.Boolean | Improve this Doc View Source Explicit(NpgsqlDateTime to DateTime) Explicit cast of an NpgsqlDateTime to a System.DateTime . Declaration public static explicit operator DateTime(NpgsqlDateTime npgsqlDateTime) Parameters Type Name Description NpgsqlDateTime npgsqlDateTime An NpgsqlDateTime . Returns Type Description System.DateTime An equivalent System.DateTime . | Improve this Doc View Source GreaterThan(NpgsqlDateTime, NpgsqlDateTime) Declaration public static bool operator>(NpgsqlDateTime x, NpgsqlDateTime y) Parameters Type Name Description NpgsqlDateTime x NpgsqlDateTime y Returns Type Description System.Boolean | Improve this Doc View Source GreaterThanOrEqual(NpgsqlDateTime, NpgsqlDateTime) Declaration public static bool operator >=(NpgsqlDateTime x, NpgsqlDateTime y) Parameters Type Name Description NpgsqlDateTime x NpgsqlDateTime y Returns Type Description System.Boolean | Improve this Doc View Source Implicit(DateTime to NpgsqlDateTime) Implicit cast of a System.DateTime to an NpgsqlDateTime Declaration public static implicit operator NpgsqlDateTime(DateTime dateTime) Parameters Type Name Description System.DateTime dateTime A System.DateTime Returns Type Description NpgsqlDateTime An equivalent NpgsqlDateTime . | Improve this Doc View Source Inequality(NpgsqlDateTime, NpgsqlDateTime) Declaration public static bool operator !=(NpgsqlDateTime x, NpgsqlDateTime y) Parameters Type Name Description NpgsqlDateTime x NpgsqlDateTime y Returns Type Description System.Boolean | Improve this Doc View Source LessThan(NpgsqlDateTime, NpgsqlDateTime) Declaration public static bool operator <(NpgsqlDateTime x, NpgsqlDateTime y) Parameters Type Name Description NpgsqlDateTime x NpgsqlDateTime y Returns Type Description System.Boolean | Improve this Doc View Source LessThanOrEqual(NpgsqlDateTime, NpgsqlDateTime) Declaration public static bool operator <=(NpgsqlDateTime x, NpgsqlDateTime y) Parameters Type Name Description NpgsqlDateTime x NpgsqlDateTime y Returns Type Description System.Boolean | Improve this Doc View Source Subtraction(NpgsqlDateTime, NpgsqlDateTime) Declaration public static NpgsqlTimeSpan operator -(NpgsqlDateTime x, NpgsqlDateTime y) Parameters Type Name Description NpgsqlDateTime x NpgsqlDateTime y Returns Type Description NpgsqlTimeSpan | Improve this Doc View Source Subtraction(NpgsqlDateTime, NpgsqlTimeSpan) Declaration public static NpgsqlDateTime operator -(NpgsqlDateTime timestamp, NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlDateTime timestamp NpgsqlTimeSpan interval Returns Type Description NpgsqlDateTime Implements System.IEquatable<T> System.IComparable<T> System.IComparable System.Collections.Generic.IComparer<T> System.Collections.IComparer"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.html",
    "title": "Enum NpgsqlTsVector.Lexeme.Weight | Npgsql Documentation",
    "keywords": "Enum NpgsqlTsVector.Lexeme.Weight The weight is labeled from A to D. D is the default, and not printed. Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public enum Weight Fields Name Description A A B B C C D D, the default"
  },
  "doc/api/Npgsql.TypeHandlers.NumericHandlers.SingleHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.NumericHandlers.SingleHandler.html",
    "title": "Class SingleHandler | Npgsql Documentation",
    "keywords": "Class SingleHandler A type handler for the PostgreSQL real data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.Single > NpgsqlSimpleTypeHandler < System.Single > SingleHandler Implements INpgsqlTypeHandler < System.Single > INpgsqlSimpleTypeHandler < System.Single > INpgsqlSimpleTypeHandler < System.Double > Inherited Members NpgsqlSimpleTypeHandler<Single>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Single>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Single>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Single>.Write(Single, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<Single>.ValidateAndGetLength(Single, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Single>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Single>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Single>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Single>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<Single>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class SingleHandler : NpgsqlSimpleTypeHandler<float>, INpgsqlTypeHandler<float>, INpgsqlSimpleTypeHandler<float>, INpgsqlSimpleTypeHandler<double> Remarks See http://www.postgresql.org/docs/current/static/datatype-numeric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source SingleHandler(PostgresType) Declaration public SingleHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override float Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Single Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Single>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Double, NpgsqlParameter) Declaration public int ValidateAndGetLength(double value, NpgsqlParameter parameter) Parameters Type Name Description System.Double value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Single, NpgsqlParameter) Declaration public override int ValidateAndGetLength(float value, NpgsqlParameter parameter) Parameters Type Name Description System.Single value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Single>.ValidateAndGetLength(System.Single, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Double, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(double value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Double value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Single, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(float value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Single value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Single>.Write(System.Single, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<Double>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration double INpgsqlSimpleTypeHandler<double>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Double Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.StatementType.html": {
    "href": "doc/api/Npgsql.StatementType.html",
    "title": "Enum StatementType | Npgsql Documentation",
    "keywords": "Enum StatementType Specifies the type of SQL statement, e.g. SELECT Namespace : Npgsql Assembly : Npgsql.dll Syntax public enum StatementType Fields Name Description Copy CreateTableAs Delete Fetch Insert Move Other Select Update"
  },
  "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.DateHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.DateHandler.html",
    "title": "Class DateHandler | Npgsql Documentation",
    "keywords": "Class DateHandler A type handler for the PostgreSQL date data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.DateTime > NpgsqlSimpleTypeHandler < System.DateTime > NpgsqlSimpleTypeHandlerWithPsv < System.DateTime , NpgsqlDate > DateHandler Implements INpgsqlTypeHandler < System.DateTime > INpgsqlSimpleTypeHandler < System.DateTime > INpgsqlSimpleTypeHandler < NpgsqlDate > Inherited Members NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDate>.ReadPsv(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDate>.INpgsqlSimpleTypeHandler<NpgsqlDate>.Read(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDate>.ValidateAndGetLength(NpgsqlDate, NpgsqlParameter) NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDate>.Write(NpgsqlDate, NpgsqlWriteBuffer, NpgsqlParameter) NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDate>.CreateArrayHandler(PostgresArrayType) NpgsqlSimpleTypeHandler<DateTime>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<DateTime>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<DateTime>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<DateTime>.Write(DateTime, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<DateTime>.ValidateAndGetLength(DateTime, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<DateTime>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<DateTime>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<DateTime>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<DateTime>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<DateTime>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class DateHandler : NpgsqlSimpleTypeHandlerWithPsv<DateTime, NpgsqlDate>, INpgsqlTypeHandler<DateTime>, INpgsqlSimpleTypeHandler<DateTime>, INpgsqlSimpleTypeHandler<NpgsqlDate> Remarks See http://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override DateTime Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.DateTime Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.DateTime>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ReadPsv(NpgsqlReadBuffer, Int32, FieldDescription) Declaration protected override NpgsqlDate ReadPsv(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description NpgsqlDate Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<System.DateTime, NpgsqlTypes.NpgsqlDate>.ReadPsv(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) Remarks Copied wholesale from Postgresql backend/utils/adt/datetime.c:j2date | Improve this Doc View Source ValidateAndGetLength(NpgsqlDate, NpgsqlParameter) Declaration public override int ValidateAndGetLength(NpgsqlDate value, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlDate value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<System.DateTime, NpgsqlTypes.NpgsqlDate>.ValidateAndGetLength(NpgsqlTypes.NpgsqlDate, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(DateTime, NpgsqlParameter) Declaration public override int ValidateAndGetLength(DateTime value, NpgsqlParameter parameter) Parameters Type Name Description System.DateTime value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.DateTime>.ValidateAndGetLength(System.DateTime, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlDate, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(NpgsqlDate value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlDate value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv<System.DateTime, NpgsqlTypes.NpgsqlDate>.Write(NpgsqlTypes.NpgsqlDate, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(DateTime, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(DateTime value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.DateTime value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.DateTime>.Write(System.DateTime, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.NpgsqlParameter.html": {
    "href": "doc/api/Npgsql.NpgsqlParameter.html",
    "title": "Class NpgsqlParameter | Npgsql Documentation",
    "keywords": "Class NpgsqlParameter This class represents a parameter to a command that will be sent to server Inheritance System.Object System.MarshalByRefObject System.Data.Common.DbParameter NpgsqlParameter NpgsqlParameter<T> Implements System.Data.IDbDataParameter System.Data.IDataParameter System.ICloneable Inherited Members System.Data.Common.DbParameter.System.Data.IDbDataParameter.Precision System.Data.Common.DbParameter.System.Data.IDbDataParameter.Scale System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public class NpgsqlParameter : DbParameter, IDbDataParameter, IDataParameter, ICloneable Constructors | Improve this Doc View Source NpgsqlParameter() Initializes a new instance of the NpgsqlParameter class. Declaration public NpgsqlParameter() | Improve this Doc View Source NpgsqlParameter(String, NpgsqlDbType) Initializes a new instance of the NpgsqlParameter class with the parameter name and the data type. Declaration public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType) Parameters Type Name Description System.String parameterName The name of the parameter to map. NpgsqlDbType parameterType One of the System.Data.DbType values. | Improve this Doc View Source NpgsqlParameter(String, NpgsqlDbType, Int32) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size) Parameters Type Name Description System.String parameterName The name of the parameter to map. NpgsqlDbType parameterType One of the NpgsqlDbType values. System.Int32 size The length of the parameter. | Improve this Doc View Source NpgsqlParameter(String, NpgsqlDbType, Int32, String) Initializes a new instance of the NpgsqlParameter Declaration public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn) Parameters Type Name Description System.String parameterName The name of the parameter to map. NpgsqlDbType parameterType One of the NpgsqlDbType values. System.Int32 size The length of the parameter. System.String sourceColumn The name of the source column. | Improve this Doc View Source NpgsqlParameter(String, NpgsqlDbType, Int32, String, ParameterDirection, Boolean, Byte, Byte, DataRowVersion, Object) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value) Parameters Type Name Description System.String parameterName The name of the parameter to map. NpgsqlDbType parameterType One of the NpgsqlDbType values. System.Int32 size The length of the parameter. System.String sourceColumn The name of the source column. System.Data.ParameterDirection direction One of the System.Data.ParameterDirection values. System.Boolean isNullable true if the value of the field can be null, otherwise false . System.Byte precision The total number of digits to the left and right of the decimal point to which Value is resolved. System.Byte scale The total number of decimal places to which Value is resolved. System.Data.DataRowVersion sourceVersion One of the System.Data.DataRowVersion values. System.Object value An System.Object that is the value of the NpgsqlParameter . | Improve this Doc View Source NpgsqlParameter(String, DbType) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string parameterName, DbType parameterType) Parameters Type Name Description System.String parameterName The name of the parameter to map. System.Data.DbType parameterType One of the System.Data.DbType values. | Improve this Doc View Source NpgsqlParameter(String, DbType, Int32) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string parameterName, DbType parameterType, int size) Parameters Type Name Description System.String parameterName The name of the parameter to map. System.Data.DbType parameterType One of the System.Data.DbType values. System.Int32 size The length of the parameter. | Improve this Doc View Source NpgsqlParameter(String, DbType, Int32, String) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string parameterName, DbType parameterType, int size, string sourceColumn) Parameters Type Name Description System.String parameterName The name of the parameter to map. System.Data.DbType parameterType One of the System.Data.DbType values. System.Int32 size The length of the parameter. System.String sourceColumn The name of the source column. | Improve this Doc View Source NpgsqlParameter(String, DbType, Int32, String, ParameterDirection, Boolean, Byte, Byte, DataRowVersion, Object) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string parameterName, DbType parameterType, int size, string sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value) Parameters Type Name Description System.String parameterName The name of the parameter to map. System.Data.DbType parameterType One of the System.Data.DbType values. System.Int32 size The length of the parameter. System.String sourceColumn The name of the source column. System.Data.ParameterDirection direction One of the System.Data.ParameterDirection values. System.Boolean isNullable true if the value of the field can be null, otherwise false . System.Byte precision The total number of digits to the left and right of the decimal point to which Value is resolved. System.Byte scale The total number of decimal places to which Value is resolved. System.Data.DataRowVersion sourceVersion One of the System.Data.DataRowVersion values. System.Object value An System.Object that is the value of the NpgsqlParameter . | Improve this Doc View Source NpgsqlParameter(String, Object) Initializes a new instance of the NpgsqlParameter class with the parameter name and a value of the new NpgsqlParameter . Declaration public NpgsqlParameter(string parameterName, object value) Parameters Type Name Description System.String parameterName The name of the parameter to map. System.Object value An System.Object that is the value of the NpgsqlParameter . Remarks When you specify an System.Object in the value parameter, the System.Data.DbType is inferred from the .NET Framework type of the Object . When using this constructor, you must be aware of a possible misuse of the constructor which takes a DbType parameter. This happens when calling this constructor passing an int 0 and the compiler thinks you are passing a value of DbType. Use Convert.ToInt32(value) for example to have compiler calling the correct constructor. Properties | Improve this Doc View Source Collection The collection to which this parameter belongs, if any. Declaration public NpgsqlParameterCollection Collection { get; set; } Property Value Type Description NpgsqlParameterCollection | Improve this Doc View Source ConvertedValue Can be used to communicate a value from the validation phase to the writing phase. To be used by type handlers only. Declaration public object ConvertedValue { get; set; } Property Value Type Description System.Object | Improve this Doc View Source DataTypeName Used to specify which PostgreSQL type will be sent to the database for this parameter. Declaration public string DataTypeName { get; set; } Property Value Type Description System.String | Improve this Doc View Source DbType Gets or sets the System.Data.DbType of the parameter. Declaration public override sealed DbType DbType { get; set; } Property Value Type Description System.Data.DbType One of the System.Data.DbType values. The default is Object . Overrides System.Data.Common.DbParameter.DbType | Improve this Doc View Source Direction Declaration public override sealed ParameterDirection Direction { get; set; } Property Value Type Description System.Data.ParameterDirection Overrides System.Data.Common.DbParameter.Direction | Improve this Doc View Source IsNullable Declaration public override sealed bool IsNullable { get; set; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbParameter.IsNullable | Improve this Doc View Source NpgsqlDbType Gets or sets the NpgsqlDbType of the parameter. Declaration [DbProviderSpecificTypeProperty(true)] public NpgsqlDbType NpgsqlDbType { get; set; } Property Value Type Description NpgsqlDbType One of the NpgsqlDbType values. The default is Unknown . | Improve this Doc View Source NpgsqlValue Gets or sets the value of the parameter. Declaration [TypeConverter(typeof(StringConverter))] public object NpgsqlValue { get; set; } Property Value Type Description System.Object An System.Object that is the value of the parameter. The default value is null. | Improve this Doc View Source ParameterName Gets or sets The name of the NpgsqlParameter . Declaration public override sealed string ParameterName { get; set; } Property Value Type Description System.String The name of the NpgsqlParameter . The default is an empty string. Overrides System.Data.Common.DbParameter.ParameterName | Improve this Doc View Source PostgresType The PostgreSQL data type, such as int4 or text, as discovered from pg_type. This property is automatically set if parameters have been derived via DeriveParameters(NpgsqlCommand) and can be used to acquire additional information about the parameters' data type. Declaration public PostgresType PostgresType { get; } Property Value Type Description PostgresType | Improve this Doc View Source Precision Gets or sets the maximum number of digits used to represent the Value property. Declaration public byte Precision { get; set; } Property Value Type Description System.Byte The maximum number of digits used to represent the Value property. The default value is 0, which indicates that the data provider sets the precision for Value . | Improve this Doc View Source Scale Gets or sets the number of decimal places to which Value is resolved. Declaration public byte Scale { get; set; } Property Value Type Description System.Byte The number of decimal places to which Value is resolved. The default is 0. | Improve this Doc View Source Size Declaration public override sealed int Size { get; set; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbParameter.Size | Improve this Doc View Source SourceColumn Declaration public override sealed string SourceColumn { get; set; } Property Value Type Description System.String Overrides System.Data.Common.DbParameter.SourceColumn | Improve this Doc View Source SourceColumnNullMapping Declaration public override sealed bool SourceColumnNullMapping { get; set; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbParameter.SourceColumnNullMapping | Improve this Doc View Source SourceVersion Declaration public override sealed DataRowVersion SourceVersion { get; set; } Property Value Type Description System.Data.DataRowVersion Overrides System.Data.Common.DbParameter.SourceVersion | Improve this Doc View Source Value Declaration [TypeConverter(typeof(StringConverter))] public override object Value { get; set; } Property Value Type Description System.Object Overrides System.Data.Common.DbParameter.Value Methods | Improve this Doc View Source Clone() Creates a new NpgsqlParameter that is a copy of the current instance. Declaration public NpgsqlParameter Clone() Returns Type Description NpgsqlParameter A new NpgsqlParameter that is a copy of this instance. | Improve this Doc View Source ResetDbType() Declaration public override void ResetDbType() Overrides System.Data.Common.DbParameter.ResetDbType() Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Declaration object ICloneable.Clone() Returns Type Description System.Object Implements System.Data.IDbDataParameter System.Data.IDataParameter System.ICloneable"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsVector.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsVector.html",
    "title": "Class NpgsqlTsVector | Npgsql Documentation",
    "keywords": "Class NpgsqlTsVector Represents a PostgreSQL tsvector. Inheritance System.Object NpgsqlTsVector Implements System.Collections.Generic.IEnumerable < NpgsqlTsVector.Lexeme > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public sealed class NpgsqlTsVector : IEnumerable<NpgsqlTsVector.Lexeme>, IEnumerable Properties | Improve this Doc View Source Count Gets the number of lexemes. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Returns the lexeme at a specific index Declaration public NpgsqlTsVector.Lexeme this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description NpgsqlTsVector.Lexeme Methods | Improve this Doc View Source GetEnumerator() Returns an enumerator. Declaration public IEnumerator<NpgsqlTsVector.Lexeme> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < NpgsqlTsVector.Lexeme > | Improve this Doc View Source Parse(String) Parses a tsvector in PostgreSQL's text format. Declaration public static NpgsqlTsVector Parse(string value) Parameters Type Name Description System.String value Returns Type Description NpgsqlTsVector | Improve this Doc View Source ToString() Gets a string representation in PostgreSQL's format. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "doc/api/Npgsql.TypeHandlers.GeometricHandlers.html": {
    "href": "doc/api/Npgsql.TypeHandlers.GeometricHandlers.html",
    "title": "Namespace Npgsql.TypeHandlers.GeometricHandlers | Npgsql Documentation",
    "keywords": "Namespace Npgsql.TypeHandlers.GeometricHandlers Classes BoxHandler A type handler for the PostgreSQL box data type. CircleHandler A type handler for the PostgreSQL circle data type. LineHandler A type handler for the PostgreSQL line data type. LineSegmentHandler A type handler for the PostgreSQL lseg data type. PathHandler A type handler for the PostgreSQL path data type. PointHandler A type handler for the PostgreSQL point data type. PolygonHandler A type handler for the PostgreSQL polygon data type."
  },
  "doc/api/Npgsql.TypeHandlers.html": {
    "href": "doc/api/Npgsql.TypeHandlers.html",
    "title": "Namespace Npgsql.TypeHandlers | Npgsql Documentation",
    "keywords": "Namespace Npgsql.TypeHandlers Classes ArrayHandler Non-generic base class for all type handlers which handle PostgreSQL arrays. Extend from ArrayHandler<TElement> instead. ArrayHandler<TElement> Base class for all type handlers which handle PostgreSQL arrays. BitStringArrayHandler A special handler for arrays of bit strings. Differs from the standard array handlers in that it returns arrays of bool for BIT(1) and arrays of BitArray otherwise (just like the scalar BitStringHandler does). BitStringHandler A type handler for the PostgreSQL bit string data type. BoolHandler A type handler for the PostgreSQL bool data type. ByteaHandler A type handler for the PostgreSQL bytea data type. HstoreHandler A type handler for the PostgreSQL hstore extension data type, which stores sets of key/value pairs within a single PostgreSQL value. HstoreHandlerFactory A factory for type handlers for the PostgreSQL hstore extension data type, which stores sets of key/value pairs within a single PostgreSQL value. InternalCharHandler A type handler for the PostgreSQL \"char\" type, used only internally. JsonbHandlerFactory A factory for type handlers for the PostgreSQL jsonb data type. JsonHandler A type handler for the PostgreSQL json and jsonb data type. JsonHandlerFactory A factory for type handlers for the PostgreSQL json data type. RangeHandler Base class for all type handlers which handle PostgreSQL ranges. RangeHandler<TElement> A type handler for PostgreSQL range types. TextHandler A type handler for PostgreSQL character data types (text, char, varchar, xml...). TextHandlerFactory A factory for type handlers for PostgreSQL character data types (text, char, varchar, xml...). UuidHandler A type handler for the PostgreSQL uuid data type. Interfaces IEnumTypeHandlerFactory Interface implemented by all enum handler factories. Used to expose the name translator for those reflecting enum mappings (e.g. EF Core)."
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQuery.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQuery.html",
    "title": "Class NpgsqlTsQuery | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQuery Represents a PostgreSQL tsquery. This is the base class for the lexeme, not, or, and, and \"followed by\" nodes. Inheritance System.Object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryEmpty NpgsqlTsQueryLexeme NpgsqlTsQueryNot Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public abstract class NpgsqlTsQuery Constructors | Improve this Doc View Source NpgsqlTsQuery(NpgsqlTsQuery.NodeKind) Constructs an NpgsqlTsQuery . Declaration protected NpgsqlTsQuery(NpgsqlTsQuery.NodeKind kind) Parameters Type Name Description NpgsqlTsQuery.NodeKind kind Properties | Improve this Doc View Source Kind Node kind Declaration public NpgsqlTsQuery.NodeKind Kind { get; } Property Value Type Description NpgsqlTsQuery.NodeKind Methods | Improve this Doc View Source Parse(String) Parses a tsquery in PostgreSQL's text format. Declaration public static NpgsqlTsQuery Parse(string value) Parameters Type Name Description System.String value Returns Type Description NpgsqlTsQuery | Improve this Doc View Source ToString() Writes the tsquery in PostgreSQL's text format. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.TimeTzHandler.html",
    "title": "Class TimeTzHandler | Npgsql Documentation",
    "keywords": "Class TimeTzHandler A type handler for the PostgreSQL timetz data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.DateTimeOffset > NpgsqlSimpleTypeHandler < System.DateTimeOffset > TimeTzHandler Implements INpgsqlTypeHandler < System.DateTimeOffset > INpgsqlSimpleTypeHandler < System.DateTimeOffset > INpgsqlSimpleTypeHandler < System.DateTime > INpgsqlSimpleTypeHandler < System.TimeSpan > Inherited Members NpgsqlSimpleTypeHandler<DateTimeOffset>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<DateTimeOffset>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<DateTimeOffset>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<DateTimeOffset>.Write(DateTimeOffset, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<DateTimeOffset>.ValidateAndGetLength(DateTimeOffset, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<DateTimeOffset>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<DateTimeOffset>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<DateTimeOffset>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<DateTimeOffset>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<DateTimeOffset>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class TimeTzHandler : NpgsqlSimpleTypeHandler<DateTimeOffset>, INpgsqlTypeHandler<DateTimeOffset>, INpgsqlSimpleTypeHandler<DateTimeOffset>, INpgsqlSimpleTypeHandler<DateTime>, INpgsqlSimpleTypeHandler<TimeSpan> Remarks See http://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override DateTimeOffset Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.DateTimeOffset Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.DateTimeOffset>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(DateTime, NpgsqlParameter) Declaration public int ValidateAndGetLength(DateTime value, NpgsqlParameter parameter) Parameters Type Name Description System.DateTime value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(DateTimeOffset, NpgsqlParameter) Declaration public override int ValidateAndGetLength(DateTimeOffset value, NpgsqlParameter parameter) Parameters Type Name Description System.DateTimeOffset value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.DateTimeOffset>.ValidateAndGetLength(System.DateTimeOffset, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(TimeSpan, NpgsqlParameter) Declaration public int ValidateAndGetLength(TimeSpan value, NpgsqlParameter parameter) Parameters Type Name Description System.TimeSpan value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source Write(DateTime, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(DateTime value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.DateTime value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(DateTimeOffset, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(DateTimeOffset value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.DateTimeOffset value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.DateTimeOffset>.Write(System.DateTimeOffset, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(TimeSpan, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(TimeSpan value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.TimeSpan value NpgsqlWriteBuffer buf NpgsqlParameter parameter Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<DateTime>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration DateTime INpgsqlSimpleTypeHandler<DateTime>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.DateTime | Improve this Doc View Source INpgsqlSimpleTypeHandler<TimeSpan>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration TimeSpan INpgsqlSimpleTypeHandler<TimeSpan>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.TimeSpan Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.SslMode.html": {
    "href": "doc/api/Npgsql.SslMode.html",
    "title": "Enum SslMode | Npgsql Documentation",
    "keywords": "Enum SslMode Specifies how to manage SSL. Namespace : Npgsql Assembly : Npgsql.dll Syntax public enum SslMode Fields Name Description Disable SSL is disabled. If the server requires SSL, the connection will fail. Prefer Prefer SSL connections if the server allows them, but allow connections without SSL. Require Fail the connection if the server doesn't support SSL."
  },
  "doc/api/Npgsql.NpgsqlDataAdapter.html": {
    "href": "doc/api/Npgsql.NpgsqlDataAdapter.html",
    "title": "Class NpgsqlDataAdapter | Npgsql Documentation",
    "keywords": "Class NpgsqlDataAdapter This class represents an adapter from many commands: select, update, insert and delete to fill System.Data.DataSet Inheritance System.Object System.MarshalByRefObject System.ComponentModel.Component System.Data.Common.DataAdapter System.Data.Common.DbDataAdapter NpgsqlDataAdapter Implements System.ComponentModel.IComponent System.IDisposable System.Data.IDbDataAdapter System.Data.IDataAdapter System.ICloneable Inherited Members System.Data.Common.DbDataAdapter.DefaultSourceTableName System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand) System.Data.Common.DbDataAdapter.ClearBatch() System.Data.Common.DbDataAdapter.Dispose(System.Boolean) System.Data.Common.DbDataAdapter.ExecuteBatch() System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet) System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet, System.Int32, System.Int32, System.String) System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet, System.Int32, System.Int32, System.String, System.Data.IDbCommand, System.Data.CommandBehavior) System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet, System.String) System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable) System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable, System.Data.IDbCommand, System.Data.CommandBehavior) System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[], System.Int32, System.Int32, System.Data.IDbCommand, System.Data.CommandBehavior) System.Data.Common.DbDataAdapter.Fill(System.Int32, System.Int32, System.Data.DataTable[]) System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet, System.Data.SchemaType) System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet, System.Data.SchemaType, System.Data.IDbCommand, System.String, System.Data.CommandBehavior) System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet, System.Data.SchemaType, System.String) System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable, System.Data.SchemaType) System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable, System.Data.SchemaType, System.Data.IDbCommand, System.Data.CommandBehavior) System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32, System.Int32) System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32, System.Int32, System.Exception) System.Data.Common.DbDataAdapter.GetFillParameters() System.Data.Common.DbDataAdapter.InitializeBatching() System.Data.Common.DbDataAdapter.System.ICloneable.Clone() System.Data.Common.DbDataAdapter.TerminateBatching() System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[]) System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[], System.Data.Common.DataTableMapping) System.Data.Common.DbDataAdapter.Update(System.Data.DataSet) System.Data.Common.DbDataAdapter.Update(System.Data.DataSet, System.String) System.Data.Common.DbDataAdapter.Update(System.Data.DataTable) System.Data.Common.DbDataAdapter.FillCommandBehavior System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand System.Data.Common.DbDataAdapter.UpdateBatchSize System.Data.Common.DataAdapter.CloneInternals() System.Data.Common.DataAdapter.CreateTableMappings() System.Data.Common.DataAdapter.Fill(System.Data.DataSet, System.String, System.Data.IDataReader, System.Int32, System.Int32) System.Data.Common.DataAdapter.Fill(System.Data.DataTable, System.Data.IDataReader) System.Data.Common.DataAdapter.Fill(System.Data.DataTable[], System.Data.IDataReader, System.Int32, System.Int32) System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet, System.Data.SchemaType, System.String, System.Data.IDataReader) System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable, System.Data.SchemaType, System.Data.IDataReader) System.Data.Common.DataAdapter.HasTableMappings() System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs) System.Data.Common.DataAdapter.ShouldSerializeTableMappings() System.Data.Common.DataAdapter.AcceptChangesDuringFill System.Data.Common.DataAdapter.AcceptChangesDuringUpdate System.Data.Common.DataAdapter.ContinueUpdateOnError System.Data.Common.DataAdapter.FillLoadOption System.Data.Common.DataAdapter.MissingMappingAction System.Data.Common.DataAdapter.MissingSchemaAction System.Data.Common.DataAdapter.ReturnProviderSpecificTypes System.Data.Common.DataAdapter.System.Data.IDataAdapter.TableMappings System.Data.Common.DataAdapter.TableMappings System.Data.Common.DataAdapter.FillError System.ComponentModel.Component.Dispose() System.ComponentModel.Component.GetService(System.Type) System.ComponentModel.Component.ToString() System.ComponentModel.Component.CanRaiseEvents System.ComponentModel.Component.Container System.ComponentModel.Component.DesignMode System.ComponentModel.Component.Events System.ComponentModel.Component.Site System.ComponentModel.Component.Disposed System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlDataAdapter : DbDataAdapter, IComponent, IDisposable, IDbDataAdapter, IDataAdapter, ICloneable Constructors | Improve this Doc View Source NpgsqlDataAdapter() Default constructor. Declaration public NpgsqlDataAdapter() | Improve this Doc View Source NpgsqlDataAdapter(NpgsqlCommand) Constructor. Declaration public NpgsqlDataAdapter(NpgsqlCommand selectCommand) Parameters Type Name Description NpgsqlCommand selectCommand | Improve this Doc View Source NpgsqlDataAdapter(String, NpgsqlConnection) Constructor. Declaration public NpgsqlDataAdapter(string selectCommandText, NpgsqlConnection selectConnection) Parameters Type Name Description System.String selectCommandText NpgsqlConnection selectConnection | Improve this Doc View Source NpgsqlDataAdapter(String, String) Constructor. Declaration public NpgsqlDataAdapter(string selectCommandText, string selectConnectionString) Parameters Type Name Description System.String selectCommandText System.String selectConnectionString Properties | Improve this Doc View Source DeleteCommand Delete command. Declaration public NpgsqlCommand DeleteCommand { get; set; } Property Value Type Description NpgsqlCommand | Improve this Doc View Source InsertCommand Insert command. Declaration public NpgsqlCommand InsertCommand { get; set; } Property Value Type Description NpgsqlCommand | Improve this Doc View Source SelectCommand Select command. Declaration public NpgsqlCommand SelectCommand { get; set; } Property Value Type Description NpgsqlCommand | Improve this Doc View Source UpdateCommand Update command. Declaration public NpgsqlCommand UpdateCommand { get; set; } Property Value Type Description NpgsqlCommand Methods | Improve this Doc View Source CreateRowUpdatedEvent(DataRow, IDbCommand, StatementType, DataTableMapping) Create row updated event. Declaration protected override RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping) Parameters Type Name Description System.Data.DataRow dataRow System.Data.IDbCommand command System.Data.StatementType statementType System.Data.Common.DataTableMapping tableMapping Returns Type Description System.Data.Common.RowUpdatedEventArgs Overrides System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow, System.Data.IDbCommand, System.Data.StatementType, System.Data.Common.DataTableMapping) | Improve this Doc View Source CreateRowUpdatingEvent(DataRow, IDbCommand, StatementType, DataTableMapping) Create row updating event. Declaration protected override RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping) Parameters Type Name Description System.Data.DataRow dataRow System.Data.IDbCommand command System.Data.StatementType statementType System.Data.Common.DataTableMapping tableMapping Returns Type Description System.Data.Common.RowUpdatingEventArgs Overrides System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow, System.Data.IDbCommand, System.Data.StatementType, System.Data.Common.DataTableMapping) | Improve this Doc View Source OnRowUpdated(RowUpdatedEventArgs) Raise the RowUpdated event. Declaration protected override void OnRowUpdated(RowUpdatedEventArgs value) Parameters Type Name Description System.Data.Common.RowUpdatedEventArgs value Overrides System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs) | Improve this Doc View Source OnRowUpdating(RowUpdatingEventArgs) Raise the RowUpdating event. Declaration protected override void OnRowUpdating(RowUpdatingEventArgs value) Parameters Type Name Description System.Data.Common.RowUpdatingEventArgs value Overrides System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs) Events | Improve this Doc View Source RowUpdated Row updated event. Declaration public event NpgsqlRowUpdatedEventHandler RowUpdated Event Type Type Description NpgsqlRowUpdatedEventHandler | Improve this Doc View Source RowUpdating Row updating event. Declaration public event NpgsqlRowUpdatingEventHandler RowUpdating Event Type Type Description NpgsqlRowUpdatingEventHandler Implements System.ComponentModel.IComponent System.IDisposable System.Data.IDbDataAdapter System.Data.IDataAdapter System.ICloneable"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresDomainType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresDomainType.html",
    "title": "Class PostgresDomainType | Npgsql Documentation",
    "keywords": "Class PostgresDomainType Represents a PostgreSQL domain type. Inheritance System.Object PostgresType PostgresDomainType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class PostgresDomainType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/sql-createdomain.html . When PostgreSQL returns a RowDescription for a domain type, the type OID is the base type's (so fetching a domain type over text returns a RowDescription for text). However, when a composite type is returned, the type OID there is that of the domain, so we provide \"clean\" support for domain types. Constructors | Improve this Doc View Source PostgresDomainType(String, String, UInt32, PostgresType) Constructs a representation of a PostgreSQL domain data type. Declaration protected PostgresDomainType(string ns, string name, uint oid, PostgresType baseType) Parameters Type Name Description System.String ns System.String name System.UInt32 oid PostgresType baseType Properties | Improve this Doc View Source BaseType The PostgreSQL data type of the base type, i.e. the type this domain is based on. Declaration public PostgresType BaseType { get; } Property Value Type Description PostgresType"
  },
  "doc/api/Npgsql.NpgsqlStatement.html": {
    "href": "doc/api/Npgsql.NpgsqlStatement.html",
    "title": "Class NpgsqlStatement | Npgsql Documentation",
    "keywords": "Class NpgsqlStatement Represents a single SQL statement within Npgsql. Instances aren't constructed directly; users should construct an NpgsqlCommand object and populate its CommandText property as in standard ADO.NET. Npgsql will analyze that property and constructed instances of NpgsqlStatement internally. Users can retrieve instances from Statements and access information about statement execution (e.g. affected rows). Inheritance System.Object NpgsqlStatement Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlStatement Properties | Improve this Doc View Source InputParameters The input parameters sent with this statement. Declaration public List<NpgsqlParameter> InputParameters { get; } Property Value Type Description System.Collections.Generic.List < NpgsqlParameter > | Improve this Doc View Source OID For an INSERT, the object ID of the inserted row if Rows is 1 and the target table has OIDs; otherwise 0. Declaration public uint OID { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source Rows The number of rows affected or retrieved. Declaration public uint Rows { get; } Property Value Type Description System.UInt32 Remarks See the command tag in the CommandComplete message, http://www.postgresql.org/docs/current/static/protocol-message-formats.html | Improve this Doc View Source SQL The SQL text of the statement. Declaration public string SQL { get; set; } Property Value Type Description System.String | Improve this Doc View Source StatementType Specifies the type of query, e.g. SELECT. Declaration public StatementType StatementType { get; } Property Value Type Description StatementType Methods | Improve this Doc View Source ToString() Returns the SQL text of the statement. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "doc/api/Npgsql.Logging.html": {
    "href": "doc/api/Npgsql.Logging.html",
    "title": "Namespace Npgsql.Logging | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Logging Classes ConsoleLoggingProvider An logging provider that outputs Npgsql logging messages to standard error. NpgsqlLogger A generic interface for logging. NpgsqlLogManager Manages logging for Npgsql, used to set the logging provider. Interfaces INpgsqlLoggingProvider Enums NpgsqlLogLevel"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresEnumType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresEnumType.html",
    "title": "Class PostgresEnumType | Npgsql Documentation",
    "keywords": "Class PostgresEnumType Represents a PostgreSQL enum data type. Inheritance System.Object PostgresType PostgresEnumType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class PostgresEnumType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/datatype-enum.html . Constructors | Improve this Doc View Source PostgresEnumType(String, String, UInt32) Constructs a representation of a PostgreSQL enum data type. Declaration protected PostgresEnumType(string ns, string name, uint oid) Parameters Type Name Description System.String ns System.String name System.UInt32 oid Properties | Improve this Doc View Source Labels The enum's fields. Declaration public IReadOnlyList<string> Labels { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < System.String >"
  },
  "doc/api/Npgsql.TypeHandlers.FullTextSearchHandlers.html": {
    "href": "doc/api/Npgsql.TypeHandlers.FullTextSearchHandlers.html",
    "title": "Namespace Npgsql.TypeHandlers.FullTextSearchHandlers | Npgsql Documentation",
    "keywords": "Namespace Npgsql.TypeHandlers.FullTextSearchHandlers Classes TsQueryHandler A type handler for the PostgreSQL tsquery data type. TsVectorHandler A type handler for the PostgreSQL tsvector data type."
  },
  "doc/api/Npgsql.NpgsqlTimeout.html": {
    "href": "doc/api/Npgsql.NpgsqlTimeout.html",
    "title": "Struct NpgsqlTimeout | Npgsql Documentation",
    "keywords": "Struct NpgsqlTimeout Represents a timeout that will expire at some point. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql Assembly : Npgsql.dll Syntax public struct NpgsqlTimeout"
  },
  "doc/api/Npgsql.TypeHandlers.NumericHandlers.MoneyHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.NumericHandlers.MoneyHandler.html",
    "title": "Class MoneyHandler | Npgsql Documentation",
    "keywords": "Class MoneyHandler A type handler for the PostgreSQL money data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.Decimal > NpgsqlSimpleTypeHandler < System.Decimal > MoneyHandler Implements INpgsqlTypeHandler < System.Decimal > INpgsqlSimpleTypeHandler < System.Decimal > Inherited Members NpgsqlSimpleTypeHandler<Decimal>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Decimal>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Decimal>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Decimal>.Write(Decimal, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<Decimal>.ValidateAndGetLength(Decimal, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Decimal>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Decimal>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Decimal>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Decimal>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<Decimal>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class MoneyHandler : NpgsqlSimpleTypeHandler<decimal>, INpgsqlTypeHandler<decimal>, INpgsqlSimpleTypeHandler<decimal> Remarks See http://www.postgresql.org/docs/current/static/datatype-money.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source MoneyHandler(PostgresType) Declaration public MoneyHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override decimal Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Decimal Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Decimal>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Decimal, NpgsqlParameter) Declaration public override int ValidateAndGetLength(decimal value, NpgsqlParameter parameter) Parameters Type Name Description System.Decimal value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Decimal>.ValidateAndGetLength(System.Decimal, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Decimal, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(decimal value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Decimal value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Decimal>.Write(System.Decimal, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.NotificationEventHandler.html": {
    "href": "doc/api/Npgsql.NotificationEventHandler.html",
    "title": "Delegate NotificationEventHandler | Npgsql Documentation",
    "keywords": "Delegate NotificationEventHandler Represents a method that handles the Notification event. Namespace : Npgsql Assembly : Npgsql.dll Syntax public delegate void NotificationEventHandler(object sender, NpgsqlNotificationEventArgs e); Parameters Type Name Description System.Object sender The source of the event. NpgsqlNotificationEventArgs e A NpgsqlNotificationEventArgs that contains the notification payload."
  },
  "doc/api/Npgsql.Schema.NpgsqlDbColumn.html": {
    "href": "doc/api/Npgsql.Schema.NpgsqlDbColumn.html",
    "title": "Class NpgsqlDbColumn | Npgsql Documentation",
    "keywords": "Class NpgsqlDbColumn Provides schema information about a column. Inheritance System.Object System.Data.Common.DbColumn NpgsqlDbColumn Inherited Members System.Data.Common.DbColumn.IsAliased System.Data.Common.DbColumn.IsExpression System.Data.Common.DbColumn.IsHidden System.Data.Common.DbColumn.IsIdentity System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.Schema Assembly : Npgsql.dll Syntax public class NpgsqlDbColumn : DbColumn Remarks Note that this can correspond to a field returned in a query which isn't an actual table column See https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqldatareader.getschematable(v=vs.110).aspx for information on the meaning of the different fields. Constructors | Improve this Doc View Source NpgsqlDbColumn() Declaration public NpgsqlDbColumn() Properties | Improve this Doc View Source AllowDBNull Declaration public bool? AllowDBNull { get; protected set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source BaseCatalogName Declaration public string BaseCatalogName { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source BaseColumnName Declaration public string BaseColumnName { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source BaseSchemaName Declaration public string BaseSchemaName { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source BaseServerName Declaration public string BaseServerName { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source BaseTableName Declaration public string BaseTableName { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source ColumnAttributeNumber Declaration public short? ColumnAttributeNumber { get; } Property Value Type Description System.Nullable < System.Int16 > | Improve this Doc View Source ColumnName Declaration public string ColumnName { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source ColumnOrdinal Declaration public int? ColumnOrdinal { get; protected set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source ColumnSize Declaration public int? ColumnSize { get; protected set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source DataType Declaration public Type DataType { get; protected set; } Property Value Type Description System.Type | Improve this Doc View Source DataTypeName Declaration public string DataTypeName { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source DefaultValue Declaration public string DefaultValue { get; } Property Value Type Description System.String | Improve this Doc View Source IsAutoIncrement Declaration public bool? IsAutoIncrement { get; protected set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsKey Declaration public bool? IsKey { get; protected set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsLong Declaration public bool? IsLong { get; protected set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsReadOnly Declaration public bool? IsReadOnly { get; protected set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsUnique Declaration public bool? IsUnique { get; protected set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Item[String] Declaration public override object this[string propertyName] { get; } Parameters Type Name Description System.String propertyName Property Value Type Description System.Object Overrides System.Data.Common.DbColumn.Item[System.String] | Improve this Doc View Source NpgsqlDbType Declaration public NpgsqlDbType? NpgsqlDbType { get; } Property Value Type Description System.Nullable < NpgsqlDbType > | Improve this Doc View Source NumericPrecision Declaration public int? NumericPrecision { get; protected set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source NumericScale Declaration public int? NumericScale { get; protected set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source PostgresType Declaration public PostgresType PostgresType { get; } Property Value Type Description PostgresType | Improve this Doc View Source TableOID Declaration public uint TableOID { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source TypeOID Declaration public uint TypeOID { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source UdtAssemblyQualifiedName Declaration public string UdtAssemblyQualifiedName { get; protected set; } Property Value Type Description System.String"
  },
  "doc/api/Npgsql.NpgsqlCommand.html": {
    "href": "doc/api/Npgsql.NpgsqlCommand.html",
    "title": "Class NpgsqlCommand | Npgsql Documentation",
    "keywords": "Class NpgsqlCommand Represents a SQL statement or function (stored procedure) to execute against a PostgreSQL database. This class cannot be inherited. Inheritance System.Object System.MarshalByRefObject System.ComponentModel.Component System.Data.Common.DbCommand NpgsqlCommand Implements System.ComponentModel.IComponent System.Data.IDbCommand System.IDisposable System.IAsyncDisposable System.ICloneable Inherited Members System.Data.Common.DbCommand.ExecuteNonQueryAsync() System.Data.Common.DbCommand.ExecuteReaderAsync() System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior) System.Data.Common.DbCommand.ExecuteScalarAsync() System.Data.Common.DbCommand.System.Data.IDbCommand.CreateParameter() System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader() System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior) System.Data.Common.DbCommand.DisposeAsync() System.Data.Common.DbCommand.System.Data.IDbCommand.Connection System.Data.Common.DbCommand.System.Data.IDbCommand.Parameters System.Data.Common.DbCommand.System.Data.IDbCommand.Transaction System.ComponentModel.Component.Dispose() System.ComponentModel.Component.GetService(System.Type) System.ComponentModel.Component.ToString() System.ComponentModel.Component.CanRaiseEvents System.ComponentModel.Component.Container System.ComponentModel.Component.DesignMode System.ComponentModel.Component.Events System.ComponentModel.Component.Site System.ComponentModel.Component.Disposed System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlCommand : DbCommand, IComponent, IDbCommand, IDisposable, IAsyncDisposable, ICloneable Constructors | Improve this Doc View Source NpgsqlCommand() Initializes a new instance of the NpgsqlCommand class. Declaration public NpgsqlCommand() | Improve this Doc View Source NpgsqlCommand(String) Initializes a new instance of the NpgsqlCommand class with the text of the query. Declaration public NpgsqlCommand(string cmdText) Parameters Type Name Description System.String cmdText The text of the query. | Improve this Doc View Source NpgsqlCommand(String, NpgsqlConnection) Initializes a new instance of the NpgsqlCommand class with the text of the query and a NpgsqlConnection . Declaration public NpgsqlCommand(string cmdText, NpgsqlConnection connection) Parameters Type Name Description System.String cmdText The text of the query. NpgsqlConnection connection A NpgsqlConnection that represents the connection to a PostgreSQL server. | Improve this Doc View Source NpgsqlCommand(String, NpgsqlConnection, NpgsqlTransaction) Initializes a new instance of the NpgsqlCommand class with the text of the query, a NpgsqlConnection , and the NpgsqlTransaction . Declaration public NpgsqlCommand(string cmdText, NpgsqlConnection connection, NpgsqlTransaction transaction) Parameters Type Name Description System.String cmdText The text of the query. NpgsqlConnection connection A NpgsqlConnection that represents the connection to a PostgreSQL server. NpgsqlTransaction transaction The NpgsqlTransaction in which the NpgsqlCommand executes. Properties | Improve this Doc View Source AllResultTypesAreUnknown Marks all of the query's result columns as either known or unknown. Unknown results column are requested them from PostgreSQL in text format, and Npgsql makes no attempt to parse them. They will be accessible as strings only. Declaration public bool AllResultTypesAreUnknown { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source CommandText Gets or sets the SQL statement or function (stored procedure) to execute at the data source. Declaration public override string CommandText { get; set; } Property Value Type Description System.String The Transact-SQL statement or stored procedure to execute. The default is an empty string. Overrides System.Data.Common.DbCommand.CommandText | Improve this Doc View Source CommandTimeout Gets or sets the wait time before terminating the attempt to execute a command and generating an error. Declaration public override int CommandTimeout { get; set; } Property Value Type Description System.Int32 The time (in seconds) to wait for the command to execute. The default value is 30 seconds. Overrides System.Data.Common.DbCommand.CommandTimeout | Improve this Doc View Source CommandType Gets or sets a value indicating how the CommandText property is to be interpreted. Declaration public override CommandType CommandType { get; set; } Property Value Type Description System.Data.CommandType One of the System.Data.CommandType values. The default is System.Data.CommandType . Overrides System.Data.Common.DbCommand.CommandType | Improve this Doc View Source Connection Gets or sets the NpgsqlConnection used by this instance of the NpgsqlCommand . Declaration public NpgsqlConnection Connection { get; set; } Property Value Type Description NpgsqlConnection The connection to a data source. The default value is a null reference. | Improve this Doc View Source DbConnection DB connection. Declaration protected override DbConnection DbConnection { get; set; } Property Value Type Description System.Data.Common.DbConnection Overrides System.Data.Common.DbCommand.DbConnection | Improve this Doc View Source DbParameterCollection DB parameter collection. Declaration protected override DbParameterCollection DbParameterCollection { get; } Property Value Type Description System.Data.Common.DbParameterCollection Overrides System.Data.Common.DbCommand.DbParameterCollection | Improve this Doc View Source DbTransaction DB transaction. Declaration protected override DbTransaction DbTransaction { get; set; } Property Value Type Description System.Data.Common.DbTransaction Overrides System.Data.Common.DbCommand.DbTransaction | Improve this Doc View Source DesignTimeVisible Design time visible. Declaration public override bool DesignTimeVisible { get; set; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbCommand.DesignTimeVisible | Improve this Doc View Source IsPrepared Returns whether this query will execute as a prepared (compiled) query. Declaration public bool IsPrepared { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Parameters Gets the NpgsqlParameterCollection . Declaration public NpgsqlParameterCollection Parameters { get; } Property Value Type Description NpgsqlParameterCollection The parameters of the SQL statement or function (stored procedure). The default is an empty collection. | Improve this Doc View Source Statements Returns details about each statement that this command has executed. Is only populated when an Execute* method is called. Declaration public IReadOnlyList<NpgsqlStatement> Statements { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < NpgsqlStatement > | Improve this Doc View Source Transaction This property is ignored by Npgsql. PostgreSQL only supports a single transaction at a given time on a given connection, and all commands implicitly run inside the current transaction started via BeginTransaction() Declaration public NpgsqlTransaction Transaction { get; set; } Property Value Type Description NpgsqlTransaction | Improve this Doc View Source UnknownResultTypeList Marks the query's result columns as known or unknown, on a column-by-column basis. Unknown results column are requested them from PostgreSQL in text format, and Npgsql makes no attempt to parse them. They will be accessible as strings only. Declaration public bool[] UnknownResultTypeList { get; set; } Property Value Type Description System.Boolean [] Remarks If the query includes several queries (e.g. SELECT 1; SELECT 2), this will only apply to the first one. The rest of the queries will be fetched and parsed as usual. The array size must correspond exactly to the number of result columns the query returns, or an error will be raised. | Improve this Doc View Source UpdatedRowSource Gets or sets how command results are applied to the DataRow when used by the DbDataAdapter.Update(DataSet) method. Declaration public override UpdateRowSource UpdatedRowSource { get; set; } Property Value Type Description System.Data.UpdateRowSource One of the System.Data.UpdateRowSource values. Overrides System.Data.Common.DbCommand.UpdatedRowSource Methods | Improve this Doc View Source Cancel() Attempts to cancel the execution of a NpgsqlCommand . Declaration public override void Cancel() Overrides System.Data.Common.DbCommand.Cancel() Remarks As per the specs, no exception will be thrown by this method in case of failure | Improve this Doc View Source Clone() Create a new command based on this one. Declaration public NpgsqlCommand Clone() Returns Type Description NpgsqlCommand A new NpgsqlCommand object. | Improve this Doc View Source CreateDbParameter() Creates a new instance of an System.Data.Common.DbParameter object. Declaration protected override DbParameter CreateDbParameter() Returns Type Description System.Data.Common.DbParameter An System.Data.Common.DbParameter object. Overrides System.Data.Common.DbCommand.CreateDbParameter() | Improve this Doc View Source CreateParameter() Creates a new instance of a NpgsqlParameter object. Declaration public NpgsqlParameter CreateParameter() Returns Type Description NpgsqlParameter A NpgsqlParameter object. | Improve this Doc View Source Dispose(Boolean) Releases the resources used by the NpgsqlCommand . Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides System.ComponentModel.Component.Dispose(System.Boolean) | Improve this Doc View Source ExecuteDbDataReader(CommandBehavior) Executes the command text against the connection. Declaration protected override DbDataReader ExecuteDbDataReader(CommandBehavior behavior) Parameters Type Name Description System.Data.CommandBehavior behavior Returns Type Description System.Data.Common.DbDataReader A task representing the operation. Overrides System.Data.Common.DbCommand.ExecuteDbDataReader(System.Data.CommandBehavior) | Improve this Doc View Source ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken) Executes the command text against the connection. Declaration protected override Task<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken) Parameters Type Name Description System.Data.CommandBehavior behavior An instance of System.Data.CommandBehavior . System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description System.Threading.Tasks.Task < System.Data.Common.DbDataReader > A task representing the asynchronous operation. Overrides System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior, System.Threading.CancellationToken) | Improve this Doc View Source ExecuteNonQuery() Executes a SQL statement against the connection and returns the number of rows affected. Declaration public override int ExecuteNonQuery() Returns Type Description System.Int32 The number of rows affected if known; -1 otherwise. Overrides System.Data.Common.DbCommand.ExecuteNonQuery() | Improve this Doc View Source ExecuteNonQueryAsync(CancellationToken) Asynchronous version of ExecuteNonQuery() Declaration public override Task<int> ExecuteNonQueryAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description System.Threading.Tasks.Task < System.Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise. Overrides System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken) | Improve this Doc View Source ExecuteReader() Executes the CommandText against the Connection and returns a NpgsqlDataReader . Declaration public NpgsqlDataReader ExecuteReader() Returns Type Description NpgsqlDataReader | Improve this Doc View Source ExecuteReader(CommandBehavior) Executes the CommandText against the Connection and returns a NpgsqlDataReader . Declaration public NpgsqlDataReader ExecuteReader(CommandBehavior behavior) Parameters Type Name Description System.Data.CommandBehavior behavior One of the enumeration values that specified the command behavior. Returns Type Description NpgsqlDataReader A task representing the operation. | Improve this Doc View Source ExecuteReaderAsync(CommandBehavior, CancellationToken) An asynchronous version of ExecuteReader(CommandBehavior) , which executes the CommandText against the Connection and returns a NpgsqlDataReader . Declaration public Task<NpgsqlDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Data.CommandBehavior behavior One of the enumeration values that specified the command behavior. System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description System.Threading.Tasks.Task < NpgsqlDataReader > A task representing the asynchronous operation. | Improve this Doc View Source ExecuteReaderAsync(CancellationToken) An asynchronous version of ExecuteReader(CommandBehavior) , which executes the CommandText against the Connection and returns a NpgsqlDataReader . Declaration public Task<NpgsqlDataReader> ExecuteReaderAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task < NpgsqlDataReader > A task representing the asynchronous operation. | Improve this Doc View Source ExecuteScalar() Executes the query, and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored. Declaration public override object ExecuteScalar() Returns Type Description System.Object The first column of the first row in the result set, or a null reference if the result set is empty. Overrides System.Data.Common.DbCommand.ExecuteScalar() | Improve this Doc View Source ExecuteScalarAsync(CancellationToken) Asynchronous version of ExecuteScalar() Declaration public override Task<object> ExecuteScalarAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description System.Threading.Tasks.Task < System.Object > A task representing the asynchronous operation, with the first column of the first row in the result set, or a null reference if the result set is empty. Overrides System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken) | Improve this Doc View Source Prepare() Creates a server-side prepared statement on the PostgreSQL server. This will make repeated future executions of this command much faster. Declaration public override void Prepare() Overrides System.Data.Common.DbCommand.Prepare() | Improve this Doc View Source PrepareAsync() Creates a server-side prepared statement on the PostgreSQL server. This will make repeated future executions of this command much faster. Declaration public Task PrepareAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source PrepareAsync(CancellationToken) Creates a server-side prepared statement on the PostgreSQL server. This will make repeated future executions of this command much faster. Declaration public override Task PrepareAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task Overrides System.Data.Common.DbCommand.PrepareAsync(System.Threading.CancellationToken) | Improve this Doc View Source Unprepare() Unprepares a command, closing server-side statements associated with it. Note that this only affects commands explicitly prepared with Prepare() , not automatically prepared statements. Declaration public void Unprepare() Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Create a new command based on this one. Declaration object ICloneable.Clone() Returns Type Description System.Object A new NpgsqlCommand object. Implements System.ComponentModel.IComponent System.Data.IDbCommand System.IDisposable System.IAsyncDisposable System.ICloneable"
  },
  "doc/api/Npgsql.NpgsqlConnection.html": {
    "href": "doc/api/Npgsql.NpgsqlConnection.html",
    "title": "Class NpgsqlConnection | Npgsql Documentation",
    "keywords": "Class NpgsqlConnection This class represents a connection to a PostgreSQL server. Inheritance System.Object System.MarshalByRefObject System.ComponentModel.Component System.Data.Common.DbConnection NpgsqlConnection Implements System.ComponentModel.IComponent System.Data.IDbConnection System.IDisposable System.IAsyncDisposable System.ICloneable Inherited Members System.Data.Common.DbConnection.ChangeDatabaseAsync(System.String, System.Threading.CancellationToken) System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs) System.Data.Common.DbConnection.OpenAsync() System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction() System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel) System.Data.Common.DbConnection.BeginDbTransactionAsync(System.Data.IsolationLevel, System.Threading.CancellationToken) System.Data.Common.DbConnection.BeginTransactionAsync(System.Threading.CancellationToken) System.Data.Common.DbConnection.BeginTransactionAsync(System.Data.IsolationLevel, System.Threading.CancellationToken) System.Data.Common.DbConnection.System.Data.IDbConnection.CreateCommand() System.Data.Common.DbConnection.StateChange System.ComponentModel.Component.Dispose() System.ComponentModel.Component.GetService(System.Type) System.ComponentModel.Component.ToString() System.ComponentModel.Component.CanRaiseEvents System.ComponentModel.Component.Container System.ComponentModel.Component.DesignMode System.ComponentModel.Component.Events System.ComponentModel.Component.Site System.ComponentModel.Component.Disposed System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlConnection : DbConnection, IComponent, IDbConnection, IDisposable, IAsyncDisposable, ICloneable Constructors | Improve this Doc View Source NpgsqlConnection() Initializes a new instance of the NpgsqlConnection class. Declaration public NpgsqlConnection() | Improve this Doc View Source NpgsqlConnection(String) Initializes a new instance of NpgsqlConnection with the given connection string. Declaration public NpgsqlConnection(string connectionString) Parameters Type Name Description System.String connectionString The connection used to open the PostgreSQL database. Fields | Improve this Doc View Source DefaultPort The default TCP/IP port for PostgreSQL. Declaration public const int DefaultPort = 5432 Field Value Type Description System.Int32 Properties | Improve this Doc View Source CommandTimeout Gets the time to wait while trying to execute a command before terminating the attempt and generating an error. Declaration public int CommandTimeout { get; } Property Value Type Description System.Int32 The time (in seconds) to wait for a command to complete. The default value is 20 seconds. | Improve this Doc View Source ConnectionString Gets or sets the string used to connect to a PostgreSQL database. See the manual for details. Declaration public override string ConnectionString { get; set; } Property Value Type Description System.String The connection string that includes the server name, the database name, and other parameters needed to establish the initial connection. The default value is an empty string. Overrides System.Data.Common.DbConnection.ConnectionString | Improve this Doc View Source ConnectionTimeout Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error. Declaration public override int ConnectionTimeout { get; } Property Value Type Description System.Int32 The time (in seconds) to wait for a connection to open. The default value is 15 seconds. Overrides System.Data.Common.DbConnection.ConnectionTimeout | Improve this Doc View Source Database Gets the name of the current database or the database to be used after a connection is opened. Declaration public override string Database { get; } Property Value Type Description System.String The name of the current database or the name of the database to be used after a connection is opened. The default value is the empty string. Overrides System.Data.Common.DbConnection.Database | Improve this Doc View Source DataSource Gets the string identifying the database server (host and port) Declaration public override string DataSource { get; } Property Value Type Description System.String Overrides System.Data.Common.DbConnection.DataSource | Improve this Doc View Source DbProviderFactory DB provider factory. Declaration protected override DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory Overrides System.Data.Common.DbConnection.DbProviderFactory | Improve this Doc View Source FullState Gets the current state of the connection. Declaration [Browsable(false)] public ConnectionState FullState { get; } Property Value Type Description System.Data.ConnectionState A bitwise combination of the System.Data.ConnectionState values. The default is Closed . | Improve this Doc View Source GlobalTypeMapper The global type mapper, which contains defaults used by all new connections. Modify mappings on this mapper to affect your entire application. Declaration public static INpgsqlTypeMapper GlobalTypeMapper { get; } Property Value Type Description INpgsqlTypeMapper | Improve this Doc View Source HasIntegerDateTimes Reports whether the backend uses the newer integer timestamp representation. Note that the old floating point representation is not supported. Meant for use by type plugins (e.g. NodaTime) Declaration [Browsable(false)] public bool HasIntegerDateTimes { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Host Backend server host name. Declaration [Browsable(true)] public string Host { get; } Property Value Type Description System.String | Improve this Doc View Source IntegratedSecurity Whether to use Windows integrated security to log in. Declaration public bool IntegratedSecurity { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Port Backend server port. Declaration [Browsable(true)] public int Port { get; } Property Value Type Description System.Int32 | Improve this Doc View Source PostgresParameters Holds all PostgreSQL parameters received for this connection. Is updated if the values change (e.g. as a result of a SET command). Declaration [Browsable(false)] public IReadOnlyDictionary<string, string> PostgresParameters { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < System.String , System.String > | Improve this Doc View Source PostgreSqlVersion Version of the PostgreSQL backend. This can only be called when there is an active connection. Declaration [Browsable(false)] public Version PostgreSqlVersion { get; } Property Value Type Description System.Version | Improve this Doc View Source ProcessID Process id of backend server. This can only be called when there is an active connection. Declaration [Browsable(false)] public int ProcessID { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ProvideClientCertificatesCallback Selects the local Secure Sockets Layer (SSL) certificate used for authentication. Declaration public ProvideClientCertificatesCallback ProvideClientCertificatesCallback { get; set; } Property Value Type Description ProvideClientCertificatesCallback Remarks See https://msdn.microsoft.com/en-us/library/system.net.security.localcertificateselectioncallback(v=vs.110).aspx | Improve this Doc View Source ProvidePasswordCallback Gets or sets the delegate used to generate a password for new database connections. Declaration public ProvidePasswordCallback ProvidePasswordCallback { get; set; } Property Value Type Description ProvidePasswordCallback Remarks This delegate is executed when a new database connection is opened that requires a password. Password and Passfile connection string properties have precedence over this delegate. It will not be executed if a password is specified, or the specified or default Passfile contains a valid entry. Due to connection pooling this delegate is only executed when a new physical connection is opened, not when reusing a connection that was previously opened from the pool. | Improve this Doc View Source ServerVersion PostgreSQL server version. Declaration public override string ServerVersion { get; } Property Value Type Description System.String Overrides System.Data.Common.DbConnection.ServerVersion | Improve this Doc View Source State Gets whether the current state of the connection is Open or Closed Declaration [Browsable(false)] public override ConnectionState State { get; } Property Value Type Description System.Data.ConnectionState ConnectionState.Open, ConnectionState.Closed or ConnectionState.Connecting Overrides System.Data.Common.DbConnection.State | Improve this Doc View Source Timezone The connection's timezone as reported by PostgreSQL, in the IANA/Olson database format. Declaration [Browsable(false)] public string Timezone { get; } Property Value Type Description System.String | Improve this Doc View Source TypeMapper The connection-specific type mapper - all modifications affect this connection only, and are lost when it is closed. Declaration public INpgsqlTypeMapper TypeMapper { get; } Property Value Type Description INpgsqlTypeMapper | Improve this Doc View Source UserCertificateValidationCallback Verifies the remote Secure Sockets Layer (SSL) certificate used for authentication. Ignored if TrustServerCertificate is set. Declaration public RemoteCertificateValidationCallback UserCertificateValidationCallback { get; set; } Property Value Type Description System.Net.Security.RemoteCertificateValidationCallback Remarks See https://msdn.microsoft.com/en-us/library/system.net.security.remotecertificatevalidationcallback(v=vs.110).aspx | Improve this Doc View Source UserName User name. Declaration public string UserName { get; } Property Value Type Description System.String Methods | Improve this Doc View Source BeginBinaryExport(String) Begins a binary COPY TO STDOUT operation, a high-performance data export mechanism from a PostgreSQL table. Declaration public NpgsqlBinaryExporter BeginBinaryExport(string copyToCommand) Parameters Type Name Description System.String copyToCommand A COPY TO STDOUT SQL command Returns Type Description NpgsqlBinaryExporter A NpgsqlBinaryExporter which can be used to read rows and columns Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginBinaryImport(String) Begins a binary COPY FROM STDIN operation, a high-performance data import mechanism to a PostgreSQL table. Declaration public NpgsqlBinaryImporter BeginBinaryImport(string copyFromCommand) Parameters Type Name Description System.String copyFromCommand A COPY FROM STDIN SQL command Returns Type Description NpgsqlBinaryImporter A NpgsqlBinaryImporter which can be used to write rows and columns Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginDbTransaction(IsolationLevel) Begins a database transaction with the specified isolation level. Declaration protected override DbTransaction BeginDbTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The System.Data.IsolationLevel under which the transaction should run. Returns Type Description System.Data.Common.DbTransaction An System.Data.Common.DbTransaction object representing the new transaction. Overrides System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel) Remarks Currently the IsolationLevel ReadCommitted and Serializable are supported by the PostgreSQL backend. There's no support for nested transactions. | Improve this Doc View Source BeginRawBinaryCopy(String) Begins a raw binary COPY operation (TO STDOUT or FROM STDIN), a high-performance data export/import mechanism to a PostgreSQL table. Note that unlike the other COPY API methods, BeginRawBinaryCopy(String) doesn't implement any encoding/decoding and is unsuitable for structured import/export operation. It is useful mainly for exporting a table as an opaque blob, for the purpose of importing it back later. Declaration public NpgsqlRawCopyStream BeginRawBinaryCopy(string copyCommand) Parameters Type Name Description System.String copyCommand A COPY TO STDOUT or COPY FROM STDIN SQL command Returns Type Description NpgsqlRawCopyStream A NpgsqlRawCopyStream that can be used to read or write raw binary data. Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginTextExport(String) Begins a textual COPY TO STDOUT operation, a data export mechanism from a PostgreSQL table. It is the user's responsibility to parse the textual input according to the format specified in copyToCommand . Declaration public TextReader BeginTextExport(string copyToCommand) Parameters Type Name Description System.String copyToCommand A COPY TO STDOUT SQL command Returns Type Description System.IO.TextReader A TextReader that can be used to read textual data. Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginTextImport(String) Begins a textual COPY FROM STDIN operation, a data import mechanism to a PostgreSQL table. It is the user's responsibility to send the textual input according to the format specified in copyFromCommand . Declaration public TextWriter BeginTextImport(string copyFromCommand) Parameters Type Name Description System.String copyFromCommand A COPY FROM STDIN SQL command Returns Type Description System.IO.TextWriter A TextWriter that can be used to send textual data. Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginTransaction() Begins a database transaction. Declaration public NpgsqlTransaction BeginTransaction() Returns Type Description NpgsqlTransaction A NpgsqlTransaction object representing the new transaction. Remarks Currently there's no support for nested transactions. Transactions created by this method will have Read Committed isolation level. | Improve this Doc View Source BeginTransaction(IsolationLevel) Begins a database transaction with the specified isolation level. Declaration public NpgsqlTransaction BeginTransaction(IsolationLevel level) Parameters Type Name Description System.Data.IsolationLevel level The System.Data.IsolationLevel under which the transaction should run. Returns Type Description NpgsqlTransaction A NpgsqlTransaction object representing the new transaction. Remarks Currently the IsolationLevel ReadCommitted and Serializable are supported by the PostgreSQL backend. There's no support for nested transactions. | Improve this Doc View Source ChangeDatabase(String) This method changes the current database by disconnecting from the actual database and connecting to the specified. Declaration public override void ChangeDatabase(string dbName) Parameters Type Name Description System.String dbName The name of the database to use in place of the current database. Overrides System.Data.Common.DbConnection.ChangeDatabase(System.String) | Improve this Doc View Source ClearAllPools() Clear all connection pools. Declaration public static void ClearAllPools() | Improve this Doc View Source ClearPool(NpgsqlConnection) Clear connection pool. Declaration public static void ClearPool(NpgsqlConnection connection) Parameters Type Name Description NpgsqlConnection connection | Improve this Doc View Source CloneWith(String) Clones this connection, replacing its connection string with the given one. This allows creating a new connection with the same security information (password, SSL callbacks) while changing other connection parameters (e.g. database or pooling) Declaration public NpgsqlConnection CloneWith(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description NpgsqlConnection | Improve this Doc View Source Close() Releases the connection. If the connection is pooled, it will be returned to the pull and made available for re-use. If it is non-pooled, the physical connection will be closed. Declaration public override void Close() Overrides System.Data.Common.DbConnection.Close() | Improve this Doc View Source CloseAsync() Releases the connection. If the connection is pooled, it will be returned to the pull and made available for re-use. If it is non-pooled, the physical connection will be closed. Declaration public override Task CloseAsync() Returns Type Description System.Threading.Tasks.Task Overrides System.Data.Common.DbConnection.CloseAsync() | Improve this Doc View Source CreateCommand() Creates and returns a NpgsqlCommand object associated with the NpgsqlConnection . Declaration public NpgsqlCommand CreateCommand() Returns Type Description NpgsqlCommand A NpgsqlCommand object. | Improve this Doc View Source CreateDbCommand() Creates and returns a System.Data.Common.DbCommand object associated with the System.Data.Common.DbConnection . Declaration protected override DbCommand CreateDbCommand() Returns Type Description System.Data.Common.DbCommand A System.Data.Common.DbCommand object. Overrides System.Data.Common.DbConnection.CreateDbCommand() | Improve this Doc View Source Dispose(Boolean) Releases all resources used by the NpgsqlConnection . Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true when called from Dispose(); false when being called from the finalizer. Overrides System.ComponentModel.Component.Dispose(System.Boolean) | Improve this Doc View Source DisposeAsync() Releases all resources used by the NpgsqlConnection . Declaration public override ValueTask DisposeAsync() Returns Type Description System.Threading.Tasks.ValueTask Overrides System.Data.Common.DbConnection.DisposeAsync() | Improve this Doc View Source EnlistTransaction(Transaction) Enlist transaction. Declaration public override void EnlistTransaction(Transaction transaction) Parameters Type Name Description System.Transactions.Transaction transaction Overrides System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction) | Improve this Doc View Source GetSchema() Returns the supported collections Declaration public override DataTable GetSchema() Returns Type Description System.Data.DataTable Overrides System.Data.Common.DbConnection.GetSchema() | Improve this Doc View Source GetSchema(String) Returns the schema collection specified by the collection name. Declaration public override DataTable GetSchema(string collectionName) Parameters Type Name Description System.String collectionName The collection name. Returns Type Description System.Data.DataTable The collection specified. Overrides System.Data.Common.DbConnection.GetSchema(System.String) | Improve this Doc View Source GetSchema(String, String[]) Returns the schema collection specified by the collection name filtered by the restrictions. Declaration public override DataTable GetSchema(string collectionName, string[] restrictions) Parameters Type Name Description System.String collectionName The collection name. System.String [] restrictions The restriction values to filter the results. A description of the restrictions is contained in the Restrictions collection. Returns Type Description System.Data.DataTable The collection specified. Overrides System.Data.Common.DbConnection.GetSchema(System.String, System.String[]) | Improve this Doc View Source MapComposite<T>(String, INpgsqlNameTranslator) Maps a CLR type to a PostgreSQL composite type for use with this connection. Declaration [Obsolete(\"Use NpgsqlConnection.TypeMapper.MapComposite() instead\")] public void MapComposite<T>(string pgName = null, INpgsqlNameTranslator nameTranslator = null) where T : new() Parameters Type Name Description System.String pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Type Parameters Name Description T The .NET type to be mapped Remarks CLR fields and properties by string to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator . You can also use the PgNameAttribute on your members to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while a composite is read or written, an exception will be raised. Can only be invoked on an open connection; if the connection is closed the mapping is lost. To avoid mapping the type for each connection, use the MapCompositeGlobally<T>(String, INpgsqlNameTranslator) method. | Improve this Doc View Source MapCompositeGlobally<T>(String, INpgsqlNameTranslator) Maps a CLR type to a PostgreSQL composite type for use with all connections created from now on. Existing connections aren't affected. Declaration [Obsolete(\"Use NpgsqlConnection.GlobalTypeMapper.MapComposite() instead\")] public static void MapCompositeGlobally<T>(string pgName = null, INpgsqlNameTranslator nameTranslator = null) where T : new() Parameters Type Name Description System.String pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Type Parameters Name Description T The .NET type to be mapped Remarks CLR fields and properties by string to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator . You can also use the PgNameAttribute on your members to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while a composite is read or written, an exception will be raised. To map the type for a specific connection, use the MapEnum<TEnum>(String, INpgsqlNameTranslator) method. | Improve this Doc View Source MapEnum<TEnum>(String, INpgsqlNameTranslator) Maps a CLR enum to a PostgreSQL enum type for use with this connection. Declaration [Obsolete(\"Use NpgsqlConnection.TypeMapper.MapEnum() instead\")] public void MapEnum<TEnum>(string pgName = null, INpgsqlNameTranslator nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description System.String pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Type Parameters Name Description TEnum The .NET enum type to be mapped Remarks CLR enum labels are mapped by name to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator . You can also use the PgNameAttribute on your enum fields to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while an enum is read or written, an exception will be raised. Can only be invoked on an open connection; if the connection is closed the mapping is lost. To avoid mapping the type for each connection, use the MapEnumGlobally<TEnum>(String, INpgsqlNameTranslator) method. | Improve this Doc View Source MapEnumGlobally<TEnum>(String, INpgsqlNameTranslator) Maps a CLR enum to a PostgreSQL enum type for use with all connections created from now on. Existing connections aren't affected. Declaration [Obsolete(\"Use NpgsqlConnection.GlobalTypeMapper.MapEnum() instead\")] public static void MapEnumGlobally<TEnum>(string pgName = null, INpgsqlNameTranslator nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description System.String pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Type Parameters Name Description TEnum The .NET enum type to be mapped Remarks CLR enum labels are mapped by name to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator . You can also use the PgNameAttribute on your enum fields to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while an enum is read or written, an exception will be raised. To map the type for a specific connection, use the MapEnum<TEnum>(String, INpgsqlNameTranslator) method. | Improve this Doc View Source Open() Opens a database connection with the property settings specified by the ConnectionString . Declaration public override void Open() Overrides System.Data.Common.DbConnection.Open() | Improve this Doc View Source OpenAsync(CancellationToken) This is the asynchronous version of Open() . Declaration public override Task OpenAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description System.Threading.Tasks.Task A task representing the asynchronous operation. Overrides System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken) Remarks Do not invoke other methods and properties of the NpgsqlConnection object until the returned Task is complete. | Improve this Doc View Source ReloadTypes() Flushes the type cache for this connection's connection string and reloads the types for this connection only. Type changes will appear for other connections only after they are re-opened from the pool. Declaration public void ReloadTypes() | Improve this Doc View Source UnmapCompositeGlobally<T>(String, INpgsqlNameTranslator) Removes a previous global enum mapping. Declaration [Obsolete(\"Use NpgsqlConnection.GlobalTypeMapper.UnmapComposite() instead\")] public static void UnmapCompositeGlobally<T>(string pgName, INpgsqlNameTranslator nameTranslator = null) where T : new() Parameters Type Name Description System.String pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Type Parameters Name Description T | Improve this Doc View Source UnmapEnumGlobally<TEnum>(String, INpgsqlNameTranslator) Removes a previous global enum mapping. Declaration [Obsolete(\"Use NpgsqlConnection.GlobalTypeMapper.UnmapEnum() instead\")] public static void UnmapEnumGlobally<TEnum>(string pgName = null, INpgsqlNameTranslator nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description System.String pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Type Parameters Name Description TEnum | Improve this Doc View Source UnprepareAll() Unprepares all prepared statements on this connection. Declaration public void UnprepareAll() | Improve this Doc View Source Wait() Waits until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events ( Notification , Notice ). Declaration public void Wait() | Improve this Doc View Source Wait(Int32) Waits until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events ( Notification , Notice ). Declaration public bool Wait(int timeout) Parameters Type Name Description System.Int32 timeout The time-out value, in milliseconds, passed to System.Net.Sockets.Socket.ReceiveTimeout . The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period. Returns Type Description System.Boolean true if an asynchronous message was received, false if timed out. | Improve this Doc View Source Wait(TimeSpan) Waits until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events ( Notification , Notice ). Declaration public bool Wait(TimeSpan timeout) Parameters Type Name Description System.TimeSpan timeout The time-out value is passed to System.Net.Sockets.Socket.ReceiveTimeout . Returns Type Description System.Boolean true if an asynchronous message was received, false if timed out. | Improve this Doc View Source WaitAsync() Waits asynchronously until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events ( Notification , Notice ). Declaration public Task WaitAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source WaitAsync(CancellationToken) Waits asynchronously until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events ( Notification , Notice ). Declaration public Task WaitAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task Events | Improve this Doc View Source Notice Fires when PostgreSQL notices are received from PostgreSQL. Declaration public event NoticeEventHandler Notice Event Type Type Description NoticeEventHandler Remarks PostgreSQL notices are non-critical messages generated by PostgreSQL, either as a result of a user query (e.g. as a warning or informational notice), or due to outside activity (e.g. if the database administrator initiates a \"fast\" database shutdown). Note that notices are very different from notifications (see the Notification event). | Improve this Doc View Source Notification Fires when PostgreSQL notifications are received from PostgreSQL. Declaration public event NotificationEventHandler Notification Event Type Type Description NotificationEventHandler Remarks PostgreSQL notifications are sent when your connection has registered for notifications on a specific channel via the LISTEN command. NOTIFY can be used to generate such notifications, allowing for an inter-connection communication channel. Note that notifications are very different from notices (see the Notice event). Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Creates a closed connection with the connection string and authentication details of this message. Declaration object ICloneable.Clone() Returns Type Description System.Object Implements System.ComponentModel.IComponent System.Data.IDbConnection System.IDisposable System.IAsyncDisposable System.ICloneable"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.Metadata.Conventions.NpgsqlValueGenerationConvention.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.Metadata.Conventions.NpgsqlValueGenerationConvention.html",
    "title": "Class NpgsqlValueGenerationConvention | Npgsql Documentation",
    "keywords": "Class NpgsqlValueGenerationConvention A convention that configures store value generation as on properties that are part of the primary key and not part of any foreign keys, were configured to have a database default value or were configured to use a NpgsqlValueGenerationStrategy . It also configures properties as if they were configured as computed columns. Inheritance System.Object NpgsqlValueGenerationConvention Namespace : Microsoft.EntityFrameworkCore.Metadata.Conventions Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlValueGenerationConvention : RelationalValueGenerationConvention Constructors | Improve this Doc View Source NpgsqlValueGenerationConvention(ProviderConventionSetBuilderDependencies, RelationalConventionSetBuilderDependencies) Creates a new instance of NpgsqlValueGenerationConvention . Declaration public NpgsqlValueGenerationConvention(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies) Parameters Type Name Description ProviderConventionSetBuilderDependencies dependencies Parameter object containing dependencies for this convention. RelationalConventionSetBuilderDependencies relationalDependencies Parameter object containing relational dependencies for this convention. Methods | Improve this Doc View Source GetValueGenerated(IConventionProperty) Returns the store value generation strategy to set for the given property. Declaration protected override ValueGenerated? GetValueGenerated(IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description System.Nullable < ValueGenerated > The store value generation strategy to set for the given property. | Improve this Doc View Source GetValueGenerated(IProperty) Returns the store value generation strategy to set for the given property. Declaration public static ValueGenerated? GetValueGenerated(IProperty property) Parameters Type Name Description IProperty property The property. Returns Type Description System.Nullable < ValueGenerated > The store value generation strategy to set for the given property. | Improve this Doc View Source ProcessPropertyAnnotationChanged(IConventionPropertyBuilder, String, IConventionAnnotation, IConventionAnnotation, IConventionContext<IConventionAnnotation>) Called after an annotation is changed on a property. Declaration public override void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext<IConventionAnnotation> context) Parameters Type Name Description IConventionPropertyBuilder propertyBuilder The builder for the property. System.String name The annotation name. IConventionAnnotation annotation The new annotation. IConventionAnnotation oldAnnotation The old annotation. IConventionContext < IConventionAnnotation > context Additional information associated with convention execution."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Classes NpgsqlModificationCommandBatch The Npgsql-specific implementation for . NpgsqlModificationCommandBatchFactory NpgsqlUpdateSqlGenerator Enums NpgsqlUpdateSqlGenerator.ResultsGrouping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlNetTopologySuiteOptionsExtension.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlNetTopologySuiteOptionsExtension.html",
    "title": "Class NpgsqlNetTopologySuiteOptionsExtension | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteOptionsExtension Inheritance System.Object NpgsqlNetTopologySuiteOptionsExtension Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteOptionsExtension : IDbContextOptionsExtension Constructors | Improve this Doc View Source NpgsqlNetTopologySuiteOptionsExtension() Declaration public NpgsqlNetTopologySuiteOptionsExtension() | Improve this Doc View Source NpgsqlNetTopologySuiteOptionsExtension(NpgsqlNetTopologySuiteOptionsExtension) Declaration protected NpgsqlNetTopologySuiteOptionsExtension(NpgsqlNetTopologySuiteOptionsExtension copyFrom) Parameters Type Name Description NpgsqlNetTopologySuiteOptionsExtension copyFrom Properties | Improve this Doc View Source Info Declaration public virtual DbContextOptionsExtensionInfo Info { get; } Property Value Type Description DbContextOptionsExtensionInfo | Improve this Doc View Source IsGeographyDefault Declaration public bool IsGeographyDefault { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source ApplyServices(IServiceCollection) Declaration public virtual void ApplyServices(IServiceCollection services) Parameters Type Name Description IServiceCollection services | Improve this Doc View Source Clone() Declaration protected virtual NpgsqlNetTopologySuiteOptionsExtension Clone() Returns Type Description NpgsqlNetTopologySuiteOptionsExtension | Improve this Doc View Source Validate(IDbContextOptions) Declaration public virtual void Validate(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options | Improve this Doc View Source WithGeographyDefault(Boolean) Declaration public virtual NpgsqlNetTopologySuiteOptionsExtension WithGeographyDefault(bool isGeographyDefault = true) Parameters Type Name Description System.Boolean isGeographyDefault Returns Type Description NpgsqlNetTopologySuiteOptionsExtension"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlOptions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlOptions.html",
    "title": "Class NpgsqlOptions | Npgsql Documentation",
    "keywords": "Class NpgsqlOptions Represents options for Npgsql that can only be set at the System.IServiceProvider singleton level. Inheritance System.Object NpgsqlOptions Implements INpgsqlOptions ISingletonOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlOptions : INpgsqlOptions, ISingletonOptions Constructors | Improve this Doc View Source NpgsqlOptions() Declaration public NpgsqlOptions() Properties | Improve this Doc View Source PostgresVersion The backend version to target. Declaration public virtual Version PostgresVersion { get; } Property Value Type Description System.Version | Improve this Doc View Source ReverseNullOrderingEnabled True if reverse null ordering is enabled; otherwise, false. Declaration public virtual bool ReverseNullOrderingEnabled { get; } Property Value Type Description System.Boolean | Improve this Doc View Source UserRangeDefinitions The collection of range mappings. Declaration public virtual IReadOnlyList<UserRangeDefinition> UserRangeDefinitions { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < UserRangeDefinition > Methods | Improve this Doc View Source Initialize(IDbContextOptions) Declaration public void Initialize(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options | Improve this Doc View Source Validate(IDbContextOptions) Declaration public void Validate(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options Implements INpgsqlOptions ISingletonOptions"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteMemberTranslatorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteMemberTranslatorPlugin.html",
    "title": "Class NpgsqlNetTopologySuiteMemberTranslatorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteMemberTranslatorPlugin Inheritance System.Object NpgsqlNetTopologySuiteMemberTranslatorPlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteMemberTranslatorPlugin : IMemberTranslatorPlugin Constructors | Improve this Doc View Source NpgsqlNetTopologySuiteMemberTranslatorPlugin(IRelationalTypeMappingSource, ISqlExpressionFactory) Declaration public NpgsqlNetTopologySuiteMemberTranslatorPlugin(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory Properties | Improve this Doc View Source Translators Declaration public virtual IEnumerable<IMemberTranslator> Translators { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IMemberTranslator >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.JsonTraversalExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.JsonTraversalExpression.html",
    "title": "Class JsonTraversalExpression | Npgsql Documentation",
    "keywords": "Class JsonTraversalExpression Represents a PostgreSQL JSON operator traversing a JSON document with a path (i.e. x#>y or x#>>y) Inheritance System.Object JsonTraversalExpression Implements System.IEquatable < JsonTraversalExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class JsonTraversalExpression : SqlExpression, IEquatable<JsonTraversalExpression> Constructors | Improve this Doc View Source JsonTraversalExpression(SqlExpression, SqlExpression[], Boolean, Type, RelationalTypeMapping) Constructs a ILikeExpression . Declaration public JsonTraversalExpression(SqlExpression expression, SqlExpression[] path, bool returnsText, Type type, RelationalTypeMapping typeMapping) Parameters Type Name Description SqlExpression expression SqlExpression [] path System.Boolean returnsText System.Type type RelationalTypeMapping typeMapping Properties | Improve this Doc View Source Expression The match expression. Declaration public virtual SqlExpression Expression { get; } Property Value Type Description SqlExpression | Improve this Doc View Source Path The pattern to match. Declaration public virtual SqlExpression[] Path { get; } Property Value Type Description SqlExpression [] | Improve this Doc View Source ReturnsText Whether the text-returning operator (x#>>y) or the object-returning operator (x#>y) is used. Declaration public virtual bool ReturnsText { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Accept(ExpressionVisitor) Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source Append(SqlExpression) Declaration public JsonTraversalExpression Append(SqlExpression pathComponent) Parameters Type Name Description SqlExpression pathComponent Returns Type Description JsonTraversalExpression | Improve this Doc View Source Equals(JsonTraversalExpression) Declaration public bool Equals(JsonTraversalExpression other) Parameters Type Name Description JsonTraversalExpression other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration public override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source Update(SqlExpression, SqlExpression[]) Declaration public JsonTraversalExpression Update(SqlExpression expression, SqlExpression[] path) Parameters Type Name Description SqlExpression expression SqlExpression [] path Returns Type Description JsonTraversalExpression | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression Implements System.IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlEvaluatableExpressionFilter.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlEvaluatableExpressionFilter.html",
    "title": "Class NpgsqlEvaluatableExpressionFilter | Npgsql Documentation",
    "keywords": "Class NpgsqlEvaluatableExpressionFilter Inheritance System.Object NpgsqlEvaluatableExpressionFilter Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlEvaluatableExpressionFilter : RelationalEvaluatableExpressionFilter Constructors | Improve this Doc View Source NpgsqlEvaluatableExpressionFilter(EvaluatableExpressionFilterDependencies, RelationalEvaluatableExpressionFilterDependencies) Declaration public NpgsqlEvaluatableExpressionFilter(EvaluatableExpressionFilterDependencies dependencies, RelationalEvaluatableExpressionFilterDependencies relationalDependencies) Parameters Type Name Description EvaluatableExpressionFilterDependencies dependencies RelationalEvaluatableExpressionFilterDependencies relationalDependencies Methods | Improve this Doc View Source IsEvaluatableExpression(Expression, IModel) Declaration public override bool IsEvaluatableExpression(Expression expression, IModel model) Parameters Type Name Description System.Linq.Expressions.Expression expression IModel model Returns Type Description System.Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresEnum.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.PostgresEnum.html",
    "title": "Class PostgresEnum | Npgsql Documentation",
    "keywords": "Class PostgresEnum Represents the metadata for a PostgreSQL enum. Inheritance System.Object PostgresEnum Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PostgresEnum Properties | Improve this Doc View Source Annotatable The Annotatable that stores the enum. Declaration public Annotatable Annotatable { get; } Property Value Type Description Annotatable | Improve this Doc View Source Labels The enum labels. Declaration public IReadOnlyList<string> Labels { get; set; } Property Value Type Description System.Collections.Generic.IReadOnlyList < System.String > | Improve this Doc View Source Name The enum name. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Schema The enum schema or null to represent the default schema. Declaration public string Schema { get; } Property Value Type Description System.String Methods | Improve this Doc View Source FindPostgresEnum(IAnnotatable, String, String) Finds a PostgresEnum in the , or returns null if not found. Declaration public static PostgresEnum FindPostgresEnum(IAnnotatable annotatable, string schema, string name) Parameters Type Name Description IAnnotatable annotatable The annotatable to search for the enum. System.String schema The enum schema or null to use the model's default schema. System.String name The enum name. Returns Type Description PostgresEnum The PostgresEnum from the . Exceptions Type Condition System.ArgumentException schema System.ArgumentNullException annotatable System.ArgumentNullException name | Improve this Doc View Source GetOrAddPostgresEnum(IMutableAnnotatable, String, String, String[]) Gets or adds a PostgresEnum from or to the . Declaration public static PostgresEnum GetOrAddPostgresEnum(IMutableAnnotatable annotatable, string schema, string name, string[] labels) Parameters Type Name Description IMutableAnnotatable annotatable The annotatable from which to get or add the enum. System.String schema The enum schema or null to use the model's default schema. System.String name The enum name. System.String [] labels The enum labels. Returns Type Description PostgresEnum The PostgresEnum from the . Exceptions Type Condition System.ArgumentException schema System.ArgumentNullException annotatable System.ArgumentNullException name System.ArgumentNullException labels | Improve this Doc View Source GetOrAddPostgresEnum(IMutableAnnotatable, String, String[]) Gets or adds a PostgresEnum from or to the . Declaration public static PostgresEnum GetOrAddPostgresEnum(IMutableAnnotatable annotatable, string name, string[] labels) Parameters Type Name Description IMutableAnnotatable annotatable The annotatable from which to get or add the enum. System.String name The enum name. System.String [] labels The enum labels. Returns Type Description PostgresEnum The PostgresEnum from the . Exceptions Type Condition System.ArgumentNullException annotatable System.ArgumentNullException name System.ArgumentNullException labels | Improve this Doc View Source GetPostgresEnums(IAnnotatable) Gets the collection of PostgresEnum stored in the . Declaration public static IEnumerable<PostgresEnum> GetPostgresEnums(IAnnotatable annotatable) Parameters Type Name Description IAnnotatable annotatable The annotatable to search for PostgresEnum annotations. Returns Type Description System.Collections.Generic.IEnumerable < PostgresEnum > The collection of PostgresEnum stored in the . Exceptions Type Condition System.ArgumentNullException annotatable"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBoxTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlBoxTypeMapping.html",
    "title": "Class NpgsqlBoxTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlBoxTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlBoxTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlBoxTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlBoxTypeMapping() Declaration public NpgsqlBoxTypeMapping() | Improve this Doc View Source NpgsqlBoxTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlBoxTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlNodaTimeServiceCollectionExtensions.html": {
    "href": "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlNodaTimeServiceCollectionExtensions.html",
    "title": "Class NpgsqlNodaTimeServiceCollectionExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeServiceCollectionExtensions Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime extension methods for . Inheritance System.Object NpgsqlNodaTimeServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public static class NpgsqlNodaTimeServiceCollectionExtensions Methods | Improve this Doc View Source AddEntityFrameworkNpgsqlNodaTime(IServiceCollection) Adds the services required for NodaTime support in the Npgsql provider for Entity Framework. Declaration public static IServiceCollection AddEntityFrameworkNpgsqlNodaTime(this IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection The to add services to. Returns Type Description IServiceCollection The same service collection so that multiple calls can be chained."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.INpgsqlSequenceValueGeneratorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.INpgsqlSequenceValueGeneratorFactory.html",
    "title": "Interface INpgsqlSequenceValueGeneratorFactory | Npgsql Documentation",
    "keywords": "Interface INpgsqlSequenceValueGeneratorFactory This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public interface INpgsqlSequenceValueGeneratorFactory Methods | Improve this Doc View Source Create(IProperty, NpgsqlSequenceValueGeneratorState, INpgsqlRelationalConnection, IRawSqlCommandBuilder, IDiagnosticsLogger<DbLoggerCategory.Database.Command>) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration ValueGenerator Create(IProperty property, NpgsqlSequenceValueGeneratorState generatorState, INpgsqlRelationalConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IDiagnosticsLogger<DbLoggerCategory.Database.Command> commandLogger) Parameters Type Name Description IProperty property NpgsqlSequenceValueGeneratorState generatorState INpgsqlRelationalConnection connection IRawSqlCommandBuilder rawSqlCommandBuilder IDiagnosticsLogger < DbLoggerCategory.Database.Command > commandLogger Returns Type Description ValueGenerator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlTranslatingExpressionVisitorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlTranslatingExpressionVisitorFactory.html",
    "title": "Class NpgsqlSqlTranslatingExpressionVisitorFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlSqlTranslatingExpressionVisitorFactory Inheritance System.Object NpgsqlSqlTranslatingExpressionVisitorFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSqlTranslatingExpressionVisitorFactory : IRelationalSqlTranslatingExpressionVisitorFactory Constructors | Improve this Doc View Source NpgsqlSqlTranslatingExpressionVisitorFactory(RelationalSqlTranslatingExpressionVisitorDependencies) Declaration public NpgsqlSqlTranslatingExpressionVisitorFactory(RelationalSqlTranslatingExpressionVisitorDependencies dependencies) Parameters Type Name Description RelationalSqlTranslatingExpressionVisitorDependencies dependencies Methods | Improve this Doc View Source Create(IModel, QueryableMethodTranslatingExpressionVisitor) Declaration public virtual RelationalSqlTranslatingExpressionVisitor Create(IModel model, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor) Parameters Type Name Description IModel model QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor Returns Type Description RelationalSqlTranslatingExpressionVisitor"
  },
  "doc/api/Npgsql.TypeHandlers.RangeHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.RangeHandler.html",
    "title": "Class RangeHandler | Npgsql Documentation",
    "keywords": "Class RangeHandler Base class for all type handlers which handle PostgreSQL ranges. Inheritance System.Object NpgsqlTypeHandler RangeHandler RangeHandler<TElement> Inherited Members NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public abstract class RangeHandler : NpgsqlTypeHandler Remarks See http://www.postgresql.org/docs/current/static/rangetypes.html The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source RangeHandler(PostgresType) Declaration protected RangeHandler(PostgresType rangePostgresType) Parameters Type Name Description PostgresType rangePostgresType Methods | Improve this Doc View Source CreateRangeHandler(PostgresRangeType) Creates a type handler for ranges of this handler's type. Declaration public override RangeHandler CreateRangeHandler(PostgresRangeType rangeBackendType) Parameters Type Name Description PostgresRangeType rangeBackendType Returns Type Description RangeHandler Overrides NpgsqlTypeHandler.CreateRangeHandler(PostgresRangeType)"
  },
  "doc/api/Npgsql.NpgsqlBinaryExporter.html": {
    "href": "doc/api/Npgsql.NpgsqlBinaryExporter.html",
    "title": "Class NpgsqlBinaryExporter | Npgsql Documentation",
    "keywords": "Class NpgsqlBinaryExporter Provides an API for a binary COPY TO operation, a high-performance data export mechanism from a PostgreSQL table. Initiated by BeginBinaryExport(String) Inheritance System.Object NpgsqlBinaryExporter Implements System.IDisposable System.IAsyncDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlBinaryExporter : ICancelable, IDisposable, IAsyncDisposable Properties | Improve this Doc View Source IsNull Returns whether the current column is null. Declaration public bool IsNull { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Cancel() Cancels an ongoing export. Declaration public void Cancel() | Improve this Doc View Source Dispose() Completes that binary export and sets the connection back to idle state Declaration public void Dispose() | Improve this Doc View Source DisposeAsync() Async completes that binary export and sets the connection back to idle state Declaration public ValueTask DisposeAsync() Returns Type Description System.Threading.Tasks.ValueTask | Improve this Doc View Source Read<T>() Reads the current column, returns its value and moves ahead to the next column. If the column is null an exception is thrown. Declaration public T Read<T>() Returns Type Description T The value of the column Type Parameters Name Description T The type of the column to be read. This must correspond to the actual type or data corruption will occur. If in doubt, use Read<T>(NpgsqlDbType) to manually specify the type. | Improve this Doc View Source Read<T>(NpgsqlDbType) Reads the current column, returns its value according to type and moves ahead to the next column. If the column is null an exception is thrown. Declaration public T Read<T>(NpgsqlDbType type) Parameters Type Name Description NpgsqlDbType type In some cases T isn't enough to infer the data type coming in from the database. This parameter and be used to unambiguously specify the type. An example is the JSONB type, for which T will be a simple string but for which type must be specified as Jsonb . Returns Type Description T The value of the column Type Parameters Name Description T The .NET type of the column to be read. | Improve this Doc View Source ReadAsync<T>(NpgsqlDbType, CancellationToken) Reads the current column, returns its value according to type and moves ahead to the next column. If the column is null an exception is thrown. Declaration public ValueTask<T> ReadAsync<T>(NpgsqlDbType type, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description NpgsqlDbType type In some cases T isn't enough to infer the data type coming in from the database. This parameter and be used to unambiguously specify the type. An example is the JSONB type, for which T will be a simple string but for which type must be specified as Jsonb . System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.ValueTask <T> The value of the column Type Parameters Name Description T The .NET type of the column to be read. | Improve this Doc View Source ReadAsync<T>(CancellationToken) Reads the current column, returns its value and moves ahead to the next column. If the column is null an exception is thrown. Declaration public ValueTask<T> ReadAsync<T>(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.ValueTask <T> The value of the column Type Parameters Name Description T The type of the column to be read. This must correspond to the actual type or data corruption will occur. If in doubt, use Read<T>(NpgsqlDbType) to manually specify the type. | Improve this Doc View Source Skip() Skips the current column without interpreting its value. Declaration public void Skip() | Improve this Doc View Source SkipAsync(CancellationToken) Skips the current column without interpreting its value. Declaration public Task SkipAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source StartRow() Starts reading a single row, must be invoked before reading any columns. Declaration public int StartRow() Returns Type Description System.Int32 The number of columns in the row. -1 if there are no further rows. Note: This will currently be the same value for all rows, but this may change in the future. | Improve this Doc View Source StartRowAsync(CancellationToken) Starts reading a single row, must be invoked before reading any columns. Declaration public ValueTask<int> StartRowAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.ValueTask < System.Int32 > The number of columns in the row. -1 if there are no further rows. Note: This will currently be the same value for all rows, but this may change in the future. Implements System.IDisposable System.IAsyncDisposable"
  },
  "doc/api/Npgsql.html": {
    "href": "doc/api/Npgsql.html",
    "title": "Namespace Npgsql | Npgsql Documentation",
    "keywords": "Namespace Npgsql Classes NpgsqlBinaryExporter Provides an API for a binary COPY TO operation, a high-performance data export mechanism from a PostgreSQL table. Initiated by BeginBinaryExport(String) NpgsqlBinaryImporter Provides an API for a binary COPY FROM operation, a high-performance data import mechanism to a PostgreSQL table. Initiated by BeginBinaryImport(String) NpgsqlCommand Represents a SQL statement or function (stored procedure) to execute against a PostgreSQL database. This class cannot be inherited. NpgsqlCommandBuilder This class is responsible to create database commands for automatic insert, update and delete operations. NpgsqlConnection This class represents a connection to a PostgreSQL server. NpgsqlConnectionStringBuilder Provides a simple way to create and manage the contents of connection strings used by the NpgsqlConnection class. NpgsqlConnectionStringPropertyAttribute Marks on NpgsqlConnectionStringBuilder which participate in the connection string. Optionally holds a set of synonyms for the property. NpgsqlCopyTextReader Reader for a text export, initiated by BeginTextExport(String) . NpgsqlCopyTextWriter Writer for a text import, initiated by BeginTextImport(String) . NpgsqlDataAdapter This class represents an adapter from many commands: select, update, insert and delete to fill System.Data.DataSet NpgsqlDatabaseInfo Base class for implementations which provide information about PostgreSQL and PostgreSQL-like databases (e.g. type definitions, capabilities...). NpgsqlDataReader Reads a forward-only stream of rows from a data source. NpgsqlException The exception that is thrown when server-related issues occur. NpgsqlFactory A factory to create instances of various Npgsql objects. NpgsqlGeoJSONExtensions Extension allowing adding the GeoJSON plugin to an Npgsql type mapper. NpgsqlJsonNetExtensions Extension allowing adding the Json.NET plugin to an Npgsql type mapper. NpgsqlLargeObjectManager Large object manager. This class can be used to store very large files in a PostgreSQL database. NpgsqlLargeObjectStream An interface to remotely control the seekable stream for an opened large object on a PostgreSQL server. Note that the OpenRead/OpenReadWrite method as well as all operations performed on this stream must be wrapped inside a database transaction. NpgsqlLegacyPostgisExtensions Extension adding the legacy PostGIS types to an Npgsql type mapper. NpgsqlLengthCache An array of cached lengths for the parameters sending process. When sending parameters, lengths need to be calculated more than once (once for Bind, once for an array, once for the string within that array). This cache optimized that. Lengths are added to the cache, and then retrieved at the same order. NpgsqlNetTopologySuiteExtensions Extension allowing adding the NetTopologySuite plugin to an Npgsql type mapper. NpgsqlNodaTimeExtensions Extension adding the NodaTime plugin to an Npgsql type mapper. NpgsqlNoticeEventArgs Provides data for a PostgreSQL notice event. NpgsqlNotificationEventArgs Provides information on a PostgreSQL notification. Notifications are sent when your connection has registered for notifications on a specific channel via the LISTEN command. NOTIFY can be used to generate such notifications, allowing for an inter-connection communication channel. NpgsqlOperationInProgressException Thrown when trying to use a connection that is already busy performing some other operation. Provides information on the already-executing operation to help with debugging. NpgsqlParameter This class represents a parameter to a command that will be sent to server NpgsqlParameter<T> A generic version of NpgsqlParameter which provides more type safety and avoids boxing of value types. Use TypedValue instead of Value . NpgsqlParameterCollection Represents a collection of parameters relevant to a NpgsqlCommand as well as their respective mappings to columns in a DataSet. This class cannot be inherited. NpgsqlRawCopyStream Provides an API for a raw binary COPY operation, a high-performance data import/export mechanism to a PostgreSQL table. Initiated by BeginRawBinaryCopy(String) NpgsqlRawPostgisExtensions Extension adding the legacy PostGIS types to an Npgsql type mapper. NpgsqlReadBuffer A buffer used by Npgsql to read data from the socket efficiently. Provides methods which decode different values types and tracks the current position. NpgsqlRowUpdatedEventArgs NpgsqlRowUpdatingEventArgs NpgsqlStatement Represents a single SQL statement within Npgsql. Instances aren't constructed directly; users should construct an NpgsqlCommand object and populate its CommandText property as in standard ADO.NET. Npgsql will analyze that property and constructed instances of NpgsqlStatement internally. Users can retrieve instances from Statements and access information about statement execution (e.g. affected rows). NpgsqlTransaction Represents a transaction to be made in a PostgreSQL database. This class cannot be inherited. NpgsqlWriteBuffer A buffer used by Npgsql to write data to the socket efficiently. Provides methods which encode different values types and tracks the current position. PostgresErrorCodes Provides constants for PostgreSQL error codes. PostgresException The exception that is thrown when the PostgreSQL backend reports errors (e.g. query SQL issues, constraint violations). PostgresNotice PostgreSQL notices are non-critical messages generated by PostgreSQL, either as a result of a user query (e.g. as a warning or informational notice), or due to outside activity (e.g. if the database administrator initiates a \"fast\" database shutdown). Structs NpgsqlTimeout Represents a timeout that will expire at some point. Interfaces INpgsqlDatabaseInfoFactory A factory which get generate instances of NpgsqlDatabaseInfo , which describe a database and the types it contains. When first connecting to a database, Npgsql will attempt to load information about it via this factory. INpgsqlNameTranslator A component which translates a CLR name (e.g. SomeClass) into a database name (e.g. some_class) according to some scheme. Used for mapping enum and composite types. Enums ServerCompatibilityMode An option specified in the connection string that activates special compatibility features. SslMode Specifies how to manage SSL. StatementType Specifies the type of SQL statement, e.g. SELECT Delegates NoticeEventHandler Represents a method that handles the Notice event. NotificationEventHandler Represents a method that handles the Notification event. NpgsqlRowUpdatedEventHandler Represents the method that handles the RowUpdated events. NpgsqlRowUpdatingEventHandler Represents the method that handles the RowUpdating events. ProvideClientCertificatesCallback Represents the method that allows the application to provide a certificate collection to be used for SSL client authentication ProvidePasswordCallback Represents the method that allows the application to provide a password at connection time in code rather than configuration"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLineSegmentTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLineSegmentTypeMapping.html",
    "title": "Class NpgsqlLineSegmentTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlLineSegmentTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlLineSegmentTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlLineSegmentTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlLineSegmentTypeMapping() Declaration public NpgsqlLineSegmentTypeMapping() | Improve this Doc View Source NpgsqlLineSegmentTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlLineSegmentTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsQueryTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTsQueryTypeMapping.html",
    "title": "Class NpgsqlTsQueryTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlTsQueryTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTsQueryTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlTsQueryTypeMapping() Declaration public NpgsqlTsQueryTypeMapping() | Improve this Doc View Source NpgsqlTsQueryTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlTsQueryTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlGeometryMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlGeometryMethodTranslator.html",
    "title": "Class NpgsqlGeometryMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlGeometryMethodTranslator Translates methods operating on types implementing the interface. Inheritance System.Object NpgsqlGeometryMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlGeometryMethodTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlGeometryMethodTranslator(ISqlExpressionFactory, IRelationalTypeMappingSource) Declaration public NpgsqlGeometryMethodTranslator(ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Improve this Doc View Source Translate(SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>) Declaration public virtual SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description SqlExpression instance System.Reflection.MethodInfo method System.Collections.Generic.IReadOnlyList < SqlExpression > arguments Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlValueGeneratorCache.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlValueGeneratorCache.html",
    "title": "Class NpgsqlValueGeneratorCache | Npgsql Documentation",
    "keywords": "Class NpgsqlValueGeneratorCache This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Inheritance System.Object NpgsqlValueGeneratorCache Implements INpgsqlValueGeneratorCache IValueGeneratorCache Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlValueGeneratorCache : ValueGeneratorCache, INpgsqlValueGeneratorCache, IValueGeneratorCache Constructors | Improve this Doc View Source NpgsqlValueGeneratorCache(ValueGeneratorCacheDependencies) Initializes a new instance of the class. Declaration public NpgsqlValueGeneratorCache(ValueGeneratorCacheDependencies dependencies) Parameters Type Name Description ValueGeneratorCacheDependencies dependencies Parameter object containing dependencies for this service. Methods | Improve this Doc View Source GetOrAddSequenceState(IProperty, IRelationalConnection) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public virtual NpgsqlSequenceValueGeneratorState GetOrAddSequenceState(IProperty property, IRelationalConnection connection) Parameters Type Name Description IProperty property IRelationalConnection connection Returns Type Description NpgsqlSequenceValueGeneratorState Implements INpgsqlValueGeneratorCache IValueGeneratorCache"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonDbFunctionsTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonDbFunctionsTranslator.html",
    "title": "Class NpgsqlJsonDbFunctionsTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonDbFunctionsTranslator Inheritance System.Object NpgsqlJsonDbFunctionsTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlJsonDbFunctionsTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlJsonDbFunctionsTranslator(NpgsqlSqlExpressionFactory, IRelationalTypeMappingSource) Declaration public NpgsqlJsonDbFunctionsTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Improve this Doc View Source Translate(SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>) Declaration public SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description SqlExpression instance System.Reflection.MethodInfo method System.Collections.Generic.IReadOnlyList < SqlExpression > arguments Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLineTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlLineTypeMapping.html",
    "title": "Class NpgsqlLineTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlLineTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlLineTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlLineTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlLineTypeMapping() Declaration public NpgsqlLineTypeMapping() | Improve this Doc View Source NpgsqlLineTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlLineTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPointTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlPointTypeMapping.html",
    "title": "Class NpgsqlPointTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlPointTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlPointTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlPointTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlPointTypeMapping() Declaration public NpgsqlPointTypeMapping() | Improve this Doc View Source NpgsqlPointTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlPointTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Classes CockroachDbInterleaveInParent NpgsqlValueGenerationStrategyExtensions PostgresEnum Represents the metadata for a PostgreSQL enum. PostgresExtension Represents the metadata for a PostgreSQL extension. PostgresRange Represents the metadata for a PostgreSQL range. Enums NpgsqlValueGenerationStrategy NullSortOrder Options for modifying sort ordering of NULL -values in indexes. SortOrder Options for modifying sort ordering of index values."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlRangeExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlRangeExtensions.html",
    "title": "Class NpgsqlRangeExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlRangeExtensions Provides extension methods for supporting PostgreSQL translation. Inheritance System.Object NpgsqlRangeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlRangeExtensions Methods | Improve this Doc View Source ContainedBy<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range is contained by a specified range. Declaration public static bool ContainedBy<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The specified range to locate in the range. NpgsqlRange <T> b The range in which to locate the specified range. Returns Type Description System.Boolean true if the range contains the specified range; otherwise, false . Type Parameters Name Description T The type of the elements of a . Exceptions Type Condition System.NotSupportedException {method} is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Contains<T>(NpgsqlRange<T>, T) Determines whether a range contains a specified value. Declaration public static bool Contains<T>(this NpgsqlRange<T> range, T value) Parameters Type Name Description NpgsqlRange <T> range The range in which to locate the value. T value The value to locate in the range. Returns Type Description System.Boolean true if the range contains the specified value; otherwise, false . Type Parameters Name Description T The type of the elements of range . Exceptions Type Condition System.NotSupportedException {method} is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Contains<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range contains a specified range. Declaration public static bool Contains<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The range in which to locate the specified range. NpgsqlRange <T> b The specified range to locate in the range. Returns Type Description System.Boolean true if the range contains the specified range; otherwise, false . Type Parameters Name Description T The type of the elements of a . Exceptions Type Condition System.NotSupportedException {method} is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source DoesNotExtendLeftOf<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range does not extend to the left of another range. Declaration public static bool DoesNotExtendLeftOf<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description System.Boolean true if the first range does not extend to the left of the second; otherwise, false . Type Parameters Name Description T The type of the elements of a . Exceptions Type Condition System.NotSupportedException {method} is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source DoesNotExtendRightOf<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range does not extend to the right of another range. Declaration public static bool DoesNotExtendRightOf<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description System.Boolean true if the first range does not extend to the right of the second; otherwise, false . Type Parameters Name Description T The type of the elements of a . Exceptions Type Condition System.NotSupportedException {method} is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Except<T>(NpgsqlRange<T>, NpgsqlRange<T>) Returns the set difference, which means the elements of one range that do not appear in a second range. Declaration public static NpgsqlRange<T> Except<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description NpgsqlRange <T> The elements that appear in the first range, but not the second range. Type Parameters Name Description T The type of the elements of a . Exceptions Type Condition System.NotSupportedException {method} is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Intersect<T>(NpgsqlRange<T>, NpgsqlRange<T>) Returns the set intersection, which means elements that appear in each of two ranges. Declaration public static NpgsqlRange<T> Intersect<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description NpgsqlRange <T> The elements that appear in both ranges. Type Parameters Name Description T The type of the elements of a . Exceptions Type Condition System.NotSupportedException {method} is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source IsAdjacentTo<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range is adjacent to another range. Declaration public static bool IsAdjacentTo<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description System.Boolean true if the ranges are adjacent; otherwise, false . Type Parameters Name Description T The type of the elements of a . Exceptions Type Condition System.NotSupportedException {method} is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source IsStrictlyLeftOf<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range is strictly to the left of another range. Declaration public static bool IsStrictlyLeftOf<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description System.Boolean true if the first range is strictly to the left of the second; otherwise, false . Type Parameters Name Description T The type of the elements of a . Exceptions Type Condition System.NotSupportedException {method} is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source IsStrictlyRightOf<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range is strictly to the right of another range. Declaration public static bool IsStrictlyRightOf<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description System.Boolean true if the first range is strictly to the right of the second; otherwise, false . Type Parameters Name Description T The type of the elements of a . Exceptions Type Condition System.NotSupportedException {method} is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Merge<T>(NpgsqlRange<T>, NpgsqlRange<T>) Returns the smallest range which includes both of the given ranges. Declaration public static NpgsqlRange<T> Merge<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description NpgsqlRange <T> The smallest range which includes both of the given rangesge. Type Parameters Name Description T The type of the elements of a . Exceptions Type Condition System.NotSupportedException {method} is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Overlaps<T>(NpgsqlRange<T>, NpgsqlRange<T>) Determines whether a range overlaps another range. Declaration public static bool Overlaps<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description System.Boolean true if the ranges overlap (share points in common); otherwise, false . Type Parameters Name Description T The type of the elements of a . Exceptions Type Condition System.NotSupportedException {method} is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Union<T>(NpgsqlRange<T>, NpgsqlRange<T>) Returns the set union, which means unique elements that appear in either of two ranges. Declaration public static NpgsqlRange<T> Union<T>(this NpgsqlRange<T> a, NpgsqlRange<T> b) Parameters Type Name Description NpgsqlRange <T> a The first range. NpgsqlRange <T> b The second range. Returns Type Description NpgsqlRange <T> The unique elements that appear in either range. Type Parameters Name Description T The type of the elements of a . Exceptions Type Condition System.NotSupportedException {method} is only intended for use via SQL translation as part of an EF Core LINQ query."
  },
  "efcore/api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "efcore/api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | Npgsql Documentation",
    "keywords": "Namespace Microsoft.Extensions.DependencyInjection Classes NpgsqlEntityFrameworkServicesBuilderExtensions Provides extension methods to configure Entity Framework Core for Npgsql. NpgsqlNetTopologySuiteServiceCollectionExtensions Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite extension methods for . NpgsqlNodaTimeServiceCollectionExtensions Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime extension methods for ."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetworkTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetworkTranslator.html",
    "title": "Class NpgsqlNetworkTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNetworkTranslator Provides translation services for operators and functions of PostgreSQL network typess (cidr, inet, macaddr, macaddr8). Inheritance System.Object NpgsqlNetworkTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlNetworkTranslator : IMethodCallTranslator Remarks See: https://www.postgresql.org/docs/current/static/functions-net.html Constructors | Improve this Doc View Source NpgsqlNetworkTranslator(ISqlExpressionFactory, IRelationalTypeMappingSource) Declaration public NpgsqlNetworkTranslator(ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Improve this Doc View Source Translate(SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>) Declaration public SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description SqlExpression instance System.Reflection.MethodInfo method System.Collections.Generic.IReadOnlyList < SqlExpression > arguments Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Classes ArrayAnyAllExpression Represents a PostgreSQL array ANY or ALL expression. ArrayIndexExpression An SQL expression that represents an indexing into a PostgreSQL array. AtTimeZoneExpression Represents a PostgreSQL AT TIME ZONE expression. CustomUnaryExpression PostgreSQL has quite a few custom operators (full text, JSON and many others). Rather than creating expression types for each, this type represents an arbitrary expression with one operand and an operator. ILikeExpression Represents a PostgreSQL ILIKE expression. JsonTraversalExpression Represents a PostgreSQL JSON operator traversing a JSON document with a path (i.e. x#>y or x#>>y) PgFunctionExpression Represents a SQL function call expression, supporting PostgreSQL's named parameter notation. RegexMatchExpression SqlCustomBinaryExpression PostgreSQL has quite a few custom operators (full text, JSON and many others). Rather than creating expression types for each, this type represents an arbitrary expression with two operands and an operator. Enums ArrayComparisonType Represents whether an array comparison is ANY or ALL."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlFullTextSearchMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlFullTextSearchMethodTranslator.html",
    "title": "Class NpgsqlFullTextSearchMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlFullTextSearchMethodTranslator Provides translations for PostgreSQL full-text search methods. Inheritance System.Object NpgsqlFullTextSearchMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlFullTextSearchMethodTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlFullTextSearchMethodTranslator(NpgsqlSqlExpressionFactory, IRelationalTypeMappingSource) Declaration public NpgsqlFullTextSearchMethodTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Improve this Doc View Source Translate(SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>) Declaration public SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description SqlExpression instance System.Reflection.MethodInfo method System.Collections.Generic.IReadOnlyList < SqlExpression > arguments Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.AtTimeZoneExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.AtTimeZoneExpression.html",
    "title": "Class AtTimeZoneExpression | Npgsql Documentation",
    "keywords": "Class AtTimeZoneExpression Represents a PostgreSQL AT TIME ZONE expression. Inheritance System.Object AtTimeZoneExpression Implements System.IEquatable < AtTimeZoneExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class AtTimeZoneExpression : SqlExpression, IEquatable<AtTimeZoneExpression> Constructors | Improve this Doc View Source AtTimeZoneExpression(SqlExpression, SqlExpression, Type, RelationalTypeMapping) Constructs an AtTimeZoneExpression . Declaration public AtTimeZoneExpression(SqlExpression timestamp, SqlExpression timeZone, Type type, RelationalTypeMapping typeMapping) Parameters Type Name Description SqlExpression timestamp The timestamp. SqlExpression timeZone The time zone. System.Type type The type of the expression. RelationalTypeMapping typeMapping Exceptions Type Condition System.ArgumentNullException Properties | Improve this Doc View Source Timestamp The timestamp. Declaration public SqlExpression Timestamp { get; } Property Value Type Description SqlExpression | Improve this Doc View Source TimeZone The time zone. Declaration public SqlExpression TimeZone { get; } Property Value Type Description SqlExpression Methods | Improve this Doc View Source Accept(ExpressionVisitor) Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source Equals(AtTimeZoneExpression) Declaration public bool Equals(AtTimeZoneExpression other) Parameters Type Name Description AtTimeZoneExpression other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration public override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source Update(SqlExpression, SqlExpression) Declaration public AtTimeZoneExpression Update(SqlExpression timestamp, SqlExpression timeZone) Parameters Type Name Description SqlExpression timestamp SqlExpression timeZone Returns Type Description AtTimeZoneExpression | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression Implements System.IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Internal Classes NpgsqlHistoryRepository NpgsqlMigrationsAnnotationProvider"
  },
  "doc/api/Npgsql.NetTopologySuite.NetTopologySuiteHandlerFactory.html": {
    "href": "doc/api/Npgsql.NetTopologySuite.NetTopologySuiteHandlerFactory.html",
    "title": "Class NetTopologySuiteHandlerFactory | Npgsql Documentation",
    "keywords": "Class NetTopologySuiteHandlerFactory Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < Geometry > NetTopologySuiteHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<Geometry>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<Geometry>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.NetTopologySuite Assembly : Npgsql.NetTopologySuite.dll Syntax public class NetTopologySuiteHandlerFactory : NpgsqlTypeHandlerFactory<Geometry> Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<Geometry> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < Geometry > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<Geometry>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.TypeHandlers.FullTextSearchHandlers.TsVectorHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.FullTextSearchHandlers.TsVectorHandler.html",
    "title": "Class TsVectorHandler | Npgsql Documentation",
    "keywords": "Class TsVectorHandler A type handler for the PostgreSQL tsvector data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < NpgsqlTsVector > TsVectorHandler Implements INpgsqlTypeHandler < NpgsqlTsVector > Inherited Members NpgsqlTypeHandler<NpgsqlTsVector>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler<NpgsqlTsVector>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlTsVector>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlTsVector>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler<NpgsqlTsVector>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<NpgsqlTsVector>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<NpgsqlTsVector>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.FullTextSearchHandlers Assembly : Npgsql.dll Syntax public class TsVectorHandler : NpgsqlTypeHandler<NpgsqlTsVector>, INpgsqlTypeHandler<NpgsqlTsVector> Remarks See http://www.postgresql.org/docs/current/static/datatype-textsearch.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source TsVectorHandler(PostgresType) Declaration public TsVectorHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Declaration public override ValueTask<NpgsqlTsVector> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len System.Boolean async FieldDescription fieldDescription Returns Type Description System.Threading.Tasks.ValueTask < NpgsqlTsVector > Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsVector>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, System.Boolean, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(NpgsqlTsVector, ref NpgsqlLengthCache, NpgsqlParameter) Declaration public override int ValidateAndGetLength(NpgsqlTsVector value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description NpgsqlTsVector value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsVector>.ValidateAndGetLength(NpgsqlTypes.NpgsqlTsVector, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(NpgsqlTsVector, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Declaration public override Task Write(NpgsqlTsVector vector, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description NpgsqlTsVector vector NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<NpgsqlTypes.NpgsqlTsVector>.Write(NpgsqlTypes.NpgsqlTsVector, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter, System.Boolean) Implements INpgsqlTypeHandler<T>"
  },
  "doc/api/Npgsql.NpgsqlJsonNetExtensions.html": {
    "href": "doc/api/Npgsql.NpgsqlJsonNetExtensions.html",
    "title": "Class NpgsqlJsonNetExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonNetExtensions Extension allowing adding the Json.NET plugin to an Npgsql type mapper. Inheritance System.Object NpgsqlJsonNetExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.Json.NET.dll Syntax public static class NpgsqlJsonNetExtensions Methods | Improve this Doc View Source UseJsonNet(INpgsqlTypeMapper, Type[], Type[], Nullable<JsonSerializerSettings>) Sets up JSON.NET mappings for the PostgreSQL json and jsonb types. Declaration public static INpgsqlTypeMapper UseJsonNet(this INpgsqlTypeMapper mapper, Type[] jsonbClrTypes = null, Type[] jsonClrTypes = null, JsonSerializerSettings? settings = default(JsonSerializerSettings? )) Parameters Type Name Description INpgsqlTypeMapper mapper The type mapper to set up (global or connection-specific) System.Type [] jsonbClrTypes A list of CLR types to map to PostgreSQL jsonb (no need to specify NpgsqlDbType.Jsonb) System.Type [] jsonClrTypes A list of CLR types to map to PostgreSQL json (no need to specify NpgsqlDbType.Json) System.Nullable < JsonSerializerSettings > settings Optional settings to customize JSON serialization Returns Type Description INpgsqlTypeMapper"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryBinOp.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryBinOp.html",
    "title": "Class NpgsqlTsQueryBinOp | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryBinOp Base class for TsQuery binary operators (& and |). Inheritance System.Object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryAnd NpgsqlTsQueryFollowedBy NpgsqlTsQueryOr Inherited Members NpgsqlTsQuery.Kind NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public abstract class NpgsqlTsQueryBinOp : NpgsqlTsQuery Constructors | Improve this Doc View Source NpgsqlTsQueryBinOp(NpgsqlTsQuery.NodeKind, NpgsqlTsQuery, NpgsqlTsQuery) Constructs a NpgsqlTsQueryBinOp . Declaration protected NpgsqlTsQueryBinOp(NpgsqlTsQuery.NodeKind kind, NpgsqlTsQuery left, NpgsqlTsQuery right) Parameters Type Name Description NpgsqlTsQuery.NodeKind kind NpgsqlTsQuery left NpgsqlTsQuery right Properties | Improve this Doc View Source Left Left child Declaration public NpgsqlTsQuery Left { get; set; } Property Value Type Description NpgsqlTsQuery | Improve this Doc View Source Right Right child Declaration public NpgsqlTsQuery Right { get; set; } Property Value Type Description NpgsqlTsQuery"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresCompositeType.Field.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresCompositeType.Field.html",
    "title": "Class PostgresCompositeType.Field | Npgsql Documentation",
    "keywords": "Class PostgresCompositeType.Field Represents a field in a PostgreSQL composite data type. Inheritance System.Object PostgresCompositeType.Field Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class Field Properties | Improve this Doc View Source Name The name of the composite field. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Type The type of the composite field. Declaration public PostgresType Type { get; } Property Value Type Description PostgresType Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "doc/api/Npgsql.ServerCompatibilityMode.html": {
    "href": "doc/api/Npgsql.ServerCompatibilityMode.html",
    "title": "Enum ServerCompatibilityMode | Npgsql Documentation",
    "keywords": "Enum ServerCompatibilityMode An option specified in the connection string that activates special compatibility features. Namespace : Npgsql Assembly : Npgsql.dll Syntax public enum ServerCompatibilityMode Fields Name Description None No special server compatibility mode is active NoTypeLoading The server is doesn't support full type loading from the PostgreSQL catalogs, support the basic set of types via information hardcoded inside Npgsql. Redshift The server is an Amazon Redshift instance."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimeMapping.html",
    "title": "Class TimeMapping | Npgsql Documentation",
    "keywords": "Class TimeMapping Inheritance System.Object NpgsqlTypeMapping TimeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source TimeMapping() Declaration public TimeMapping() | Improve this Doc View Source TimeMapping(RelationalTypeMappingParameters) Declaration protected TimeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description System.String storeType System.Nullable < System.Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(ValueConverter) Declaration public override CoreTypeMapping Clone(ValueConverter converter) Parameters Type Name Description ValueConverter converter Returns Type Description CoreTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampInstantMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampInstantMapping.html",
    "title": "Class TimestampInstantMapping | Npgsql Documentation",
    "keywords": "Class TimestampInstantMapping Inheritance System.Object NpgsqlTypeMapping TimestampInstantMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimestampInstantMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source TimestampInstantMapping() Declaration public TimestampInstantMapping() | Improve this Doc View Source TimestampInstantMapping(RelationalTypeMappingParameters) Declaration protected TimestampInstantMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description System.String storeType System.Nullable < System.Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(ValueConverter) Declaration public override CoreTypeMapping Clone(ValueConverter converter) Parameters Type Name Description ValueConverter converter Returns Type Description CoreTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "doc/api/NpgsqlTypes.NpgsqlCircle.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlCircle.html",
    "title": "Struct NpgsqlCircle | Npgsql Documentation",
    "keywords": "Struct NpgsqlCircle Represents a PostgreSQL Circle type. Implements System.IEquatable < NpgsqlCircle > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlCircle : IEquatable<NpgsqlCircle> Constructors | Improve this Doc View Source NpgsqlCircle(NpgsqlPoint, Double) Declaration public NpgsqlCircle(NpgsqlPoint center, double radius) Parameters Type Name Description NpgsqlPoint center System.Double radius | Improve this Doc View Source NpgsqlCircle(Double, Double, Double) Declaration public NpgsqlCircle(double x, double y, double radius) Parameters Type Name Description System.Double x System.Double y System.Double radius Properties | Improve this Doc View Source Center Declaration public NpgsqlPoint Center { get; set; } Property Value Type Description NpgsqlPoint | Improve this Doc View Source Radius Declaration public double Radius { get; set; } Property Value Type Description System.Double | Improve this Doc View Source X Declaration public double X { get; set; } Property Value Type Description System.Double | Improve this Doc View Source Y Declaration public double Y { get; set; } Property Value Type Description System.Double Methods | Improve this Doc View Source Equals(NpgsqlCircle) Declaration public bool Equals(NpgsqlCircle other) Parameters Type Name Description NpgsqlCircle other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Parse(String) Declaration public static NpgsqlCircle Parse(string s) Parameters Type Name Description System.String s Returns Type Description NpgsqlCircle | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlCircle, NpgsqlCircle) Declaration public static bool operator ==(NpgsqlCircle x, NpgsqlCircle y) Parameters Type Name Description NpgsqlCircle x NpgsqlCircle y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlCircle, NpgsqlCircle) Declaration public static bool operator !=(NpgsqlCircle x, NpgsqlCircle y) Parameters Type Name Description NpgsqlCircle x NpgsqlCircle y Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "doc/api/Npgsql.NpgsqlRowUpdatedEventHandler.html": {
    "href": "doc/api/Npgsql.NpgsqlRowUpdatedEventHandler.html",
    "title": "Delegate NpgsqlRowUpdatedEventHandler | Npgsql Documentation",
    "keywords": "Delegate NpgsqlRowUpdatedEventHandler Represents the method that handles the RowUpdated events. Namespace : Npgsql Assembly : Npgsql.dll Syntax public delegate void NpgsqlRowUpdatedEventHandler(object sender, NpgsqlRowUpdatedEventArgs e); Parameters Type Name Description System.Object sender The source of the event. NpgsqlRowUpdatedEventArgs e A NpgsqlRowUpdatedEventArgs that contains the event data."
  },
  "doc/api/Npgsql.PostgresErrorCodes.html": {
    "href": "doc/api/Npgsql.PostgresErrorCodes.html",
    "title": "Class PostgresErrorCodes | Npgsql Documentation",
    "keywords": "Class PostgresErrorCodes Provides constants for PostgreSQL error codes. Inheritance System.Object PostgresErrorCodes Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public static class PostgresErrorCodes Remarks See http://www.postgresql.org/docs/current/static/errcodes-appendix.html Fields | Improve this Doc View Source ActiveSqlTransaction Declaration public const string ActiveSqlTransaction = \"25001\" Field Value Type Description System.String | Improve this Doc View Source AdminShutdown Declaration public const string AdminShutdown = \"57P01\" Field Value Type Description System.String | Improve this Doc View Source AmbiguousAlias Declaration public const string AmbiguousAlias = \"42P09\" Field Value Type Description System.String | Improve this Doc View Source AmbiguousColumn Declaration public const string AmbiguousColumn = \"42702\" Field Value Type Description System.String | Improve this Doc View Source AmbiguousFunction Declaration public const string AmbiguousFunction = \"42725\" Field Value Type Description System.String | Improve this Doc View Source AmbiguousParameter Declaration public const string AmbiguousParameter = \"42P08\" Field Value Type Description System.String | Improve this Doc View Source ArraySubscriptError Declaration public const string ArraySubscriptError = \"2202E\" Field Value Type Description System.String | Improve this Doc View Source AssertFailure Declaration public const string AssertFailure = \"P0004\" Field Value Type Description System.String | Improve this Doc View Source BadCopyFileFormat Declaration public const string BadCopyFileFormat = \"22P04\" Field Value Type Description System.String | Improve this Doc View Source BranchTransactionAlreadyActive Declaration public const string BranchTransactionAlreadyActive = \"25002\" Field Value Type Description System.String | Improve this Doc View Source CannotCoerce Declaration public const string CannotCoerce = \"42846\" Field Value Type Description System.String | Improve this Doc View Source CannotConnectNow Declaration public const string CannotConnectNow = \"57P03\" Field Value Type Description System.String | Improve this Doc View Source CantChangeRuntimeParam Declaration public const string CantChangeRuntimeParam = \"55P02\" Field Value Type Description System.String | Improve this Doc View Source CardinalityViolation Declaration public const string CardinalityViolation = \"21000\" Field Value Type Description System.String | Improve this Doc View Source CaseNotFound Declaration public const string CaseNotFound = \"20000\" Field Value Type Description System.String | Improve this Doc View Source CharacterNotInRepertoire Declaration public const string CharacterNotInRepertoire = \"22021\" Field Value Type Description System.String | Improve this Doc View Source CheckViolation Declaration public const string CheckViolation = \"23514\" Field Value Type Description System.String | Improve this Doc View Source CollationMismatch Declaration public const string CollationMismatch = \"42P21\" Field Value Type Description System.String | Improve this Doc View Source ConfigFileError Declaration public const string ConfigFileError = \"F0000\" Field Value Type Description System.String | Improve this Doc View Source ConfigurationLimitExceeded Declaration public const string ConfigurationLimitExceeded = \"53400\" Field Value Type Description System.String | Improve this Doc View Source ConnectionDoesNotExist Declaration public const string ConnectionDoesNotExist = \"08003\" Field Value Type Description System.String | Improve this Doc View Source ConnectionException Declaration public const string ConnectionException = \"08000\" Field Value Type Description System.String | Improve this Doc View Source ConnectionFailure Declaration public const string ConnectionFailure = \"08006\" Field Value Type Description System.String | Improve this Doc View Source ContainingSqlNotPermittedExternalRoutineException Declaration public const string ContainingSqlNotPermittedExternalRoutineException = \"38001\" Field Value Type Description System.String | Improve this Doc View Source CrashShutdown Declaration public const string CrashShutdown = \"57P02\" Field Value Type Description System.String | Improve this Doc View Source DatabaseDropped Declaration public const string DatabaseDropped = \"57P04\" Field Value Type Description System.String | Improve this Doc View Source DataCorrupted Declaration public const string DataCorrupted = \"XX001\" Field Value Type Description System.String | Improve this Doc View Source DataException Declaration public const string DataException = \"22000\" Field Value Type Description System.String | Improve this Doc View Source DatatypeMismatch Declaration public const string DatatypeMismatch = \"42804\" Field Value Type Description System.String | Improve this Doc View Source DatetimeFieldOverflow Declaration public const string DatetimeFieldOverflow = \"22008\" Field Value Type Description System.String | Improve this Doc View Source DeadlockDetected Declaration public const string DeadlockDetected = \"40P01\" Field Value Type Description System.String | Improve this Doc View Source DependentObjectsStillExist Declaration public const string DependentObjectsStillExist = \"2BP01\" Field Value Type Description System.String | Improve this Doc View Source DependentPrivilegeDescriptorsStillExist Declaration public const string DependentPrivilegeDescriptorsStillExist = \"2B000\" Field Value Type Description System.String | Improve this Doc View Source DeprecatedFeatureWarning Declaration public const string DeprecatedFeatureWarning = \"01P01\" Field Value Type Description System.String | Improve this Doc View Source DiagnosticsException Declaration public const string DiagnosticsException = \"0Z000\" Field Value Type Description System.String | Improve this Doc View Source DiskFull Declaration public const string DiskFull = \"53100\" Field Value Type Description System.String | Improve this Doc View Source DivisionByZero Declaration public const string DivisionByZero = \"22012\" Field Value Type Description System.String | Improve this Doc View Source DuplicateAlias Declaration public const string DuplicateAlias = \"42712\" Field Value Type Description System.String | Improve this Doc View Source DuplicateColumn Declaration public const string DuplicateColumn = \"42701\" Field Value Type Description System.String | Improve this Doc View Source DuplicateCursor Declaration public const string DuplicateCursor = \"42P03\" Field Value Type Description System.String | Improve this Doc View Source DuplicateDatabase Declaration public const string DuplicateDatabase = \"42P04\" Field Value Type Description System.String | Improve this Doc View Source DuplicateFile Declaration public const string DuplicateFile = \"58P02\" Field Value Type Description System.String | Improve this Doc View Source DuplicateFunction Declaration public const string DuplicateFunction = \"42723\" Field Value Type Description System.String | Improve this Doc View Source DuplicateObject Declaration public const string DuplicateObject = \"42710\" Field Value Type Description System.String | Improve this Doc View Source DuplicatePreparedStatement Declaration public const string DuplicatePreparedStatement = \"42P05\" Field Value Type Description System.String | Improve this Doc View Source DuplicateSchema Declaration public const string DuplicateSchema = \"42P06\" Field Value Type Description System.String | Improve this Doc View Source DuplicateTable Declaration public const string DuplicateTable = \"42P07\" Field Value Type Description System.String | Improve this Doc View Source DynamicResultSetsReturnedWarning Declaration public const string DynamicResultSetsReturnedWarning = \"0100C\" Field Value Type Description System.String | Improve this Doc View Source ErrorInAssignment Declaration public const string ErrorInAssignment = \"22005\" Field Value Type Description System.String | Improve this Doc View Source EscapeCharacterConflict Declaration public const string EscapeCharacterConflict = \"2200B\" Field Value Type Description System.String | Improve this Doc View Source EventTriggerProtocolViolatedExternalRoutineInvocationException Declaration public const string EventTriggerProtocolViolatedExternalRoutineInvocationException = \"39P03\" Field Value Type Description System.String | Improve this Doc View Source ExclusionViolation Declaration public const string ExclusionViolation = \"23P01\" Field Value Type Description System.String | Improve this Doc View Source ExternalRoutineException Declaration public const string ExternalRoutineException = \"38000\" Field Value Type Description System.String | Improve this Doc View Source ExternalRoutineInvocationException Declaration public const string ExternalRoutineInvocationException = \"39000\" Field Value Type Description System.String | Improve this Doc View Source FdwColumnNameNotFound Declaration public const string FdwColumnNameNotFound = \"HV005\" Field Value Type Description System.String | Improve this Doc View Source FdwDynamicParameterValueNeeded Declaration public const string FdwDynamicParameterValueNeeded = \"HV002\" Field Value Type Description System.String | Improve this Doc View Source FdwError Declaration public const string FdwError = \"HV000\" Field Value Type Description System.String | Improve this Doc View Source FdwFunctionSequenceError Declaration public const string FdwFunctionSequenceError = \"HV010\" Field Value Type Description System.String | Improve this Doc View Source FdwInconsistentDescriptorInformation Declaration public const string FdwInconsistentDescriptorInformation = \"HV021\" Field Value Type Description System.String | Improve this Doc View Source FdwInvalidAttributeValue Declaration public const string FdwInvalidAttributeValue = \"HV024\" Field Value Type Description System.String | Improve this Doc View Source FdwInvalidColumnName Declaration public const string FdwInvalidColumnName = \"HV007\" Field Value Type Description System.String | Improve this Doc View Source FdwInvalidColumnNumber Declaration public const string FdwInvalidColumnNumber = \"HV008\" Field Value Type Description System.String | Improve this Doc View Source FdwInvalidDataType Declaration public const string FdwInvalidDataType = \"HV004\" Field Value Type Description System.String | Improve this Doc View Source FdwInvalidDataTypeDescriptors Declaration public const string FdwInvalidDataTypeDescriptors = \"HV006\" Field Value Type Description System.String | Improve this Doc View Source FdwInvalidDescriptorFieldIdentifier Declaration public const string FdwInvalidDescriptorFieldIdentifier = \"HV091\" Field Value Type Description System.String | Improve this Doc View Source FdwInvalidHandle Declaration public const string FdwInvalidHandle = \"HV00B\" Field Value Type Description System.String | Improve this Doc View Source FdwInvalidOptionIndex Declaration public const string FdwInvalidOptionIndex = \"HV00C\" Field Value Type Description System.String | Improve this Doc View Source FdwInvalidOptionName Declaration public const string FdwInvalidOptionName = \"HV00D\" Field Value Type Description System.String | Improve this Doc View Source FdwInvalidStringFormat Declaration public const string FdwInvalidStringFormat = \"HV00A\" Field Value Type Description System.String | Improve this Doc View Source FdwInvalidStringLengthOrBufferLength Declaration public const string FdwInvalidStringLengthOrBufferLength = \"HV090\" Field Value Type Description System.String | Improve this Doc View Source FdwInvalidUseOfNullPointer Declaration public const string FdwInvalidUseOfNullPointer = \"HV009\" Field Value Type Description System.String | Improve this Doc View Source FdwNoSchemas Declaration public const string FdwNoSchemas = \"HV00P\" Field Value Type Description System.String | Improve this Doc View Source FdwOptionNameNotFound Declaration public const string FdwOptionNameNotFound = \"HV00J\" Field Value Type Description System.String | Improve this Doc View Source FdwOutOfMemory Declaration public const string FdwOutOfMemory = \"HV001\" Field Value Type Description System.String | Improve this Doc View Source FdwReplyHandle Declaration public const string FdwReplyHandle = \"HV00K\" Field Value Type Description System.String | Improve this Doc View Source FdwSchemaNotFound Declaration public const string FdwSchemaNotFound = \"HV00Q\" Field Value Type Description System.String | Improve this Doc View Source FdwTableNotFound Declaration public const string FdwTableNotFound = \"HV00R\" Field Value Type Description System.String | Improve this Doc View Source FdwTooManyHandles Declaration public const string FdwTooManyHandles = \"HV014\" Field Value Type Description System.String | Improve this Doc View Source FdwUnableToCreateExecution Declaration public const string FdwUnableToCreateExecution = \"HV00L\" Field Value Type Description System.String | Improve this Doc View Source FdwUnableToCreateReply Declaration public const string FdwUnableToCreateReply = \"HV00M\" Field Value Type Description System.String | Improve this Doc View Source FdwUnableToEstablishConnection Declaration public const string FdwUnableToEstablishConnection = \"HV00N\" Field Value Type Description System.String | Improve this Doc View Source FeatureNotSupported Declaration public const string FeatureNotSupported = \"0A000\" Field Value Type Description System.String | Improve this Doc View Source FloatingPointException Declaration public const string FloatingPointException = \"22P01\" Field Value Type Description System.String | Improve this Doc View Source ForeignKeyViolation Declaration public const string ForeignKeyViolation = \"23503\" Field Value Type Description System.String | Improve this Doc View Source FunctionExecutedNoReturnStatementSqlRoutineException Declaration public const string FunctionExecutedNoReturnStatementSqlRoutineException = \"2F005\" Field Value Type Description System.String | Improve this Doc View Source GroupingError Declaration public const string GroupingError = \"42803\" Field Value Type Description System.String | Improve this Doc View Source HeldCursorRequiresSameIsolationLevel Declaration public const string HeldCursorRequiresSameIsolationLevel = \"25008\" Field Value Type Description System.String | Improve this Doc View Source ImplicitZeroBitPaddingWarning Declaration public const string ImplicitZeroBitPaddingWarning = \"01008\" Field Value Type Description System.String | Improve this Doc View Source InappropriateAccessModeForBranchTransaction Declaration public const string InappropriateAccessModeForBranchTransaction = \"25003\" Field Value Type Description System.String | Improve this Doc View Source InappropriateIsolationLevelForBranchTransaction Declaration public const string InappropriateIsolationLevelForBranchTransaction = \"25004\" Field Value Type Description System.String | Improve this Doc View Source IndeterminateCollation Declaration public const string IndeterminateCollation = \"42P22\" Field Value Type Description System.String | Improve this Doc View Source IndeterminateDatatype Declaration public const string IndeterminateDatatype = \"42P18\" Field Value Type Description System.String | Improve this Doc View Source IndexCorrupted Declaration public const string IndexCorrupted = \"XX002\" Field Value Type Description System.String | Improve this Doc View Source IndicatorOverflow Declaration public const string IndicatorOverflow = \"22022\" Field Value Type Description System.String | Improve this Doc View Source InFailedSqlTransaction Declaration public const string InFailedSqlTransaction = \"25P02\" Field Value Type Description System.String | Improve this Doc View Source InsufficientPrivilege Declaration public const string InsufficientPrivilege = \"42501\" Field Value Type Description System.String | Improve this Doc View Source InsufficientResources Declaration public const string InsufficientResources = \"53000\" Field Value Type Description System.String | Improve this Doc View Source IntegrityConstraintViolation Declaration public const string IntegrityConstraintViolation = \"23000\" Field Value Type Description System.String | Improve this Doc View Source InternalError Declaration public const string InternalError = \"XX000\" Field Value Type Description System.String | Improve this Doc View Source IntervalFieldOverflow Declaration public const string IntervalFieldOverflow = \"22015\" Field Value Type Description System.String | Improve this Doc View Source InvalidArgumentForLogarithm Declaration public const string InvalidArgumentForLogarithm = \"2201E\" Field Value Type Description System.String | Improve this Doc View Source InvalidArgumentForNthValueFunction Declaration public const string InvalidArgumentForNthValueFunction = \"22016\" Field Value Type Description System.String | Improve this Doc View Source InvalidArgumentForNtileFunction Declaration public const string InvalidArgumentForNtileFunction = \"22014\" Field Value Type Description System.String | Improve this Doc View Source InvalidArgumentForPowerFunction Declaration public const string InvalidArgumentForPowerFunction = \"2201F\" Field Value Type Description System.String | Improve this Doc View Source InvalidArgumentForWidthBucketFunction Declaration public const string InvalidArgumentForWidthBucketFunction = \"2201G\" Field Value Type Description System.String | Improve this Doc View Source InvalidAuthorizationSpecification Declaration public const string InvalidAuthorizationSpecification = \"28000\" Field Value Type Description System.String | Improve this Doc View Source InvalidBinaryRepresentation Declaration public const string InvalidBinaryRepresentation = \"22P03\" Field Value Type Description System.String | Improve this Doc View Source InvalidCatalogName Declaration public const string InvalidCatalogName = \"3D000\" Field Value Type Description System.String | Improve this Doc View Source InvalidCharacterValueForCast Declaration public const string InvalidCharacterValueForCast = \"22018\" Field Value Type Description System.String | Improve this Doc View Source InvalidColumnDefinition Declaration public const string InvalidColumnDefinition = \"42611\" Field Value Type Description System.String | Improve this Doc View Source InvalidColumnReference Declaration public const string InvalidColumnReference = \"42P10\" Field Value Type Description System.String | Improve this Doc View Source InvalidCursorDefinition Declaration public const string InvalidCursorDefinition = \"42P11\" Field Value Type Description System.String | Improve this Doc View Source InvalidCursorName Declaration public const string InvalidCursorName = \"34000\" Field Value Type Description System.String | Improve this Doc View Source InvalidCursorState Declaration public const string InvalidCursorState = \"24000\" Field Value Type Description System.String | Improve this Doc View Source InvalidDatabaseDefinition Declaration public const string InvalidDatabaseDefinition = \"42P12\" Field Value Type Description System.String | Improve this Doc View Source InvalidDatetimeFormat Declaration public const string InvalidDatetimeFormat = \"22007\" Field Value Type Description System.String | Improve this Doc View Source InvalidEscapeCharacter Declaration public const string InvalidEscapeCharacter = \"22019\" Field Value Type Description System.String | Improve this Doc View Source InvalidEscapeOctet Declaration public const string InvalidEscapeOctet = \"2200D\" Field Value Type Description System.String | Improve this Doc View Source InvalidEscapeSequence Declaration public const string InvalidEscapeSequence = \"22025\" Field Value Type Description System.String | Improve this Doc View Source InvalidForeignKey Declaration public const string InvalidForeignKey = \"42830\" Field Value Type Description System.String | Improve this Doc View Source InvalidFunctionDefinition Declaration public const string InvalidFunctionDefinition = \"42P13\" Field Value Type Description System.String | Improve this Doc View Source InvalidGrantOperation Declaration public const string InvalidGrantOperation = \"0LP01\" Field Value Type Description System.String | Improve this Doc View Source InvalidGrantor Declaration public const string InvalidGrantor = \"0L000\" Field Value Type Description System.String | Improve this Doc View Source InvalidIndicatorParameterValue Declaration public const string InvalidIndicatorParameterValue = \"22010\" Field Value Type Description System.String | Improve this Doc View Source InvalidLocatorSpecification Declaration public const string InvalidLocatorSpecification = \"0F001\" Field Value Type Description System.String | Improve this Doc View Source InvalidName Declaration public const string InvalidName = \"42602\" Field Value Type Description System.String | Improve this Doc View Source InvalidObjectDefinition Declaration public const string InvalidObjectDefinition = \"42P17\" Field Value Type Description System.String | Improve this Doc View Source InvalidParameterValue Declaration public const string InvalidParameterValue = \"22023\" Field Value Type Description System.String | Improve this Doc View Source InvalidPassword Declaration public const string InvalidPassword = \"28P01\" Field Value Type Description System.String | Improve this Doc View Source InvalidPreparedStatementDefinition Declaration public const string InvalidPreparedStatementDefinition = \"42P14\" Field Value Type Description System.String | Improve this Doc View Source InvalidRecursion Declaration public const string InvalidRecursion = \"42P19\" Field Value Type Description System.String | Improve this Doc View Source InvalidRegularExpression Declaration public const string InvalidRegularExpression = \"2201B\" Field Value Type Description System.String | Improve this Doc View Source InvalidRoleSpecification Declaration public const string InvalidRoleSpecification = \"0P000\" Field Value Type Description System.String | Improve this Doc View Source InvalidRowCountInLimitClause Declaration public const string InvalidRowCountInLimitClause = \"2201W\" Field Value Type Description System.String | Improve this Doc View Source InvalidRowCountInResultOffsetClause Declaration public const string InvalidRowCountInResultOffsetClause = \"2201X\" Field Value Type Description System.String | Improve this Doc View Source InvalidSavepointSpecification Declaration public const string InvalidSavepointSpecification = \"3B001\" Field Value Type Description System.String | Improve this Doc View Source InvalidSchemaDefinition Declaration public const string InvalidSchemaDefinition = \"42P15\" Field Value Type Description System.String | Improve this Doc View Source InvalidSchemaName Declaration public const string InvalidSchemaName = \"3F000\" Field Value Type Description System.String | Improve this Doc View Source InvalidSqlStatementName Declaration public const string InvalidSqlStatementName = \"26000\" Field Value Type Description System.String | Improve this Doc View Source InvalidSqlstateReturnedExternalRoutineInvocationException Declaration public const string InvalidSqlstateReturnedExternalRoutineInvocationException = \"39001\" Field Value Type Description System.String | Improve this Doc View Source InvalidTableDefinition Declaration public const string InvalidTableDefinition = \"42P16\" Field Value Type Description System.String | Improve this Doc View Source InvalidTablesampleArgument Declaration public const string InvalidTablesampleArgument = \"2202H\" Field Value Type Description System.String | Improve this Doc View Source InvalidTablesampleRepeat Declaration public const string InvalidTablesampleRepeat = \"2202G\" Field Value Type Description System.String | Improve this Doc View Source InvalidTextRepresentation Declaration public const string InvalidTextRepresentation = \"22P02\" Field Value Type Description System.String | Improve this Doc View Source InvalidTimeZoneDisplacementValue Declaration public const string InvalidTimeZoneDisplacementValue = \"22009\" Field Value Type Description System.String | Improve this Doc View Source InvalidTransactionInitiation Declaration public const string InvalidTransactionInitiation = \"0B000\" Field Value Type Description System.String | Improve this Doc View Source InvalidTransactionState Declaration public const string InvalidTransactionState = \"25000\" Field Value Type Description System.String | Improve this Doc View Source InvalidTransactionTermination Declaration public const string InvalidTransactionTermination = \"2D000\" Field Value Type Description System.String | Improve this Doc View Source InvalidUseOfEscapeCharacter Declaration public const string InvalidUseOfEscapeCharacter = \"2200C\" Field Value Type Description System.String | Improve this Doc View Source InvalidXmlComment Declaration public const string InvalidXmlComment = \"2200S\" Field Value Type Description System.String | Improve this Doc View Source InvalidXmlContent Declaration public const string InvalidXmlContent = \"2200N\" Field Value Type Description System.String | Improve this Doc View Source InvalidXmlDocument Declaration public const string InvalidXmlDocument = \"2200M\" Field Value Type Description System.String | Improve this Doc View Source InvalidXmlProcessingInstruction Declaration public const string InvalidXmlProcessingInstruction = \"2200T\" Field Value Type Description System.String | Improve this Doc View Source IoError Declaration public const string IoError = \"58030\" Field Value Type Description System.String | Improve this Doc View Source LocatorException Declaration public const string LocatorException = \"0F000\" Field Value Type Description System.String | Improve this Doc View Source LockFileExists Declaration public const string LockFileExists = \"F0001\" Field Value Type Description System.String | Improve this Doc View Source LockNotAvailable Declaration public const string LockNotAvailable = \"55P03\" Field Value Type Description System.String | Improve this Doc View Source ModifyingSqlDataNotPermittedExternalRoutineException Declaration public const string ModifyingSqlDataNotPermittedExternalRoutineException = \"38002\" Field Value Type Description System.String | Improve this Doc View Source ModifyingSqlDataNotPermittedSqlRoutineException Declaration public const string ModifyingSqlDataNotPermittedSqlRoutineException = \"2F002\" Field Value Type Description System.String | Improve this Doc View Source MostSpecificTypeMismatch Declaration public const string MostSpecificTypeMismatch = \"2200G\" Field Value Type Description System.String | Improve this Doc View Source NameTooLong Declaration public const string NameTooLong = \"42622\" Field Value Type Description System.String | Improve this Doc View Source NoActiveSqlTransaction Declaration public const string NoActiveSqlTransaction = \"25P01\" Field Value Type Description System.String | Improve this Doc View Source NoActiveSqlTransactionForBranchTransaction Declaration public const string NoActiveSqlTransactionForBranchTransaction = \"25005\" Field Value Type Description System.String | Improve this Doc View Source NoAdditionalDynamicResultSetsReturned Declaration public const string NoAdditionalDynamicResultSetsReturned = \"02001\" Field Value Type Description System.String | Improve this Doc View Source NoData Declaration public const string NoData = \"02000\" Field Value Type Description System.String | Improve this Doc View Source NoDataFound Declaration public const string NoDataFound = \"P0002\" Field Value Type Description System.String | Improve this Doc View Source NonstandardUseOfEscapeCharacter Declaration public const string NonstandardUseOfEscapeCharacter = \"22P06\" Field Value Type Description System.String | Improve this Doc View Source NotAnXmlDocument Declaration public const string NotAnXmlDocument = \"2200L\" Field Value Type Description System.String | Improve this Doc View Source NotNullViolation Declaration public const string NotNullViolation = \"23502\" Field Value Type Description System.String | Improve this Doc View Source NullValueEliminatedInSetFunctionWarning Declaration public const string NullValueEliminatedInSetFunctionWarning = \"01003\" Field Value Type Description System.String | Improve this Doc View Source NullValueNoIndicatorParameter Declaration public const string NullValueNoIndicatorParameter = \"22002\" Field Value Type Description System.String | Improve this Doc View Source NullValueNotAllowed Declaration public const string NullValueNotAllowed = \"22004\" Field Value Type Description System.String | Improve this Doc View Source NullValueNotAllowedExternalRoutineInvocationException Declaration public const string NullValueNotAllowedExternalRoutineInvocationException = \"39004\" Field Value Type Description System.String | Improve this Doc View Source NumericValueOutOfRange Declaration public const string NumericValueOutOfRange = \"22003\" Field Value Type Description System.String | Improve this Doc View Source ObjectInUse Declaration public const string ObjectInUse = \"55006\" Field Value Type Description System.String | Improve this Doc View Source ObjectNotInPrerequisiteState Declaration public const string ObjectNotInPrerequisiteState = \"55000\" Field Value Type Description System.String | Improve this Doc View Source OperatorIntervention Declaration public const string OperatorIntervention = \"57000\" Field Value Type Description System.String | Improve this Doc View Source OutOfMemory Declaration public const string OutOfMemory = \"53200\" Field Value Type Description System.String | Improve this Doc View Source PlpgsqlError Declaration public const string PlpgsqlError = \"P0000\" Field Value Type Description System.String | Improve this Doc View Source PrivilegeNotGrantedWarning Declaration public const string PrivilegeNotGrantedWarning = \"01007\" Field Value Type Description System.String | Improve this Doc View Source PrivilegeNotRevokedWarning Declaration public const string PrivilegeNotRevokedWarning = \"01006\" Field Value Type Description System.String | Improve this Doc View Source ProgramLimitExceeded Declaration public const string ProgramLimitExceeded = \"54000\" Field Value Type Description System.String | Improve this Doc View Source ProhibitedSqlStatementAttemptedExternalRoutineException Declaration public const string ProhibitedSqlStatementAttemptedExternalRoutineException = \"38003\" Field Value Type Description System.String | Improve this Doc View Source ProhibitedSqlStatementAttemptedSqlRoutineException Declaration public const string ProhibitedSqlStatementAttemptedSqlRoutineException = \"2F003\" Field Value Type Description System.String | Improve this Doc View Source ProtocolViolation Declaration public const string ProtocolViolation = \"08P01\" Field Value Type Description System.String | Improve this Doc View Source QueryCanceled Declaration public const string QueryCanceled = \"57014\" Field Value Type Description System.String | Improve this Doc View Source RaiseException Declaration public const string RaiseException = \"P0001\" Field Value Type Description System.String | Improve this Doc View Source ReadingSqlDataNotPermittedExternalRoutineException Declaration public const string ReadingSqlDataNotPermittedExternalRoutineException = \"38004\" Field Value Type Description System.String | Improve this Doc View Source ReadingSqlDataNotPermittedSqlRoutineException Declaration public const string ReadingSqlDataNotPermittedSqlRoutineException = \"2F004\" Field Value Type Description System.String | Improve this Doc View Source ReadOnlySqlTransaction Declaration public const string ReadOnlySqlTransaction = \"25006\" Field Value Type Description System.String | Improve this Doc View Source ReservedName Declaration public const string ReservedName = \"42939\" Field Value Type Description System.String | Improve this Doc View Source RestrictViolation Declaration public const string RestrictViolation = \"23001\" Field Value Type Description System.String | Improve this Doc View Source SavepointException Declaration public const string SavepointException = \"3B000\" Field Value Type Description System.String | Improve this Doc View Source SchemaAndDataStatementMixingNotSupported Declaration public const string SchemaAndDataStatementMixingNotSupported = \"25007\" Field Value Type Description System.String | Improve this Doc View Source SerializationFailure Declaration public const string SerializationFailure = \"40001\" Field Value Type Description System.String | Improve this Doc View Source SnapshotFailure Declaration public const string SnapshotFailure = \"72000\" Field Value Type Description System.String | Improve this Doc View Source SqlClientUnableToEstablishSqlConnection Declaration public const string SqlClientUnableToEstablishSqlConnection = \"08001\" Field Value Type Description System.String | Improve this Doc View Source SqlRoutineException Declaration public const string SqlRoutineException = \"2F000\" Field Value Type Description System.String | Improve this Doc View Source SqlServerRejectedEstablishmentOfSqlConnection Declaration public const string SqlServerRejectedEstablishmentOfSqlConnection = \"08004\" Field Value Type Description System.String | Improve this Doc View Source SqlStatementNotYetComplete Declaration public const string SqlStatementNotYetComplete = \"03000\" Field Value Type Description System.String | Improve this Doc View Source SrfProtocolViolatedExternalRoutineInvocationException Declaration public const string SrfProtocolViolatedExternalRoutineInvocationException = \"39P02\" Field Value Type Description System.String | Improve this Doc View Source StackedDiagnosticsAccessedWithoutActiveHandler Declaration public const string StackedDiagnosticsAccessedWithoutActiveHandler = \"0Z002\" Field Value Type Description System.String | Improve this Doc View Source StatementCompletionUnknown Declaration public const string StatementCompletionUnknown = \"40003\" Field Value Type Description System.String | Improve this Doc View Source StatementTooComplex Declaration public const string StatementTooComplex = \"54001\" Field Value Type Description System.String | Improve this Doc View Source StringDataLengthMismatch Declaration public const string StringDataLengthMismatch = \"22026\" Field Value Type Description System.String | Improve this Doc View Source StringDataRightTruncation Declaration public const string StringDataRightTruncation = \"22001\" Field Value Type Description System.String | Improve this Doc View Source StringDataRightTruncationWarning Declaration public const string StringDataRightTruncationWarning = \"01004\" Field Value Type Description System.String | Improve this Doc View Source SubstringError Declaration public const string SubstringError = \"22011\" Field Value Type Description System.String | Improve this Doc View Source SuccessfulCompletion Declaration public const string SuccessfulCompletion = \"00000\" Field Value Type Description System.String | Improve this Doc View Source SyntaxError Declaration public const string SyntaxError = \"42601\" Field Value Type Description System.String | Improve this Doc View Source SyntaxErrorOrAccessRuleViolation Declaration public const string SyntaxErrorOrAccessRuleViolation = \"42000\" Field Value Type Description System.String | Improve this Doc View Source SystemError Declaration public const string SystemError = \"58000\" Field Value Type Description System.String | Improve this Doc View Source TooManyArguments Declaration public const string TooManyArguments = \"54023\" Field Value Type Description System.String | Improve this Doc View Source TooManyColumns Declaration public const string TooManyColumns = \"54011\" Field Value Type Description System.String | Improve this Doc View Source TooManyConnections Declaration public const string TooManyConnections = \"53300\" Field Value Type Description System.String | Improve this Doc View Source TooManyRows Declaration public const string TooManyRows = \"P0003\" Field Value Type Description System.String | Improve this Doc View Source TransactionIntegrityConstraintViolation Declaration public const string TransactionIntegrityConstraintViolation = \"40002\" Field Value Type Description System.String | Improve this Doc View Source TransactionResolutionUnknown Declaration public const string TransactionResolutionUnknown = \"08007\" Field Value Type Description System.String | Improve this Doc View Source TransactionRollback Declaration public const string TransactionRollback = \"40000\" Field Value Type Description System.String | Improve this Doc View Source TriggeredActionException Declaration public const string TriggeredActionException = \"09000\" Field Value Type Description System.String | Improve this Doc View Source TriggeredDataChangeViolation Declaration public const string TriggeredDataChangeViolation = \"27000\" Field Value Type Description System.String | Improve this Doc View Source TriggerProtocolViolatedExternalRoutineInvocationException Declaration public const string TriggerProtocolViolatedExternalRoutineInvocationException = \"39P01\" Field Value Type Description System.String | Improve this Doc View Source TrimError Declaration public const string TrimError = \"22027\" Field Value Type Description System.String | Improve this Doc View Source UndefinedColumn Declaration public const string UndefinedColumn = \"42703\" Field Value Type Description System.String | Improve this Doc View Source UndefinedFile Declaration public const string UndefinedFile = \"58P01\" Field Value Type Description System.String | Improve this Doc View Source UndefinedFunction Declaration public const string UndefinedFunction = \"42883\" Field Value Type Description System.String | Improve this Doc View Source UndefinedObject Declaration public const string UndefinedObject = \"42704\" Field Value Type Description System.String | Improve this Doc View Source UndefinedParameter Declaration public const string UndefinedParameter = \"42P02\" Field Value Type Description System.String | Improve this Doc View Source UndefinedTable Declaration public const string UndefinedTable = \"42P01\" Field Value Type Description System.String | Improve this Doc View Source UniqueViolation Declaration public const string UniqueViolation = \"23505\" Field Value Type Description System.String | Improve this Doc View Source UnterminatedCString Declaration public const string UnterminatedCString = \"22024\" Field Value Type Description System.String | Improve this Doc View Source UntranslatableCharacter Declaration public const string UntranslatableCharacter = \"22P05\" Field Value Type Description System.String | Improve this Doc View Source Warning Declaration public const string Warning = \"01000\" Field Value Type Description System.String | Improve this Doc View Source WindowingError Declaration public const string WindowingError = \"42P20\" Field Value Type Description System.String | Improve this Doc View Source WithCheckOptionViolation Declaration public const string WithCheckOptionViolation = \"44000\" Field Value Type Description System.String | Improve this Doc View Source WrongObjectType Declaration public const string WrongObjectType = \"42809\" Field Value Type Description System.String | Improve this Doc View Source ZeroLengthCharacterString Declaration public const string ZeroLengthCharacterString = \"2200F\" Field Value Type Description System.String"
  },
  "doc/api/NpgsqlTypes.NpgsqlPolygon.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlPolygon.html",
    "title": "Struct NpgsqlPolygon | Npgsql Documentation",
    "keywords": "Struct NpgsqlPolygon Represents a PostgreSQL Polygon type. Implements System.Collections.Generic.IList < NpgsqlPoint > System.Collections.Generic.ICollection < NpgsqlPoint > System.Collections.Generic.IEnumerable < NpgsqlPoint > System.Collections.IEnumerable System.IEquatable < NpgsqlPolygon > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlPolygon : IList<NpgsqlPoint>, ICollection<NpgsqlPoint>, IEnumerable<NpgsqlPoint>, IEnumerable, IEquatable<NpgsqlPolygon> Constructors | Improve this Doc View Source NpgsqlPolygon(NpgsqlPoint[]) Declaration public NpgsqlPolygon(params NpgsqlPoint[] points) Parameters Type Name Description NpgsqlPoint [] points | Improve this Doc View Source NpgsqlPolygon(IEnumerable<NpgsqlPoint>) Declaration public NpgsqlPolygon(IEnumerable<NpgsqlPoint> points) Parameters Type Name Description System.Collections.Generic.IEnumerable < NpgsqlPoint > points | Improve this Doc View Source NpgsqlPolygon(Int32) Declaration public NpgsqlPolygon(int capacity) Parameters Type Name Description System.Int32 capacity Properties | Improve this Doc View Source Capacity Declaration public int Capacity { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Declaration public NpgsqlPoint this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description NpgsqlPoint Methods | Improve this Doc View Source Add(NpgsqlPoint) Declaration public void Add(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(NpgsqlPoint) Declaration public bool Contains(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(NpgsqlPoint[], Int32) Declaration public void CopyTo(NpgsqlPoint[] array, int arrayIndex) Parameters Type Name Description NpgsqlPoint [] array System.Int32 arrayIndex | Improve this Doc View Source Equals(NpgsqlPolygon) Declaration public bool Equals(NpgsqlPolygon other) Parameters Type Name Description NpgsqlPolygon other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<NpgsqlPoint> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < NpgsqlPoint > | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source IndexOf(NpgsqlPoint) Declaration public int IndexOf(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description System.Int32 | Improve this Doc View Source Insert(Int32, NpgsqlPoint) Declaration public void Insert(int index, NpgsqlPoint item) Parameters Type Name Description System.Int32 index NpgsqlPoint item | Improve this Doc View Source Parse(String) Declaration public static NpgsqlPolygon Parse(string s) Parameters Type Name Description System.String s Returns Type Description NpgsqlPolygon | Improve this Doc View Source Remove(NpgsqlPoint) Declaration public bool Remove(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description System.Boolean | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlPolygon, NpgsqlPolygon) Declaration public static bool operator ==(NpgsqlPolygon x, NpgsqlPolygon y) Parameters Type Name Description NpgsqlPolygon x NpgsqlPolygon y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlPolygon, NpgsqlPolygon) Declaration public static bool operator !=(NpgsqlPolygon x, NpgsqlPolygon y) Parameters Type Name Description NpgsqlPolygon x NpgsqlPolygon y Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.IEquatable<T>"
  },
  "doc/api/Npgsql.LegacyPostgis.html": {
    "href": "doc/api/Npgsql.LegacyPostgis.html",
    "title": "Namespace Npgsql.LegacyPostgis | Npgsql Documentation",
    "keywords": "Namespace Npgsql.LegacyPostgis Classes LegacyPostgisHandlerFactory PostgisGeometry Represents an Postgis feature. PostgisGeometryCollection Represents a collection of Postgis feature. PostgisLineString Represents an Ogc 2D LineString PostgisMultiLineString Represents a Postgis 2D MultiLineString PostgisMultiPoint Represents a Postgis 2D MultiPoint PostgisMultiPolygon Represents a Postgis 2D MultiPolygon. PostgisPoint Represents an Postgis 2D Point PostgisPolygon Represents an Postgis 2D Polygon. Structs Coordinate2D A structure representing a 2D double precision floating point coordinate;"
  },
  "doc/api/Npgsql.TypeHandlers.IEnumTypeHandlerFactory.html": {
    "href": "doc/api/Npgsql.TypeHandlers.IEnumTypeHandlerFactory.html",
    "title": "Interface IEnumTypeHandlerFactory | Npgsql Documentation",
    "keywords": "Interface IEnumTypeHandlerFactory Interface implemented by all enum handler factories. Used to expose the name translator for those reflecting enum mappings (e.g. EF Core). Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public interface IEnumTypeHandlerFactory Properties | Improve this Doc View Source NameTranslator The name translator used for this enum. Declaration INpgsqlNameTranslator NameTranslator { get; } Property Value Type Description INpgsqlNameTranslator"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNetworkExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNetworkExtensions.html",
    "title": "Class NpgsqlNetworkExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNetworkExtensions Provides extension methods supporting operator translation for PostgreSQL network types. Inheritance System.Object NpgsqlNetworkExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlNetworkExtensions Remarks See: https://www.postgresql.org/docs/current/static/functions-net.html Methods | Improve this Doc View Source Abbreviate(DbFunctions, IPAddress) Returns the abbreviated display format as text. Declaration public static string Abbreviate(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet to abbreviate. Returns Type Description System.String The abbreviated display format as text. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Abbreviate(DbFunctions, (IPAddress Address, Int32 Subnet)) Returns the abbreviated display format as text. Declaration public static string Abbreviate(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr to abbreviate. Returns Type Description System.String The abbreviated display format as text. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Add(DbFunctions, IPAddress, Int32) Adds the value to the System.Net.IPAddress . Declaration public static IPAddress Add(this DbFunctions _, IPAddress inet, int value) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet. System.Int32 value The value to add. Returns Type Description System.Net.IPAddress The System.Net.IPAddress augmented by the value . Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Add(DbFunctions, (IPAddress Address, Int32 Subnet), Int32) Adds the value to the (IPAddress Address, int Subnet). Declaration public static (IPAddress Address, int Subnet) Add(this DbFunctions _, (IPAddress Address, int Subnet) cidr, int value) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr. System.Int32 value The value to add. Returns Type Description System.ValueTuple < System.Net.IPAddress , System.Int32 > The (IPAddress Address, int Subnet) augmented by the value . Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source BitwiseAnd(DbFunctions, IPAddress, IPAddress) Computes the bitwise AND of two System.Net.IPAddress instances. Declaration public static IPAddress BitwiseAnd(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The left-hand inet. System.Net.IPAddress other The right-hand inet. Returns Type Description System.Net.IPAddress The result of the bitwise AND operation. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source BitwiseAnd(DbFunctions, PhysicalAddress, PhysicalAddress) Computes the bitwise AND of two System.Net.NetworkInformation.PhysicalAddress instances. Declaration public static PhysicalAddress BitwiseAnd(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.NetworkInformation.PhysicalAddress macaddr The left-hand macaddr. System.Net.NetworkInformation.PhysicalAddress other The right-hand macaddr. Returns Type Description System.Net.NetworkInformation.PhysicalAddress The result of the bitwise AND operation. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source BitwiseAnd(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Computes the bitwise AND of two (IPAddress Address, int Subnet) instances. Declaration public static (IPAddress Address, int Subnet) BitwiseAnd(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The left-hand cidr. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The right-hand cidr. Returns Type Description System.ValueTuple < System.Net.IPAddress , System.Int32 > The result of the bitwise AND operation. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source BitwiseNot(DbFunctions, IPAddress) Computes the bitwise NOT operation on an System.Net.IPAddress . Declaration public static IPAddress BitwiseNot(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet to negate. Returns Type Description System.Net.IPAddress The result of the bitwise NOT operation. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source BitwiseNot(DbFunctions, PhysicalAddress) Computes the bitwise NOT operation on an System.Net.NetworkInformation.PhysicalAddress . Declaration public static PhysicalAddress BitwiseNot(this DbFunctions _, PhysicalAddress macaddr) Parameters Type Name Description DbFunctions _ The instance. System.Net.NetworkInformation.PhysicalAddress macaddr The macaddr to negate. Returns Type Description System.Net.NetworkInformation.PhysicalAddress The result of the bitwise NOT operation. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source BitwiseNot(DbFunctions, (IPAddress Address, Int32 Subnet)) Computes the bitwise NOT operation on an (IPAddress Address, int Subnet). Declaration public static (IPAddress Address, int Subnet) BitwiseNot(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr to negate. Returns Type Description System.ValueTuple < System.Net.IPAddress , System.Int32 > The result of the bitwise NOT operation. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source BitwiseOr(DbFunctions, IPAddress, IPAddress) Computes the bitwise OR of two System.Net.IPAddress instances. Declaration public static IPAddress BitwiseOr(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The left-hand inet. System.Net.IPAddress other The right-hand inet. Returns Type Description System.Net.IPAddress The result of the bitwise OR operation. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source BitwiseOr(DbFunctions, PhysicalAddress, PhysicalAddress) Computes the bitwise OR of two System.Net.NetworkInformation.PhysicalAddress instances. Declaration public static PhysicalAddress BitwiseOr(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.NetworkInformation.PhysicalAddress macaddr The left-hand macaddr. System.Net.NetworkInformation.PhysicalAddress other The right-hand macaddr. Returns Type Description System.Net.NetworkInformation.PhysicalAddress The result of the bitwise OR operation. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source BitwiseOr(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Computes the bitwise OR of two (IPAddress Address, int Subnet) instances. Declaration public static (IPAddress Address, int Subnet) BitwiseOr(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The left-hand cidr. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The right-hand cidr. Returns Type Description System.ValueTuple < System.Net.IPAddress , System.Int32 > The result of the bitwise OR operation. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Broadcast(DbFunctions, IPAddress) Returns the broadcast address for a network. Declaration public static IPAddress Broadcast(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet used to derive the broadcast address. Returns Type Description System.Net.IPAddress The broadcast address for a network. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Broadcast(DbFunctions, (IPAddress Address, Int32 Subnet)) Returns the broadcast address for a network. Declaration public static IPAddress Broadcast(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr used to derive the broadcast address. Returns Type Description System.Net.IPAddress The broadcast address for a network. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source ContainedBy(DbFunctions, IPAddress, IPAddress) Determines whether an System.Net.IPAddress is contained within another System.Net.IPAddress . Declaration public static bool ContainedBy(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet to locate. System.Net.IPAddress other The inet to search. Returns Type Description System.Boolean True if the System.Net.IPAddress is contained within the other System.Net.IPAddress ; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source ContainedBy(DbFunctions, IPAddress, (IPAddress Address, Int32 Subnet)) Determines whether an System.Net.IPAddress is contained within a network. Declaration public static bool ContainedBy(this DbFunctions _, IPAddress inet, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet to locate. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The cidr to search. Returns Type Description System.Boolean True if the System.Net.IPAddress is contained within the network; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source ContainedBy(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) is contained within another (IPAddress Address, int Subnet). Declaration public static bool ContainedBy(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr to locate. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The cidr to search. Returns Type Description System.Boolean True if the (IPAddress Address, int Subnet) is contained within the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source ContainedByOrEqual(DbFunctions, IPAddress, IPAddress) Determines whether an System.Net.IPAddress is contained within or equal to another System.Net.IPAddress . Declaration public static bool ContainedByOrEqual(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet to locate. System.Net.IPAddress other The inet to search. Returns Type Description System.Boolean True if the System.Net.IPAddress is contained within or equal to the other System.Net.IPAddress ; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source ContainedByOrEqual(DbFunctions, IPAddress, (IPAddress Address, Int32 Subnet)) Determines whether an System.Net.IPAddress is contained within or equal to a network. Declaration public static bool ContainedByOrEqual(this DbFunctions _, IPAddress inet, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet to locate. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The cidr to search. Returns Type Description System.Boolean True if the System.Net.IPAddress is contained within or equal to the network; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source ContainedByOrEqual(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) is contained within or equal to another (IPAddress Address, int Subnet). Declaration public static bool ContainedByOrEqual(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr to locate. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The cidr to search. Returns Type Description System.Boolean True if the (IPAddress Address, int Subnet) is contained within or equal to the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Contains(DbFunctions, IPAddress, IPAddress) Determines whether an System.Net.IPAddress contains another System.Net.IPAddress . Declaration public static bool Contains(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The IP address to search. System.Net.IPAddress other The IP address to locate. Returns Type Description System.Boolean True if the System.Net.IPAddress contains the other System.Net.IPAddress ; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Contains(DbFunctions, (IPAddress Address, Int32 Subnet), IPAddress) Determines whether a network contains another System.Net.IPAddress . Declaration public static bool Contains(this DbFunctions _, (IPAddress Address, int Subnet) cidr, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The network to search. System.Net.IPAddress other The IP address to locate. Returns Type Description System.Boolean True if the network contains the other System.Net.IPAddress ; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Contains(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) contains another (IPAddress Address, int Subnet). Declaration public static bool Contains(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr to search. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The cidr to locate. Returns Type Description System.Boolean True if the (IPAddress Address, int Subnet) contains the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source ContainsOrContainedBy(DbFunctions, IPAddress, IPAddress) Determines whether an System.Net.IPAddress contains or is contained by another System.Net.IPAddress . Declaration public static bool ContainsOrContainedBy(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The IP address to search. System.Net.IPAddress other The IP address to locate. Returns Type Description System.Boolean True if the System.Net.IPAddress contains or is contained by the other System.Net.IPAddress ; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source ContainsOrContainedBy(DbFunctions, IPAddress, (IPAddress Address, Int32 Subnet)) Determines whether an System.Net.IPAddress contains or is contained by a network. Declaration public static bool ContainsOrContainedBy(this DbFunctions _, IPAddress inet, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The IP address to search. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The network to locate. Returns Type Description System.Boolean True if the System.Net.IPAddress contains or is contained by the network; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source ContainsOrContainedBy(DbFunctions, (IPAddress Address, Int32 Subnet), IPAddress) Determines whether a network contains or is contained by an System.Net.IPAddress . Declaration public static bool ContainsOrContainedBy(this DbFunctions _, (IPAddress Address, int Subnet) cidr, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The network to search. System.Net.IPAddress other The IP address to locate. Returns Type Description System.Boolean True if the network contains or is contained by the System.Net.IPAddress ; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source ContainsOrContainedBy(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) contains or is contained by another (IPAddress Address, int Subnet). Declaration public static bool ContainsOrContainedBy(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr to search. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The cidr to locate. Returns Type Description System.Boolean True if the (IPAddress Address, int Subnet) contains or is contained by the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source ContainsOrEqual(DbFunctions, IPAddress, IPAddress) Determines whether an System.Net.IPAddress contains or is equal to another System.Net.IPAddress . Declaration public static bool ContainsOrEqual(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The IP address to search. System.Net.IPAddress other The IP address to locate. Returns Type Description System.Boolean True if the System.Net.IPAddress contains or is equal to the other System.Net.IPAddress ; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source ContainsOrEqual(DbFunctions, (IPAddress Address, Int32 Subnet), IPAddress) Determines whether a network contains or is equal to another System.Net.IPAddress . Declaration public static bool ContainsOrEqual(this DbFunctions _, (IPAddress Address, int Subnet) cidr, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The network to search. System.Net.IPAddress other The IP address to locate. Returns Type Description System.Boolean True if the network contains or is equal to the other System.Net.IPAddress ; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source ContainsOrEqual(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) contains or is equal to another (IPAddress Address, int Subnet). Declaration public static bool ContainsOrEqual(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr to search. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The cidr to locate. Returns Type Description System.Boolean True if the (IPAddress Address, int Subnet) contains or is equal to the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Family(DbFunctions, IPAddress) Extracts the family of an address; 4 for IPv4, 6 for IPv6. Declaration public static int Family(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet used to derive the family. Returns Type Description System.Int32 The family of an address; 4 for IPv4, 6 for IPv6. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Family(DbFunctions, (IPAddress Address, Int32 Subnet)) Extracts the family of an address; 4 for IPv4, 6 for IPv6. Declaration public static int Family(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr used to derive the family. Returns Type Description System.Int32 The family of an address; 4 for IPv4, 6 for IPv6. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source GreaterThan(DbFunctions, IPAddress, IPAddress) Determines whether an System.Net.IPAddress is greater than another System.Net.IPAddress . Declaration public static bool GreaterThan(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The left-hand inet. System.Net.IPAddress other The right-hand inet. Returns Type Description System.Boolean True if the System.Net.IPAddress is greater than the other System.Net.IPAddress ; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source GreaterThan(DbFunctions, PhysicalAddress, PhysicalAddress) Determines whether an System.Net.NetworkInformation.PhysicalAddress is greater than another System.Net.NetworkInformation.PhysicalAddress . Declaration public static bool GreaterThan(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.NetworkInformation.PhysicalAddress macaddr The left-hand macaddr. System.Net.NetworkInformation.PhysicalAddress other The right-hand macaddr. Returns Type Description System.Boolean True if the System.Net.NetworkInformation.PhysicalAddress is greater than the other System.Net.NetworkInformation.PhysicalAddress ; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source GreaterThan(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) is greater than another (IPAddress Address, int Subnet). Declaration public static bool GreaterThan(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The left-hand cidr. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The right-hand cidr. Returns Type Description System.Boolean True if the (IPAddress Address, int Subnet) is greater than the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source GreaterThanOrEqual(DbFunctions, IPAddress, IPAddress) Determines whether an System.Net.IPAddress is greater than or equal to another System.Net.IPAddress . Declaration public static bool GreaterThanOrEqual(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The left-hand inet. System.Net.IPAddress other The right-hand inet. Returns Type Description System.Boolean True if the System.Net.IPAddress is greater than or equal to the other System.Net.IPAddress ; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source GreaterThanOrEqual(DbFunctions, PhysicalAddress, PhysicalAddress) Determines whether an System.Net.NetworkInformation.PhysicalAddress is greater than or equal to another System.Net.NetworkInformation.PhysicalAddress . Declaration public static bool GreaterThanOrEqual(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.NetworkInformation.PhysicalAddress macaddr The left-hand macaddr. System.Net.NetworkInformation.PhysicalAddress other The right-hand macaddr. Returns Type Description System.Boolean True if the System.Net.NetworkInformation.PhysicalAddress is greater than or equal to the other System.Net.NetworkInformation.PhysicalAddress ; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source GreaterThanOrEqual(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) is greater than or equal to another (IPAddress Address, int Subnet). Declaration public static bool GreaterThanOrEqual(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The left-hand cidr. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The right-hand cidr. Returns Type Description System.Boolean True if the (IPAddress Address, int Subnet) is greater than or equal to the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Host(DbFunctions, IPAddress) Extracts the host (i.e. the IP address) as text. Declaration public static string Host(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet from which to extract the host. Returns Type Description System.String The host (i.e. the IP address) as text. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Host(DbFunctions, (IPAddress Address, Int32 Subnet)) Extracts the host (i.e. the IP address) as text. Declaration public static string Host(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr from which to extract the host. Returns Type Description System.String The host (i.e. the IP address) as text. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source HostMask(DbFunctions, IPAddress) Constructs the host mask for the network. Declaration public static IPAddress HostMask(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet used to construct the host mask. Returns Type Description System.Net.IPAddress The constructed host mask. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source HostMask(DbFunctions, (IPAddress Address, Int32 Subnet)) Constructs the host mask for the network. Declaration public static IPAddress HostMask(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr used to construct the host mask. Returns Type Description System.Net.IPAddress The constructed host mask. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source LessThan(DbFunctions, IPAddress, IPAddress) Determines whether an System.Net.IPAddress is less than another System.Net.IPAddress . Declaration public static bool LessThan(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The left-hand inet. System.Net.IPAddress other The right-hand inet. Returns Type Description System.Boolean True if the System.Net.IPAddress is less than the other System.Net.IPAddress ; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source LessThan(DbFunctions, PhysicalAddress, PhysicalAddress) Determines whether an System.Net.NetworkInformation.PhysicalAddress is less than another System.Net.NetworkInformation.PhysicalAddress . Declaration public static bool LessThan(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.NetworkInformation.PhysicalAddress macaddr The left-hand macaddr. System.Net.NetworkInformation.PhysicalAddress other The right-hand macaddr. Returns Type Description System.Boolean True if the System.Net.NetworkInformation.PhysicalAddress is less than the other System.Net.NetworkInformation.PhysicalAddress ; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source LessThan(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) is less than another (IPAddress Address, int Subnet). Declaration public static bool LessThan(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The left-hand cidr. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The right-hand cidr. Returns Type Description System.Boolean True if the (IPAddress Address, int Subnet) is less than the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source LessThanOrEqual(DbFunctions, IPAddress, IPAddress) Determines whether an System.Net.IPAddress is less than or equal to another System.Net.IPAddress . Declaration public static bool LessThanOrEqual(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The left-hand inet. System.Net.IPAddress other The right-hand inet. Returns Type Description System.Boolean True if the System.Net.IPAddress is less than or equal to the other System.Net.IPAddress ; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source LessThanOrEqual(DbFunctions, PhysicalAddress, PhysicalAddress) Determines whether an System.Net.NetworkInformation.PhysicalAddress is less than or equal to another System.Net.NetworkInformation.PhysicalAddress . Declaration public static bool LessThanOrEqual(this DbFunctions _, PhysicalAddress macaddr, PhysicalAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.NetworkInformation.PhysicalAddress macaddr The left-hand macaddr. System.Net.NetworkInformation.PhysicalAddress other The right-hand macaddr. Returns Type Description System.Boolean True if the System.Net.NetworkInformation.PhysicalAddress is less than or equal to the other System.Net.NetworkInformation.PhysicalAddress ; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source LessThanOrEqual(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Determines whether an (IPAddress Address, int Subnet) is less than or equal to another (IPAddress Address, int Subnet). Declaration public static bool LessThanOrEqual(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The left-hand cidr. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The right-hand cidr. Returns Type Description System.Boolean True if the (IPAddress Address, int Subnet) is less than or equal to the other (IPAddress Address, int Subnet); otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source MaskLength(DbFunctions, IPAddress) Extracts the length of the subnet mask. Declaration public static int MaskLength(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet used to extract the subnet length. Returns Type Description System.Int32 The length of the subnet mask. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source MaskLength(DbFunctions, (IPAddress Address, Int32 Subnet)) Extracts the length of the subnet mask. Declaration public static int MaskLength(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr used to extract the subnet length. Returns Type Description System.Int32 The length of the subnet mask. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Merge(DbFunctions, IPAddress, IPAddress) Constructs the smallest network which includes both of the given networks. Declaration public static (IPAddress Address, int Subnet) Merge(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The first inet. System.Net.IPAddress other The second inet. Returns Type Description System.ValueTuple < System.Net.IPAddress , System.Int32 > The smallest network which includes both of the given networks. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Merge(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Constructs the smallest network which includes both of the given networks. Declaration public static (IPAddress Address, int Subnet) Merge(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The first cidr. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The second cidr. Returns Type Description System.ValueTuple < System.Net.IPAddress , System.Int32 > The smallest network which includes both of the given networks. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Netmask(DbFunctions, IPAddress) Constructs the subnet mask for the network. Declaration public static IPAddress Netmask(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet used to construct the subnet mask. Returns Type Description System.Net.IPAddress The subnet mask for the network. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Netmask(DbFunctions, (IPAddress Address, Int32 Subnet)) Constructs the subnet mask for the network. Declaration public static IPAddress Netmask(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr used to construct the subnet mask. Returns Type Description System.Net.IPAddress The subnet mask for the network. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Network(DbFunctions, IPAddress) Extracts the network part of the address. Declaration public static (IPAddress Address, int Subnet) Network(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet used to extract the network. Returns Type Description System.ValueTuple < System.Net.IPAddress , System.Int32 > The network part of the address. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Network(DbFunctions, (IPAddress Address, Int32 Subnet)) Extracts the network part of the address. Declaration public static (IPAddress Address, int Subnet) Network(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr used to extract the network. Returns Type Description System.ValueTuple < System.Net.IPAddress , System.Int32 > The network part of the address. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source SameFamily(DbFunctions, IPAddress, IPAddress) Tests if the addresses are in the same family. Declaration public static bool SameFamily(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The primary inet. System.Net.IPAddress other The other inet. Returns Type Description System.Boolean True if the addresses are in the same family; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source SameFamily(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Tests if the addresses are in the same family. Declaration public static bool SameFamily(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The primary cidr. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The other cidr. Returns Type Description System.Boolean True if the addresses are in the same family; otherwise, false. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Set7BitMac8(DbFunctions, PhysicalAddress) Sets the 7th bit to one, also known as modified EUI-64, for inclusion in an IPv6 address. Declaration public static PhysicalAddress Set7BitMac8(this DbFunctions _, PhysicalAddress macAddress) Parameters Type Name Description DbFunctions _ The instance. System.Net.NetworkInformation.PhysicalAddress macAddress The MAC address to modify. Returns Type Description System.Net.NetworkInformation.PhysicalAddress The MAC address with the 7th bit set to one. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source SetMaskLength(DbFunctions, IPAddress, Int32) Sets the length of the subnet mask. Declaration public static IPAddress SetMaskLength(this DbFunctions _, IPAddress inet, int length) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet to modify. System.Int32 length The subnet mask length to set. Returns Type Description System.Net.IPAddress The network with a subnet mask of the specified length. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source SetMaskLength(DbFunctions, (IPAddress Address, Int32 Subnet), Int32) Sets the length of the subnet mask. Declaration public static (IPAddress Address, int Subnet) SetMaskLength(this DbFunctions _, (IPAddress Address, int Subnet) cidr, int length) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr to modify. System.Int32 length The subnet mask length to set. Returns Type Description System.ValueTuple < System.Net.IPAddress , System.Int32 > The network with a subnet mask of the specified length. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Subtract(DbFunctions, IPAddress, Int32) Subtracts the value from the System.Net.IPAddress . Declaration public static IPAddress Subtract(this DbFunctions _, IPAddress inet, int value) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet. System.Int32 value The value to subtract. Returns Type Description System.Net.IPAddress The System.Net.IPAddress augmented by the value . Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Subtract(DbFunctions, IPAddress, IPAddress) Subtracts one System.Net.IPAddress from another System.Net.IPAddress . Declaration public static int Subtract(this DbFunctions _, IPAddress inet, IPAddress other) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet from which to subtract. System.Net.IPAddress other The inet to subtract. Returns Type Description System.Int32 The numeric difference between the two given addresses. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Subtract(DbFunctions, (IPAddress Address, Int32 Subnet), Int32) Subtracts the value from the (IPAddress Address, int Subnet). Declaration public static (IPAddress Address, int Subnet) Subtract(this DbFunctions _, (IPAddress Address, int Subnet) cidr, int value) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The inet. System.Int32 value The value to subtract. Returns Type Description System.ValueTuple < System.Net.IPAddress , System.Int32 > The (IPAddress Address, int Subnet) augmented by the value . Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Subtract(DbFunctions, (IPAddress Address, Int32 Subnet), (IPAddress Address, Int32 Subnet)) Subtracts one (IPAddress Address, int Subnet) from another (IPAddress Address, int Subnet). Declaration public static int Subtract(this DbFunctions _, (IPAddress Address, int Subnet) cidr, (IPAddress Address, int Subnet) other) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr from which to subtract. System.ValueTuple < System.Net.IPAddress , System.Int32 > other The cidr to subtract. Returns Type Description System.Int32 The difference between the two addresses. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Text(DbFunctions, IPAddress) Extracts the IP address and subnet mask as text. Declaration public static string Text(this DbFunctions _, IPAddress inet) Parameters Type Name Description DbFunctions _ The instance. System.Net.IPAddress inet The inet to extract as text. Returns Type Description System.String The IP address and subnet mask as text. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Text(DbFunctions, (IPAddress Address, Int32 Subnet)) Extracts the IP address and subnet mask as text. Declaration public static string Text(this DbFunctions _, (IPAddress Address, int Subnet) cidr) Parameters Type Name Description DbFunctions _ The instance. System.ValueTuple < System.Net.IPAddress , System.Int32 > cidr The cidr to extract as text. Returns Type Description System.String The IP address and subnet mask as text. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query. | Improve this Doc View Source Truncate(DbFunctions, PhysicalAddress) Sets the last 3 bytes of the MAC address to zero. For macaddr8, the last 5 bytes are set to zero. Declaration public static PhysicalAddress Truncate(this DbFunctions _, PhysicalAddress macAddress) Parameters Type Name Description DbFunctions _ The instance. System.Net.NetworkInformation.PhysicalAddress macAddress The MAC address to truncate. Returns Type Description System.Net.NetworkInformation.PhysicalAddress The MAC address with the last 3 bytes set to zero. For macaddr8, the last 5 bytes are set to zero. Exceptions Type Condition System.NotSupportedException This method is only intended for use via SQL translation as part of an EF Core LINQ query."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlFullTextSearchDbFunctionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlFullTextSearchDbFunctionsExtensions.html",
    "title": "Class NpgsqlFullTextSearchDbFunctionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlFullTextSearchDbFunctionsExtensions Inheritance System.Object NpgsqlFullTextSearchDbFunctionsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlFullTextSearchDbFunctionsExtensions Methods | Improve this Doc View Source ArrayToTsVector(DbFunctions, String[]) Convert lexemes to a tsvector. Declaration public static NpgsqlTsVector ArrayToTsVector(this DbFunctions _, string[] lexemes) Parameters Type Name Description DbFunctions _ System.String [] lexemes Returns Type Description NpgsqlTsVector Remarks https://www.postgresql.org/docs/current/static/functions-textsearch.html | Improve this Doc View Source PhraseToTsQuery(DbFunctions, String) Produce tsquery that searches for a phrase from query ignoring punctuation. Declaration public static NpgsqlTsQuery PhraseToTsQuery(this DbFunctions _, string query) Parameters Type Name Description DbFunctions _ System.String query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Improve this Doc View Source PhraseToTsQuery(DbFunctions, String, String) Produce tsquery that searches for a phrase from query ignoring punctuation and using the text search configuration specified by config . Declaration public static NpgsqlTsQuery PhraseToTsQuery(this DbFunctions _, string config, string query) Parameters Type Name Description DbFunctions _ System.String config System.String query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Improve this Doc View Source PlainToTsQuery(DbFunctions, String) Produce tsquery from query ignoring punctuation. Declaration public static NpgsqlTsQuery PlainToTsQuery(this DbFunctions _, string query) Parameters Type Name Description DbFunctions _ System.String query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Improve this Doc View Source PlainToTsQuery(DbFunctions, String, String) Produce tsquery from query ignoring punctuation and using the text search configuration specified by config . Declaration public static NpgsqlTsQuery PlainToTsQuery(this DbFunctions _, string config, string query) Parameters Type Name Description DbFunctions _ System.String config System.String query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Improve this Doc View Source ToTsQuery(DbFunctions, String) Normalize words in query and convert to tsquery. If your input contains punctuation that should not be treated as text search operators, use PlainToTsQuery(DbFunctions, String) instead. Declaration public static NpgsqlTsQuery ToTsQuery(this DbFunctions _, string query) Parameters Type Name Description DbFunctions _ System.String query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Improve this Doc View Source ToTsQuery(DbFunctions, String, String) Normalize words in query and convert to tsquery using the text search configuration specified by config . If your input contains punctuation that should not be treated as text search operators, use PlainToTsQuery(DbFunctions, String, String) instead. Declaration public static NpgsqlTsQuery ToTsQuery(this DbFunctions _, string config, string query) Parameters Type Name Description DbFunctions _ System.String config System.String query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Improve this Doc View Source ToTsVector(DbFunctions, String) Reduce document to tsvector. Declaration public static NpgsqlTsVector ToTsVector(this DbFunctions _, string document) Parameters Type Name Description DbFunctions _ System.String document Returns Type Description NpgsqlTsVector Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-DOCUMENTS | Improve this Doc View Source ToTsVector(DbFunctions, String, String) Reduce document to tsvector using the text search configuration specified by config . Declaration public static NpgsqlTsVector ToTsVector(this DbFunctions _, string config, string document) Parameters Type Name Description DbFunctions _ System.String config System.String document Returns Type Description NpgsqlTsVector Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-DOCUMENTS | Improve this Doc View Source WebSearchToTsQuery(DbFunctions, String) Convert query tsquery using the simplified websearch syntax. Declaration public static NpgsqlTsQuery WebSearchToTsQuery(this DbFunctions _, string query) Parameters Type Name Description DbFunctions _ System.String query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES | Improve this Doc View Source WebSearchToTsQuery(DbFunctions, String, String) Convert query tsquery using the simplified websearch syntax and the text search configuration specified by config . Declaration public static NpgsqlTsQuery WebSearchToTsQuery(this DbFunctions _, string config, string query) Parameters Type Name Description DbFunctions _ System.String config System.String query Returns Type Description NpgsqlTsQuery Remarks http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.NpgsqlAnnotationNames.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.NpgsqlAnnotationNames.html",
    "title": "Class NpgsqlAnnotationNames | Npgsql Documentation",
    "keywords": "Class NpgsqlAnnotationNames Inheritance System.Object NpgsqlAnnotationNames Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlAnnotationNames Fields | Improve this Doc View Source Comment Declaration [Obsolete(\"Replaced by built-in EF Core support, use HasComment on entities or properties.\")] public const string Comment = \"Npgsql:Comment\" Field Value Type Description System.String | Improve this Doc View Source CreatedConcurrently Declaration public const string CreatedConcurrently = \"Npgsql:CreatedConcurrently\" Field Value Type Description System.String | Improve this Doc View Source DatabaseTemplate Declaration public const string DatabaseTemplate = \"Npgsql:DatabaseTemplate\" Field Value Type Description System.String | Improve this Doc View Source ElementDataType If this column's data type is an array, contains the data type of its elements. Otherwise null. Declaration public const string ElementDataType = \"Npgsql:ElementDataType\" Field Value Type Description System.String | Improve this Doc View Source EnumPrefix Declaration public const string EnumPrefix = \"Npgsql:Enum:\" Field Value Type Description System.String | Improve this Doc View Source HiLoSequenceName Declaration public const string HiLoSequenceName = \"Npgsql:HiLoSequenceName\" Field Value Type Description System.String | Improve this Doc View Source HiLoSequenceSchema Declaration public const string HiLoSequenceSchema = \"Npgsql:HiLoSequenceSchema\" Field Value Type Description System.String | Improve this Doc View Source IdentityOptions Declaration public const string IdentityOptions = \"Npgsql:IdentitySequenceOptions\" Field Value Type Description System.String | Improve this Doc View Source IndexCollation Declaration public const string IndexCollation = \"Npgsql:IndexCollation\" Field Value Type Description System.String | Improve this Doc View Source IndexExpression If the index contains an expression (rather than simple column references), the expression is contained here. This is currently unsupported and will be ignored. Declaration public const string IndexExpression = \"Npgsql:IndexExpression\" Field Value Type Description System.String | Improve this Doc View Source IndexInclude Declaration public const string IndexInclude = \"Npgsql:IndexInclude\" Field Value Type Description System.String | Improve this Doc View Source IndexMethod Declaration public const string IndexMethod = \"Npgsql:IndexMethod\" Field Value Type Description System.String | Improve this Doc View Source IndexNullSortOrder Declaration public const string IndexNullSortOrder = \"Npgsql:IndexNullSortOrder\" Field Value Type Description System.String | Improve this Doc View Source IndexOperators Declaration public const string IndexOperators = \"Npgsql:IndexOperators\" Field Value Type Description System.String | Improve this Doc View Source IndexSortOrder Declaration public const string IndexSortOrder = \"Npgsql:IndexSortOrder\" Field Value Type Description System.String | Improve this Doc View Source PostgresExtensionPrefix Declaration public const string PostgresExtensionPrefix = \"Npgsql:PostgresExtension:\" Field Value Type Description System.String | Improve this Doc View Source PostgresTypeType Identifies the type of the PostgreSQL type of this column (e.g. array, range, base). Declaration public const string PostgresTypeType = \"Npgsql:PostgresTypeType\" Field Value Type Description System.String | Improve this Doc View Source Prefix Declaration public const string Prefix = \"Npgsql:\" Field Value Type Description System.String | Improve this Doc View Source RangePrefix Declaration public const string RangePrefix = \"Npgsql:Range:\" Field Value Type Description System.String | Improve this Doc View Source StorageParameterPrefix Declaration public const string StorageParameterPrefix = \"Npgsql:StorageParameter:\" Field Value Type Description System.String | Improve this Doc View Source Tablespace Declaration public const string Tablespace = \"Npgsql:Tablespace\" Field Value Type Description System.String | Improve this Doc View Source UnloggedTable Declaration public const string UnloggedTable = \"Npgsql:UnloggedTable\" Field Value Type Description System.String | Improve this Doc View Source ValueGeneratedOnAdd Declaration [Obsolete(\"Replaced by ValueGenerationStrategy.SerialColumn\")] public const string ValueGeneratedOnAdd = \"Npgsql:ValueGeneratedOnAdd\" Field Value Type Description System.String | Improve this Doc View Source ValueGenerationStrategy Declaration public const string ValueGenerationStrategy = \"Npgsql:ValueGenerationStrategy\" Field Value Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlTypeMappingSource.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlTypeMappingSource.html",
    "title": "Class NpgsqlTypeMappingSource | Npgsql Documentation",
    "keywords": "Class NpgsqlTypeMappingSource Inheritance System.Object NpgsqlTypeMappingSource Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTypeMappingSource : RelationalTypeMappingSource Constructors | Improve this Doc View Source NpgsqlTypeMappingSource(TypeMappingSourceDependencies, RelationalTypeMappingSourceDependencies, ISqlGenerationHelper, INpgsqlOptions) Declaration public NpgsqlTypeMappingSource(TypeMappingSourceDependencies dependencies, RelationalTypeMappingSourceDependencies relationalDependencies, ISqlGenerationHelper sqlGenerationHelper, INpgsqlOptions npgsqlOptions = null) Parameters Type Name Description TypeMappingSourceDependencies dependencies RelationalTypeMappingSourceDependencies relationalDependencies ISqlGenerationHelper sqlGenerationHelper INpgsqlOptions npgsqlOptions Fields | Improve this Doc View Source EStringTypeMapping Declaration public readonly StringTypeMapping EStringTypeMapping Field Value Type Description StringTypeMapping Properties | Improve this Doc View Source ClrTypeMappings Declaration public ConcurrentDictionary<Type, RelationalTypeMapping> ClrTypeMappings { get; } Property Value Type Description System.Collections.Concurrent.ConcurrentDictionary < System.Type , RelationalTypeMapping > | Improve this Doc View Source StoreTypeMappings Declaration public ConcurrentDictionary<string, RelationalTypeMapping[]> StoreTypeMappings { get; } Property Value Type Description System.Collections.Concurrent.ConcurrentDictionary < System.String , RelationalTypeMapping []> Methods | Improve this Doc View Source FindArrayMapping(RelationalTypeMappingInfo) Declaration protected virtual RelationalTypeMapping FindArrayMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description RelationalTypeMapping | Improve this Doc View Source FindExistingMapping(RelationalTypeMappingInfo) Declaration protected virtual RelationalTypeMapping FindExistingMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description RelationalTypeMapping | Improve this Doc View Source FindMapping(RelationalTypeMappingInfo) Declaration protected override RelationalTypeMapping FindMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description RelationalTypeMapping | Improve this Doc View Source FindUserRangeMapping(RelationalTypeMappingInfo) Declaration protected virtual RelationalTypeMapping FindUserRangeMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description RelationalTypeMapping | Improve this Doc View Source LoadUserDefinedTypeMappings(ISqlGenerationHelper) To be used in case user-defined mappings are added late, after this TypeMappingSource has already been initialized. This is basically only for test usage. Declaration public void LoadUserDefinedTypeMappings(ISqlGenerationHelper sqlGenerationHelper) Parameters Type Name Description ISqlGenerationHelper sqlGenerationHelper"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlNodaTimeOptionsExtension.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.NpgsqlNodaTimeOptionsExtension.html",
    "title": "Class NpgsqlNodaTimeOptionsExtension | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeOptionsExtension Inheritance System.Object NpgsqlNodaTimeOptionsExtension Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeOptionsExtension : IDbContextOptionsExtension Properties | Improve this Doc View Source Info Declaration public virtual DbContextOptionsExtensionInfo Info { get; } Property Value Type Description DbContextOptionsExtensionInfo Methods | Improve this Doc View Source ApplyServices(IServiceCollection) Declaration public virtual void ApplyServices(IServiceCollection services) Parameters Type Name Description IServiceCollection services | Improve this Doc View Source Validate(IDbContextOptions) Declaration public virtual void Validate(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlEntityTypeBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlEntityTypeBuilderExtensions.html",
    "title": "Class NpgsqlEntityTypeBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlEntityTypeBuilderExtensions Inheritance System.Object NpgsqlEntityTypeBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlEntityTypeBuilderExtensions Methods | Improve this Doc View Source CanSetIsUnlogged(IConventionEntityTypeBuilder, Boolean, Boolean) Returns a value indicating whether the mapped table can be configured to use an unlogged table when targeting Npgsql. Declaration public static bool CanSetIsUnlogged(this IConventionEntityTypeBuilder entityTypeBuilder, bool isUnlogged = true, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. System.Boolean isUnlogged True to configure the entity to use an unlogged table; otherwise, false. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description System.Boolean The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-UNLOGGED | Improve this Doc View Source CanSetStorageParameter(IConventionEntityTypeBuilder, String, Object, Boolean) Returns a value indicating whether the PostgreSQL storage parameter on the table created for this entity. Declaration public static bool CanSetStorageParameter(this IConventionEntityTypeBuilder entityTypeBuilder, string parameterName, object parameterValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. System.String parameterName The name of the storage parameter. System.Object parameterValue The value of the storage parameter. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description System.Boolean true if the mapped table can be configured as with the storage parameter. Remarks See https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS | Improve this Doc View Source ForCockroachDbInterleaveInParent(EntityTypeBuilder, Type, List<String>) Declaration [Obsolete(\"Use UseCockroachDbInterleaveInParent\")] public static EntityTypeBuilder ForCockroachDbInterleaveInParent(this EntityTypeBuilder entityTypeBuilder, Type parentTableType, List<string> interleavePrefix) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder System.Type parentTableType System.Collections.Generic.List < System.String > interleavePrefix Returns Type Description EntityTypeBuilder | Improve this Doc View Source ForCockroachDbInterleaveInParent<TEntity>(EntityTypeBuilder<TEntity>, Type, List<String>) Declaration [Obsolete(\"Use UseCockroachDbInterleaveInParent\")] public static EntityTypeBuilder<TEntity> ForCockroachDbInterleaveInParent<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, Type parentTableType, List<string> interleavePrefix) where TEntity : class Parameters Type Name Description EntityTypeBuilder <TEntity> entityTypeBuilder System.Type parentTableType System.Collections.Generic.List < System.String > interleavePrefix Returns Type Description EntityTypeBuilder <TEntity> Type Parameters Name Description TEntity | Improve this Doc View Source ForNpgsqlHasComment(EntityTypeBuilder, String) Configures a comment to be applied on the table. Declaration [Obsolete(\"Use HasComment\")] public static EntityTypeBuilder ForNpgsqlHasComment(this EntityTypeBuilder entityTypeBuilder, string comment) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. System.String comment The comment for the table. Returns Type Description EntityTypeBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source ForNpgsqlHasComment<TEntity>(EntityTypeBuilder<TEntity>, String) Configures a comment to be applied on the table. Declaration [Obsolete(\"Use HasComment\")] public static EntityTypeBuilder<TEntity> ForNpgsqlHasComment<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, string comment) where TEntity : class Parameters Type Name Description EntityTypeBuilder <TEntity> entityTypeBuilder The builder for the entity type being configured. System.String comment The comment for the table. Returns Type Description EntityTypeBuilder <TEntity> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TEntity The entity type being configured. | Improve this Doc View Source ForNpgsqlIsUnlogged(EntityTypeBuilder, Boolean) Configures the entity to use an unlogged table when targeting Npgsql. Declaration [Obsolete(\"Use IsUnlogged\")] public static EntityTypeBuilder ForNpgsqlIsUnlogged(this EntityTypeBuilder entityTypeBuilder, bool isUnlogged = true) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. System.Boolean isUnlogged True to configure the entity to use an unlogged table; otherwise, false. Returns Type Description EntityTypeBuilder The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-UNLOGGED | Improve this Doc View Source ForNpgsqlIsUnlogged<TEntity>(EntityTypeBuilder<TEntity>, Boolean) Configures the mapped table to use an unlogged table when targeting Npgsql. Declaration [Obsolete(\"Use IsUnlogged\")] public static EntityTypeBuilder<TEntity> ForNpgsqlIsUnlogged<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, bool isUnlogged = true) where TEntity : class Parameters Type Name Description EntityTypeBuilder <TEntity> entityTypeBuilder The builder for the entity type being configured. System.Boolean isUnlogged True to configure the entity to use an unlogged table; otherwise, false. Returns Type Description EntityTypeBuilder <TEntity> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TEntity Remarks See: https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-UNLOGGED | Improve this Doc View Source ForNpgsqlSetStorageParameter(EntityTypeBuilder, String, Object) Sets a PostgreSQL storage parameter on the table created for this entity. Declaration [Obsolete(\"Use SetStorageParameter\")] public static EntityTypeBuilder ForNpgsqlSetStorageParameter(this EntityTypeBuilder entityTypeBuilder, string parameterName, object parameterValue) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. System.String parameterName The name of the storage parameter. System.Object parameterValue The value of the storage parameter. Returns Type Description EntityTypeBuilder The same builder instance so that multiple calls can be chained. Remarks See https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS | Improve this Doc View Source ForNpgsqlSetStorageParameter<TEntity>(EntityTypeBuilder<TEntity>, String, Object) Sets a PostgreSQL storage parameter on the table created for this entity. Declaration [Obsolete(\"Use SetStorageParameter\")] public static EntityTypeBuilder<TEntity> ForNpgsqlSetStorageParameter<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, string parameterName, object parameterValue) where TEntity : class Parameters Type Name Description EntityTypeBuilder <TEntity> entityTypeBuilder The builder for the entity type being configured. System.String parameterName The name of the storage parameter. System.Object parameterValue The value of the storage parameter. Returns Type Description EntityTypeBuilder <TEntity> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TEntity Remarks See https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS | Improve this Doc View Source ForNpgsqlUseXminAsConcurrencyToken(EntityTypeBuilder) Configures using the auto-updating system column xmin as the optimistic concurrency token. Declaration [Obsolete(\"Use UseXminAsConcurrencyToken\")] public static EntityTypeBuilder ForNpgsqlUseXminAsConcurrencyToken(this EntityTypeBuilder entityTypeBuilder) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. Returns Type Description EntityTypeBuilder The same builder instance so that multiple calls can be chained. Remarks See http://www.npgsql.org/efcore/miscellaneous.html#optimistic-concurrency-and-concurrency-tokens | Improve this Doc View Source ForNpgsqlUseXminAsConcurrencyToken<TEntity>(EntityTypeBuilder<TEntity>) Configures using the auto-updating system column xmin as the optimistic concurrency token. Declaration [Obsolete(\"Use UseXminAsConcurrencyToken\")] public static EntityTypeBuilder<TEntity> ForNpgsqlUseXminAsConcurrencyToken<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder) where TEntity : class Parameters Type Name Description EntityTypeBuilder <TEntity> entityTypeBuilder The builder for the entity type being configured. Returns Type Description EntityTypeBuilder <TEntity> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TEntity Remarks See http://www.npgsql.org/efcore/miscellaneous.html#optimistic-concurrency-and-concurrency-tokens | Improve this Doc View Source IsUnlogged(EntityTypeBuilder, Boolean) Configures the entity to use an unlogged table when targeting Npgsql. Declaration public static EntityTypeBuilder IsUnlogged(this EntityTypeBuilder entityTypeBuilder, bool isUnlogged = true) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. System.Boolean isUnlogged True to configure the entity to use an unlogged table; otherwise, false. Returns Type Description EntityTypeBuilder The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-UNLOGGED | Improve this Doc View Source IsUnlogged(IConventionEntityTypeBuilder, Boolean, Boolean) Configures the mapped table to use an unlogged table when targeting Npgsql. Declaration public static IConventionEntityTypeBuilder IsUnlogged(this IConventionEntityTypeBuilder entityTypeBuilder, bool isUnlogged = true, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. System.Boolean isUnlogged True to configure the entity to use an unlogged table; otherwise, false. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionEntityTypeBuilder The same builder instance so that multiple calls can be chained. Remarks See: https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-UNLOGGED | Improve this Doc View Source IsUnlogged<TEntity>(EntityTypeBuilder<TEntity>, Boolean) Configures the mapped table to use an unlogged table when targeting Npgsql. Declaration public static EntityTypeBuilder<TEntity> IsUnlogged<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, bool isUnlogged = true) where TEntity : class Parameters Type Name Description EntityTypeBuilder <TEntity> entityTypeBuilder The builder for the entity type being configured. System.Boolean isUnlogged True to configure the entity to use an unlogged table; otherwise, false. Returns Type Description EntityTypeBuilder <TEntity> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TEntity Remarks See: https://www.postgresql.org/docs/current/sql-createtable.html#SQL-CREATETABLE-UNLOGGED | Improve this Doc View Source SetStorageParameter(EntityTypeBuilder, String, Object) Sets a PostgreSQL storage parameter on the table created for this entity. Declaration public static EntityTypeBuilder SetStorageParameter(this EntityTypeBuilder entityTypeBuilder, string parameterName, object parameterValue) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. System.String parameterName The name of the storage parameter. System.Object parameterValue The value of the storage parameter. Returns Type Description EntityTypeBuilder The same builder instance so that multiple calls can be chained. Remarks See https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS | Improve this Doc View Source SetStorageParameter(IConventionEntityTypeBuilder, String, Object, Boolean) Sets a PostgreSQL storage parameter on the table created for this entity. Declaration public static IConventionEntityTypeBuilder SetStorageParameter(this IConventionEntityTypeBuilder entityTypeBuilder, string parameterName, object parameterValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. System.String parameterName The name of the storage parameter. System.Object parameterValue The value of the storage parameter. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionEntityTypeBuilder The same builder instance so that multiple calls can be chained. Remarks See https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS | Improve this Doc View Source SetStorageParameter<TEntity>(EntityTypeBuilder<TEntity>, String, Object) Sets a PostgreSQL storage parameter on the table created for this entity. Declaration public static EntityTypeBuilder<TEntity> SetStorageParameter<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, string parameterName, object parameterValue) where TEntity : class Parameters Type Name Description EntityTypeBuilder <TEntity> entityTypeBuilder The builder for the entity type being configured. System.String parameterName The name of the storage parameter. System.Object parameterValue The value of the storage parameter. Returns Type Description EntityTypeBuilder <TEntity> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TEntity Remarks See https://www.postgresql.org/docs/current/static/sql-createtable.html#SQL-CREATETABLE-STORAGE-PARAMETERS | Improve this Doc View Source UseCockroachDbInterleaveInParent(EntityTypeBuilder, Type, List<String>) Declaration public static EntityTypeBuilder UseCockroachDbInterleaveInParent(this EntityTypeBuilder entityTypeBuilder, Type parentTableType, List<string> interleavePrefix) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder System.Type parentTableType System.Collections.Generic.List < System.String > interleavePrefix Returns Type Description EntityTypeBuilder | Improve this Doc View Source UseCockroachDbInterleaveInParent<TEntity>(EntityTypeBuilder<TEntity>, Type, List<String>) Declaration public static EntityTypeBuilder<TEntity> UseCockroachDbInterleaveInParent<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder, Type parentTableType, List<string> interleavePrefix) where TEntity : class Parameters Type Name Description EntityTypeBuilder <TEntity> entityTypeBuilder System.Type parentTableType System.Collections.Generic.List < System.String > interleavePrefix Returns Type Description EntityTypeBuilder <TEntity> Type Parameters Name Description TEntity | Improve this Doc View Source UseXminAsConcurrencyToken(EntityTypeBuilder) Configures using the auto-updating system column xmin as the optimistic concurrency token. Declaration public static EntityTypeBuilder UseXminAsConcurrencyToken(this EntityTypeBuilder entityTypeBuilder) Parameters Type Name Description EntityTypeBuilder entityTypeBuilder The builder for the entity type being configured. Returns Type Description EntityTypeBuilder The same builder instance so that multiple calls can be chained. Remarks See http://www.npgsql.org/efcore/miscellaneous.html#optimistic-concurrency-and-concurrency-tokens | Improve this Doc View Source UseXminAsConcurrencyToken<TEntity>(EntityTypeBuilder<TEntity>) Configures using the auto-updating system column xmin as the optimistic concurrency token. Declaration public static EntityTypeBuilder<TEntity> UseXminAsConcurrencyToken<TEntity>(this EntityTypeBuilder<TEntity> entityTypeBuilder) where TEntity : class Parameters Type Name Description EntityTypeBuilder <TEntity> entityTypeBuilder The builder for the entity type being configured. Returns Type Description EntityTypeBuilder <TEntity> The same builder instance so that multiple calls can be chained. Type Parameters Name Description TEntity Remarks See http://www.npgsql.org/efcore/miscellaneous.html#optimistic-concurrency-and-concurrency-tokens"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlCompiledQueryCacheKeyGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlCompiledQueryCacheKeyGenerator.html",
    "title": "Class NpgsqlCompiledQueryCacheKeyGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlCompiledQueryCacheKeyGenerator Inheritance System.Object NpgsqlCompiledQueryCacheKeyGenerator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCompiledQueryCacheKeyGenerator : RelationalCompiledQueryCacheKeyGenerator Constructors | Improve this Doc View Source NpgsqlCompiledQueryCacheKeyGenerator(CompiledQueryCacheKeyGeneratorDependencies, RelationalCompiledQueryCacheKeyGeneratorDependencies) Declaration public NpgsqlCompiledQueryCacheKeyGenerator(CompiledQueryCacheKeyGeneratorDependencies dependencies, RelationalCompiledQueryCacheKeyGeneratorDependencies relationalDependencies) Parameters Type Name Description CompiledQueryCacheKeyGeneratorDependencies dependencies RelationalCompiledQueryCacheKeyGeneratorDependencies relationalDependencies Methods | Improve this Doc View Source GenerateCacheKey(Expression, Boolean) Declaration public override object GenerateCacheKey(Expression query, bool async) Parameters Type Name Description System.Linq.Expressions.Expression query System.Boolean async Returns Type Description System.Object"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.NpgsqlNodaTimeMethodCallTranslatorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.NpgsqlNodaTimeMethodCallTranslatorPlugin.html",
    "title": "Class NpgsqlNodaTimeMethodCallTranslatorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeMethodCallTranslatorPlugin Provides translation services for Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime members. Inheritance System.Object NpgsqlNodaTimeMethodCallTranslatorPlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeMethodCallTranslatorPlugin : IMethodCallTranslatorPlugin Remarks See: https://www.postgresql.org/docs/current/static/functions-datetime.html Constructors | Improve this Doc View Source NpgsqlNodaTimeMethodCallTranslatorPlugin(ISqlExpressionFactory) Declaration public NpgsqlNodaTimeMethodCallTranslatorPlugin(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Properties | Improve this Doc View Source Translators Declaration public virtual IEnumerable<IMethodCallTranslator> Translators { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IMethodCallTranslator >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonPocoTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonPocoTranslator.html",
    "title": "Class NpgsqlJsonPocoTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonPocoTranslator Inheritance System.Object NpgsqlJsonPocoTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlJsonPocoTranslator : IMemberTranslator Constructors | Improve this Doc View Source NpgsqlJsonPocoTranslator(NpgsqlSqlExpressionFactory) Declaration public NpgsqlJsonPocoTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(SqlExpression, MemberInfo, Type) Declaration public SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType) Parameters Type Name Description SqlExpression instance System.Reflection.MemberInfo member System.Type returnType Returns Type Description SqlExpression | Improve this Doc View Source TranslateArrayLength(SqlExpression) Declaration public SqlExpression TranslateArrayLength(SqlExpression expression) Parameters Type Name Description SqlExpression expression Returns Type Description SqlExpression | Improve this Doc View Source TranslateMemberAccess(SqlExpression, SqlExpression, Type) Declaration public SqlExpression TranslateMemberAccess(SqlExpression instance, SqlExpression member, Type returnType) Parameters Type Name Description SqlExpression instance SqlExpression member System.Type returnType Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.NpgsqlModelValidator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.NpgsqlModelValidator.html",
    "title": "Class NpgsqlModelValidator | Npgsql Documentation",
    "keywords": "Class NpgsqlModelValidator The validator that enforces rules for Npgsql. Inheritance System.Object NpgsqlModelValidator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlModelValidator : RelationalModelValidator Constructors | Improve this Doc View Source NpgsqlModelValidator(ModelValidatorDependencies, RelationalModelValidatorDependencies, INpgsqlOptions) Declaration public NpgsqlModelValidator(ModelValidatorDependencies dependencies, RelationalModelValidatorDependencies relationalDependencies, INpgsqlOptions npgsqlOptions) Parameters Type Name Description ModelValidatorDependencies dependencies RelationalModelValidatorDependencies relationalDependencies INpgsqlOptions npgsqlOptions Methods | Improve this Doc View Source Validate(IModel, IDiagnosticsLogger<DbLoggerCategory.Model.Validation>) Declaration public override void Validate(IModel model, IDiagnosticsLogger<DbLoggerCategory.Model.Validation> logger) Parameters Type Name Description IModel model IDiagnosticsLogger < DbLoggerCategory.Model.Validation > logger | Improve this Doc View Source ValidateIdentityVersionCompatibility(IModel) Validates that identity columns are used only with PostgreSQL 10.0 or later. Declaration protected virtual void ValidateIdentityVersionCompatibility(IModel model) Parameters Type Name Description IModel model The model to validate. | Improve this Doc View Source ValidateIndexIncludeProperties(IModel) Declaration protected virtual void ValidateIndexIncludeProperties(IModel model) Parameters Type Name Description IModel model"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.Diagnostics.NpgsqlEventId.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.Diagnostics.NpgsqlEventId.html",
    "title": "Class NpgsqlEventId | Npgsql Documentation",
    "keywords": "Class NpgsqlEventId Event IDs for PostgreSQL/Npgsql events that correspond to messages logged to an and events sent to a . These IDs are also used with to configure the behavior of warnings. Inheritance System.Object NpgsqlEventId Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore.Diagnostics Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlEventId Fields | Improve this Doc View Source ColumnFound A column was found. This event is in the category. Declaration public static readonly EventId ColumnFound Field Value Type Description EventId | Improve this Doc View Source EnumColumnSkippedWarning Enum column cannot be scaffolded, define a CLR enum type and add the property manually. This event is in the category. Declaration public static readonly EventId EnumColumnSkippedWarning Field Value Type Description EventId | Improve this Doc View Source ExpressionIndexSkippedWarning Expression index cannot be scaffolded, expression indices aren't supported and must be added via raw SQL in migrations. This event is in the category. Declaration public static readonly EventId ExpressionIndexSkippedWarning Field Value Type Description EventId | Improve this Doc View Source ForeignKeyFound A foreign key was found. This event is in the category. Declaration public static readonly EventId ForeignKeyFound Field Value Type Description EventId | Improve this Doc View Source ForeignKeyPrincipalColumnMissingWarning A principal column referenced by a foreign key was not found. This event is in the category. Declaration public static readonly EventId ForeignKeyPrincipalColumnMissingWarning Field Value Type Description EventId | Improve this Doc View Source ForeignKeyReferencesMissingPrincipalTableWarning A foreign key references a missing table at the principal end. This event is in the category. Declaration public static readonly EventId ForeignKeyReferencesMissingPrincipalTableWarning Field Value Type Description EventId | Improve this Doc View Source IndexFound An index was found. This event is in the category. Declaration public static readonly EventId IndexFound Field Value Type Description EventId | Improve this Doc View Source MissingSchemaWarning The database is missing a schema. This event is in the category. Declaration public static readonly EventId MissingSchemaWarning Field Value Type Description EventId | Improve this Doc View Source MissingTableWarning The database is missing a table. This event is in the category. Declaration public static readonly EventId MissingTableWarning Field Value Type Description EventId | Improve this Doc View Source PrimaryKeyFound A primary key was found. This event is in the category. Declaration public static readonly EventId PrimaryKeyFound Field Value Type Description EventId | Improve this Doc View Source SequenceFound A sequence was found. This event is in the category. Declaration public static readonly EventId SequenceFound Field Value Type Description EventId | Improve this Doc View Source TableFound A table was found. This event is in the category. Declaration public static readonly EventId TableFound Field Value Type Description EventId | Improve this Doc View Source UniqueConstraintFound A unique constraint was found. This event is in the category. Declaration public static readonly EventId UniqueConstraintFound Field Value Type Description EventId | Improve this Doc View Source UnsupportedColumnConstraintSkippedWarning Constraint '{name}' on table {tableName} cannot be scaffolded because it includes a column that cannot be scaffolded (e.g. enum). This event is in the category. Declaration public static readonly EventId UnsupportedColumnConstraintSkippedWarning Field Value Type Description EventId | Improve this Doc View Source UnsupportedColumnIndexSkippedWarning Index '{name}' on table {tableName} cannot be scaffolded because it includes a column that cannot be scaffolded (e.g. enum). This event is in the category. Declaration public static readonly EventId UnsupportedColumnIndexSkippedWarning Field Value Type Description EventId"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTypeMapping.html",
    "title": "Class NpgsqlTimestampTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTimestampTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlTimestampTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTimestampTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlTimestampTypeMapping() Declaration public NpgsqlTimestampTypeMapping() | Improve this Doc View Source NpgsqlTimestampTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlTimestampTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal Classes NpgsqlAnnotationCodeGenerator NpgsqlDesignTimeServices Enables configuring Npgsql-specific design-time services. Tools will automatically discover implementations of this interface that are in the startup assembly. NpgsqlNetTopologySuiteDesignTimeServices NpgsqlNodaTimeDesignTimeServices"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNetTopologySuiteDesignTimeServices.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlNetTopologySuiteDesignTimeServices.html",
    "title": "Class NpgsqlNetTopologySuiteDesignTimeServices | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteDesignTimeServices Inheritance System.Object NpgsqlNetTopologySuiteDesignTimeServices Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteDesignTimeServices : IDesignTimeServices Methods | Improve this Doc View Source ConfigureDesignTimeServices(IServiceCollection) Declaration public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlRelationalConnection.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlRelationalConnection.html",
    "title": "Class NpgsqlRelationalConnection | Npgsql Documentation",
    "keywords": "Class NpgsqlRelationalConnection Inheritance System.Object NpgsqlRelationalConnection Implements INpgsqlRelationalConnection IRelationalConnection Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRelationalConnection : RelationalConnection, INpgsqlRelationalConnection, IRelationalConnection Constructors | Improve this Doc View Source NpgsqlRelationalConnection(RelationalConnectionDependencies) Declaration public NpgsqlRelationalConnection(RelationalConnectionDependencies dependencies) Parameters Type Name Description RelationalConnectionDependencies dependencies Properties | Improve this Doc View Source SupportsAmbientTransactions Indicates whether the store connection supports ambient transactions Declaration protected override bool SupportsAmbientTransactions { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CreateDbConnection() Declaration protected override DbConnection CreateDbConnection() Returns Type Description System.Data.Common.DbConnection | Improve this Doc View Source CreateMasterConnection() Declaration public INpgsqlRelationalConnection CreateMasterConnection() Returns Type Description INpgsqlRelationalConnection Implements INpgsqlRelationalConnection IRelationalConnection"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal Classes NpgsqlNodaTimeCodeGeneratorPlugin"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlTranslatingExpressionVisitor.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.NpgsqlSqlTranslatingExpressionVisitor.html",
    "title": "Class NpgsqlSqlTranslatingExpressionVisitor | Npgsql Documentation",
    "keywords": "Class NpgsqlSqlTranslatingExpressionVisitor Inheritance System.Object NpgsqlSqlTranslatingExpressionVisitor Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSqlTranslatingExpressionVisitor : RelationalSqlTranslatingExpressionVisitor Constructors | Improve this Doc View Source NpgsqlSqlTranslatingExpressionVisitor(RelationalSqlTranslatingExpressionVisitorDependencies, IModel, QueryableMethodTranslatingExpressionVisitor) Declaration public NpgsqlSqlTranslatingExpressionVisitor(RelationalSqlTranslatingExpressionVisitorDependencies dependencies, IModel model, QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor) Parameters Type Name Description RelationalSqlTranslatingExpressionVisitorDependencies dependencies IModel model QueryableMethodTranslatingExpressionVisitor queryableMethodTranslatingExpressionVisitor Methods | Improve this Doc View Source TranslateCount(Expression) Declaration public override SqlExpression TranslateCount(Expression expression = null) Parameters Type Name Description System.Linq.Expressions.Expression expression Returns Type Description SqlExpression | Improve this Doc View Source TranslateSum(Expression) Declaration public override SqlExpression TranslateSum(Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression Returns Type Description SqlExpression | Improve this Doc View Source VisitBinary(BinaryExpression) Declaration protected override Expression VisitBinary(BinaryExpression binaryExpression) Parameters Type Name Description System.Linq.Expressions.BinaryExpression binaryExpression Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source VisitMethodCall(MethodCallExpression) Declaration protected override Expression VisitMethodCall(MethodCallExpression methodCall) Parameters Type Name Description System.Linq.Expressions.MethodCallExpression methodCall Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source VisitUnary(UnaryExpression) Declaration protected override Expression VisitUnary(UnaryExpression unaryExpression) Parameters Type Name Description System.Linq.Expressions.UnaryExpression unaryExpression Returns Type Description System.Linq.Expressions.Expression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTzTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimestampTzTypeMapping.html",
    "title": "Class NpgsqlTimestampTzTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTimestampTzTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlTimestampTzTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTimestampTzTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlTimestampTzTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlTimestampTzTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters | Improve this Doc View Source NpgsqlTimestampTzTypeMapping(Type) Declaration public NpgsqlTimestampTzTypeMapping(Type clrType) Parameters Type Name Description System.Type clrType Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteMethodCallTranslatorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlNetTopologySuiteMethodCallTranslatorPlugin.html",
    "title": "Class NpgsqlNetTopologySuiteMethodCallTranslatorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteMethodCallTranslatorPlugin Inheritance System.Object NpgsqlNetTopologySuiteMethodCallTranslatorPlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteMethodCallTranslatorPlugin : IMethodCallTranslatorPlugin Constructors | Improve this Doc View Source NpgsqlNetTopologySuiteMethodCallTranslatorPlugin(IRelationalTypeMappingSource, ISqlExpressionFactory) Declaration public NpgsqlNetTopologySuiteMethodCallTranslatorPlugin(IRelationalTypeMappingSource typeMappingSource, ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description IRelationalTypeMappingSource typeMappingSource ISqlExpressionFactory sqlExpressionFactory Properties | Improve this Doc View Source Translators Declaration public virtual IEnumerable<IMethodCallTranslator> Translators { get; } Property Value Type Description System.Collections.Generic.IEnumerable < IMethodCallTranslator >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlIntervalTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlIntervalTypeMapping.html",
    "title": "Class NpgsqlIntervalTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlIntervalTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlIntervalTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlIntervalTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlIntervalTypeMapping() Declaration public NpgsqlIntervalTypeMapping() | Improve this Doc View Source NpgsqlIntervalTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlIntervalTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.IntervalMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.IntervalMapping.html",
    "title": "Class IntervalMapping | Npgsql Documentation",
    "keywords": "Class IntervalMapping Inheritance System.Object NpgsqlTypeMapping IntervalMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class IntervalMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source IntervalMapping() Declaration public IntervalMapping() | Improve this Doc View Source IntervalMapping(RelationalTypeMappingParameters) Declaration protected IntervalMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description System.String storeType System.Nullable < System.Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(ValueConverter) Declaration public override CoreTypeMapping Clone(ValueConverter converter) Parameters Type Name Description ValueConverter converter Returns Type Description CoreTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.NpgsqlDropDatabaseOperation.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.NpgsqlDropDatabaseOperation.html",
    "title": "Class NpgsqlDropDatabaseOperation | Npgsql Documentation",
    "keywords": "Class NpgsqlDropDatabaseOperation Inheritance System.Object NpgsqlDropDatabaseOperation Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDropDatabaseOperation : MigrationOperation Properties | Improve this Doc View Source Name Declaration public virtual string Name { get; set; } Property Value Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlLoggerExtensions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlLoggerExtensions.html",
    "title": "Class NpgsqlLoggerExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlLoggerExtensions Inheritance System.Object NpgsqlLoggerExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlLoggerExtensions Methods | Improve this Doc View Source ColumnFound(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, String, String, String, Boolean, String) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public static void ColumnFound(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string tableName, string columnName, string dataTypeName, bool nullable, string defaultValue) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics System.String tableName System.String columnName System.String dataTypeName System.Boolean nullable System.String defaultValue | Improve this Doc View Source EnumColumnSkippedWarning(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, String) Declaration public static void EnumColumnSkippedWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string columnName) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics System.String columnName | Improve this Doc View Source ExpressionIndexSkippedWarning(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, String, String) Declaration public static void ExpressionIndexSkippedWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string indexName, string tableName) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics System.String indexName System.String tableName | Improve this Doc View Source ForeignKeyReferencesMissingPrincipalTableWarning(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, String, String, String) Declaration public static void ForeignKeyReferencesMissingPrincipalTableWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string foreignKeyName, string tableName, string principalTableName) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics System.String foreignKeyName System.String tableName System.String principalTableName | Improve this Doc View Source MissingSchemaWarning(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, String) Declaration public static void MissingSchemaWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string schemaName) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics System.String schemaName | Improve this Doc View Source MissingTableWarning(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, String) Declaration public static void MissingTableWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string tableName) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics System.String tableName | Improve this Doc View Source UniqueConstraintFound(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, String, String) Declaration public static void UniqueConstraintFound(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string uniqueConstraintName, string tableName) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics System.String uniqueConstraintName System.String tableName | Improve this Doc View Source UnsupportedColumnConstraintSkippedWarning(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, String, String) Declaration public static void UnsupportedColumnConstraintSkippedWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string indexName, string tableName) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics System.String indexName System.String tableName | Improve this Doc View Source UnsupportedColumnIndexSkippedWarning(IDiagnosticsLogger<DbLoggerCategory.Scaffolding>, String, String) Declaration public static void UnsupportedColumnIndexSkippedWarning(this IDiagnosticsLogger<DbLoggerCategory.Scaffolding> diagnostics, string indexName, string tableName) Parameters Type Name Description IDiagnosticsLogger < DbLoggerCategory.Scaffolding > diagnostics System.String indexName System.String tableName"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.ArrayComparisonType.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.ArrayComparisonType.html",
    "title": "Enum ArrayComparisonType | Npgsql Documentation",
    "keywords": "Enum ArrayComparisonType Represents whether an array comparison is ANY or ALL. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum ArrayComparisonType Fields Name Description All Represents an ALL array comparison. Any Represents an ANY array comparison."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Classes NpgsqlArrayTypeMapping Maps PostgreSQL arrays to .NET arrays. Only single-dimensional arrays are supported. NpgsqlBitTypeMapping The type mapping for the PostgreSQL bit string type. NpgsqlBoolTypeMapping NpgsqlBoxTypeMapping NpgsqlByteArrayTypeMapping NpgsqlCharacterTypeMapping The type mapping for the PostgreSQL 'character' data type. NpgsqlCidrTypeMapping The type mapping for the PostgreSQL cidr type. NpgsqlCircleTypeMapping NpgsqlDateTypeMapping NpgsqlEnumTypeMapping NpgsqlEStringTypeMapping Represents a so-called PostgreSQL E-string literal string, which allows C-style escape sequences. This is a \"virtual\" type mapping which is never returned by NpgsqlTypeMappingSource . It is only used internally by some method translators to produce literal strings. NpgsqlHstoreTypeMapping The type mapping for the PostgreSQL hstore type. NpgsqlInetTypeMapping The type mapping for the PostgreSQL inet type. NpgsqlIntervalTypeMapping NpgsqlJsonTypeMapping A mapping for an arbitrary user POCO to PostgreSQL jsonb or json. For mapping to .NET string, see NpgsqlStringTypeMapping . NpgsqlLineSegmentTypeMapping NpgsqlLineTypeMapping NpgsqlListTypeMapping Maps PostgreSQL arrays to System.Collections.Generic.List<T> . NpgsqlMacaddr8TypeMapping The type mapping for the PostgreSQL macaddr8 type. NpgsqlMacaddrTypeMapping The type mapping for the PostgreSQL macaddr type. NpgsqlPathTypeMapping NpgsqlPointTypeMapping NpgsqlPolygonTypeMapping NpgsqlRangeTypeMapping The type mapping for the PostgreSQL range types. NpgsqlRegconfigTypeMapping NpgsqlStringTypeMapping The base class for mapping Npgsql-specific string types. It configures parameters with the NpgsqlDbType provider-specific type enum. NpgsqlTidTypeMapping NpgsqlTimestampTypeMapping NpgsqlTimestampTzTypeMapping NpgsqlTimeTypeMapping NpgsqlTimeTzTypeMapping NpgsqlTsQueryTypeMapping NpgsqlTsRankingNormalizationTypeMapping NpgsqlTsVectorTypeMapping NpgsqlTypeMapping The base class for mapping Npgsql-specific types. It configures parameters with the NpgsqlDbType provider-specific type enum. NpgsqlUintTypeMapping NpgsqlVarbitTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Query.Internal Classes NpgsqlCompiledQueryCacheKeyGenerator NpgsqlEvaluatableExpressionFilter NpgsqlQuerySqlGenerator The default query SQL generator for Npgsql. NpgsqlQuerySqlGeneratorFactory The default factory for Npgsql-specific query SQL generators. NpgsqlSqlExpressionFactory NpgsqlSqlTranslatingExpressionVisitor NpgsqlSqlTranslatingExpressionVisitorFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.html",
    "title": "Class NpgsqlExecutionStrategy | Npgsql Documentation",
    "keywords": "Class NpgsqlExecutionStrategy Inheritance System.Object NpgsqlExecutionStrategy Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlExecutionStrategy : IExecutionStrategy Constructors | Improve this Doc View Source NpgsqlExecutionStrategy(ExecutionStrategyDependencies) Declaration public NpgsqlExecutionStrategy(ExecutionStrategyDependencies dependencies) Parameters Type Name Description ExecutionStrategyDependencies dependencies Properties | Improve this Doc View Source RetriesOnFailure Declaration public virtual bool RetriesOnFailure { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Execute<TState, TResult>(TState, Func<DbContext, TState, TResult>, Func<DbContext, TState, ExecutionResult<TResult>>) Declaration public virtual TResult Execute<TState, TResult>(TState state, Func<DbContext, TState, TResult> operation, Func<DbContext, TState, ExecutionResult<TResult>> verifySucceeded) Parameters Type Name Description TState state System.Func < DbContext , TState, TResult> operation System.Func < DbContext , TState, ExecutionResult <TResult>> verifySucceeded Returns Type Description TResult Type Parameters Name Description TState TResult | Improve this Doc View Source ExecuteAsync<TState, TResult>(TState, Func<DbContext, TState, CancellationToken, Task<TResult>>, Func<DbContext, TState, CancellationToken, Task<ExecutionResult<TResult>>>, CancellationToken) Declaration public virtual Task<TResult> ExecuteAsync<TState, TResult>(TState state, Func<DbContext, TState, CancellationToken, Task<TResult>> operation, Func<DbContext, TState, CancellationToken, Task<ExecutionResult<TResult>>> verifySucceeded, CancellationToken cancellationToken) Parameters Type Name Description TState state System.Func < DbContext , TState, System.Threading.CancellationToken , System.Threading.Tasks.Task <TResult>> operation System.Func < DbContext , TState, System.Threading.CancellationToken , System.Threading.Tasks.Task < ExecutionResult <TResult>>> verifySucceeded System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task <TResult> Type Parameters Name Description TState TResult"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlConvertTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlConvertTranslator.html",
    "title": "Class NpgsqlConvertTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlConvertTranslator Translates methods defined on System.Convert into PostgreSQL CAST expressions. Inheritance System.Object NpgsqlConvertTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlConvertTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlConvertTranslator(ISqlExpressionFactory) Declaration public NpgsqlConvertTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>) Declaration public SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description SqlExpression instance System.Reflection.MethodInfo method System.Collections.Generic.IReadOnlyList < SqlExpression > arguments Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.IdentitySequenceOptionsData.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.IdentitySequenceOptionsData.html",
    "title": "Class IdentitySequenceOptionsData | Npgsql Documentation",
    "keywords": "Class IdentitySequenceOptionsData Inheritance System.Object IdentitySequenceOptionsData Implements System.IEquatable < IdentitySequenceOptionsData > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class IdentitySequenceOptionsData : IEquatable<IdentitySequenceOptionsData> Fields | Improve this Doc View Source Empty Declaration public static readonly IdentitySequenceOptionsData Empty Field Value Type Description IdentitySequenceOptionsData Properties | Improve this Doc View Source IncrementBy Declaration public long IncrementBy { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source IsCyclic Declaration public bool IsCyclic { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MaxValue Declaration public long? MaxValue { get; set; } Property Value Type Description System.Nullable < System.Int64 > | Improve this Doc View Source MinValue Declaration public long? MinValue { get; set; } Property Value Type Description System.Nullable < System.Int64 > | Improve this Doc View Source NumbersToCache Declaration public long NumbersToCache { get; set; } Property Value Type Description System.Int64 | Improve this Doc View Source StartValue Declaration public long? StartValue { get; set; } Property Value Type Description System.Nullable < System.Int64 > Methods | Improve this Doc View Source Deserialize(String) Declaration public static IdentitySequenceOptionsData Deserialize(string value) Parameters Type Name Description System.String value Returns Type Description IdentitySequenceOptionsData | Improve this Doc View Source Equals(IdentitySequenceOptionsData) Declaration public bool Equals(IdentitySequenceOptionsData other) Parameters Type Name Description IdentitySequenceOptionsData other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source Get(IAnnotatable) Declaration public static IdentitySequenceOptionsData Get(IAnnotatable annotatable) Parameters Type Name Description IAnnotatable annotatable Returns Type Description IdentitySequenceOptionsData | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source Serialize() Declaration public string Serialize() Returns Type Description System.String Implements System.IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlEnumTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlEnumTypeMapping.html",
    "title": "Class NpgsqlEnumTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlEnumTypeMapping Inheritance System.Object NpgsqlEnumTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlEnumTypeMapping : RelationalTypeMapping Constructors | Improve this Doc View Source NpgsqlEnumTypeMapping(RelationalTypeMappingParameters, ISqlGenerationHelper, INpgsqlNameTranslator) Declaration protected NpgsqlEnumTypeMapping(RelationalTypeMappingParameters parameters, ISqlGenerationHelper sqlGenerationHelper, INpgsqlNameTranslator nameTranslator) Parameters Type Name Description RelationalTypeMappingParameters parameters ISqlGenerationHelper sqlGenerationHelper INpgsqlNameTranslator nameTranslator | Improve this Doc View Source NpgsqlEnumTypeMapping(String, String, Type, ISqlGenerationHelper, INpgsqlNameTranslator) Declaration public NpgsqlEnumTypeMapping(string storeType, string storeTypeSchema, Type enumType, ISqlGenerationHelper sqlGenerationHelper, INpgsqlNameTranslator nameTranslator = null) Parameters Type Name Description System.String storeType System.String storeTypeSchema System.Type enumType ISqlGenerationHelper sqlGenerationHelper INpgsqlNameTranslator nameTranslator Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NpgsqlValueGenerationStrategy.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NpgsqlValueGenerationStrategy.html",
    "title": "Enum NpgsqlValueGenerationStrategy | Npgsql Documentation",
    "keywords": "Enum NpgsqlValueGenerationStrategy Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum NpgsqlValueGenerationStrategy Fields Name Description IdentityAlwaysColumn Selects the always-identity column strategy (a value cannot be provided). Available only starting PostgreSQL 10. IdentityByDefaultColumn Selects the by-default-identity column strategy (a value can be provided to override the identity mechanism). Available only starting PostgreSQL 10. None No Npgsql-specific strategy. SequenceHiLo A sequence-based hi-lo pattern where blocks of IDs are allocated from the server and used client-side for generating keys. This is an advanced pattern--only use this strategy if you are certain it is what you need. SerialColumn Selects the serial column strategy, which is a regular column backed by an auto-created index. If you are creating a new project on PostgreSQL 10 or above, consider using IdentityByDefaultColumn instead. Extension Methods NpgsqlValueGenerationStrategyExtensions.IsIdentity()"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations Classes NpgsqlMigrationsSqlGenerator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatch.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlModificationCommandBatch.html",
    "title": "Class NpgsqlModificationCommandBatch | Npgsql Documentation",
    "keywords": "Class NpgsqlModificationCommandBatch The Npgsql-specific implementation for . Inheritance System.Object NpgsqlModificationCommandBatch Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlModificationCommandBatch : ReaderModificationCommandBatch Remarks The usual ModificationCommandBatch implementation is , which selects the number of rows modified via a SQL query. PostgreSQL actually has no way of selecting the modified row count. SQL defines GET DIAGNOSTICS which should provide this, but in PostgreSQL it's only available in PL/pgSQL. See http://www.postgresql.org/docs/9.4/static/unsupported-features-sql-standard.html , identifier F121-01. Instead, the affected row count can be accessed in the PostgreSQL protocol itself, which seems cleaner and more efficient anyway (no additional query). Constructors | Improve this Doc View Source NpgsqlModificationCommandBatch(ModificationCommandBatchFactoryDependencies, Nullable<Int32>) Constructs an instance of the NpgsqlModificationCommandBatch class. Declaration public NpgsqlModificationCommandBatch(ModificationCommandBatchFactoryDependencies dependencies, int? maxBatchSize) Parameters Type Name Description ModificationCommandBatchFactoryDependencies dependencies System.Nullable < System.Int32 > maxBatchSize The maximum count of commands to batch. Methods | Improve this Doc View Source CanAddCommand(ModificationCommand) Declaration protected override bool CanAddCommand(ModificationCommand modificationCommand) Parameters Type Name Description ModificationCommand modificationCommand Returns Type Description System.Boolean | Improve this Doc View Source Consume(RelationalDataReader) Declaration protected override void Consume(RelationalDataReader reader) Parameters Type Name Description RelationalDataReader reader | Improve this Doc View Source ConsumeAsync(RelationalDataReader, CancellationToken) Declaration protected override Task ConsumeAsync(RelationalDataReader reader, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description RelationalDataReader reader System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source GetParameterCount() Declaration protected override int GetParameterCount() Returns Type Description System.Int32 | Improve this Doc View Source IsCommandTextValid() Declaration protected override bool IsCommandTextValid() Returns Type Description System.Boolean"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDatabaseFacadeExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDatabaseFacadeExtensions.html",
    "title": "Class NpgsqlDatabaseFacadeExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlDatabaseFacadeExtensions Npgsql specific extension methods for . Inheritance System.Object NpgsqlDatabaseFacadeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlDatabaseFacadeExtensions Methods | Improve this Doc View Source IsNpgsql(DatabaseFacade) Returns true if the database provider currently in use is the Npgsql provider. This method can only be used after the has been configured because it is only then that the provider is known. This means that this method cannot be used in because this is where application code sets the provider to use as part of configuring the context. Declaration public static bool IsNpgsql(this DatabaseFacade database) Parameters Type Name Description DatabaseFacade database The facade from . Returns Type Description System.Boolean True if SQL Server is being used; false otherwise."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlConventionSetBuilder.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions.NpgsqlConventionSetBuilder.html",
    "title": "Class NpgsqlConventionSetBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlConventionSetBuilder Inheritance System.Object NpgsqlConventionSetBuilder Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Conventions Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlConventionSetBuilder : RelationalConventionSetBuilder Constructors | Improve this Doc View Source NpgsqlConventionSetBuilder(ProviderConventionSetBuilderDependencies, RelationalConventionSetBuilderDependencies, INpgsqlOptions) Declaration public NpgsqlConventionSetBuilder(ProviderConventionSetBuilderDependencies dependencies, RelationalConventionSetBuilderDependencies relationalDependencies, INpgsqlOptions npgsqlOptions) Parameters Type Name Description ProviderConventionSetBuilderDependencies dependencies RelationalConventionSetBuilderDependencies relationalDependencies INpgsqlOptions npgsqlOptions Methods | Improve this Doc View Source Build() Declaration public static ConventionSet Build() Returns Type Description ConventionSet | Improve this Doc View Source CreateConventionSet() Declaration public override ConventionSet CreateConventionSet() Returns Type Description ConventionSet"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMacaddrTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMacaddrTypeMapping.html",
    "title": "Class NpgsqlMacaddrTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlMacaddrTypeMapping The type mapping for the PostgreSQL macaddr type. Inheritance System.Object NpgsqlTypeMapping NpgsqlMacaddrTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMacaddrTypeMapping : NpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-net-types.html#DATATYPE-MACADDR Constructors | Improve this Doc View Source NpgsqlMacaddrTypeMapping() Constructs an instance of the NpgsqlMacaddrTypeMapping class. Declaration public NpgsqlMacaddrTypeMapping() | Improve this Doc View Source NpgsqlMacaddrTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlMacaddrTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.INpgsqlValueGeneratorCache.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.INpgsqlValueGeneratorCache.html",
    "title": "Interface INpgsqlValueGeneratorCache | Npgsql Documentation",
    "keywords": "Interface INpgsqlValueGeneratorCache This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public interface INpgsqlValueGeneratorCache : IValueGeneratorCache Methods | Improve this Doc View Source GetOrAddSequenceState(IProperty, IRelationalConnection) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration NpgsqlSequenceValueGeneratorState GetOrAddSequenceState(IProperty property, IRelationalConnection connection) Parameters Type Name Description IProperty property IRelationalConnection connection Returns Type Description NpgsqlSequenceValueGeneratorState"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimeTzTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlTimeTzTypeMapping.html",
    "title": "Class NpgsqlTimeTzTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlTimeTzTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlTimeTzTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlTimeTzTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlTimeTzTypeMapping() Declaration public NpgsqlTimeTzTypeMapping() | Improve this Doc View Source NpgsqlTimeTzTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlTimeTzTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "doc/api/Npgsql.TypeHandlers.NumericHandlers.UInt32Handler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.NumericHandlers.UInt32Handler.html",
    "title": "Class UInt32Handler | Npgsql Documentation",
    "keywords": "Class UInt32Handler A type handler for the PostgreSQL real data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.UInt32 > NpgsqlSimpleTypeHandler < System.UInt32 > UInt32Handler Implements INpgsqlTypeHandler < System.UInt32 > INpgsqlSimpleTypeHandler < System.UInt32 > Inherited Members NpgsqlSimpleTypeHandler<UInt32>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<UInt32>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<UInt32>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<UInt32>.Write(UInt32, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<UInt32>.ValidateAndGetLength(UInt32, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<UInt32>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<UInt32>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<UInt32>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<UInt32>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<UInt32>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class UInt32Handler : NpgsqlSimpleTypeHandler<uint>, INpgsqlTypeHandler<uint>, INpgsqlSimpleTypeHandler<uint> Remarks See http://www.postgresql.org/docs/current/static/datatype-oid.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source UInt32Handler(PostgresType) Declaration public UInt32Handler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override uint Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.UInt32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.UInt32>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(UInt32, NpgsqlParameter) Declaration public override int ValidateAndGetLength(uint value, NpgsqlParameter parameter) Parameters Type Name Description System.UInt32 value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.UInt32>.ValidateAndGetLength(System.UInt32, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(UInt32, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(uint value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.UInt32 value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.UInt32>.Write(System.UInt32, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.Json.NET.html": {
    "href": "doc/api/Npgsql.Json.NET.html",
    "title": "Namespace Npgsql.Json.NET | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Json.NET Classes JsonbHandlerFactory JsonHandlerFactory"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQuery.NodeKind.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQuery.NodeKind.html",
    "title": "Enum NpgsqlTsQuery.NodeKind | Npgsql Documentation",
    "keywords": "Enum NpgsqlTsQuery.NodeKind NodeKind Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public enum NodeKind Fields Name Description And And operator Empty Represents the empty tsquery. Should only be used at top level. Lexeme Lexeme Not Not operator Or Or operator Phrase \"Followed by\" operator"
  },
  "doc/api/Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator.html": {
    "href": "doc/api/Npgsql.NameTranslation.NpgsqlSnakeCaseNameTranslator.html",
    "title": "Class NpgsqlSnakeCaseNameTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlSnakeCaseNameTranslator A name translator which converts standard CLR names (e.g. SomeClass) to snake-case database names (some_class) Inheritance System.Object NpgsqlSnakeCaseNameTranslator Implements INpgsqlNameTranslator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.NameTranslation Assembly : Npgsql.dll Syntax public class NpgsqlSnakeCaseNameTranslator : INpgsqlNameTranslator Constructors | Improve this Doc View Source NpgsqlSnakeCaseNameTranslator() Creates a new NpgsqlSnakeCaseNameTranslator . Declaration public NpgsqlSnakeCaseNameTranslator() | Improve this Doc View Source NpgsqlSnakeCaseNameTranslator(Boolean) Creates a new NpgsqlSnakeCaseNameTranslator . Declaration public NpgsqlSnakeCaseNameTranslator(bool legacyMode) Parameters Type Name Description System.Boolean legacyMode Uses the legacy naming convention if true , otherwise it uses the new naming convention. Methods | Improve this Doc View Source ConvertToSnakeCase(String) Converts a string to its snake_case equivalent. Declaration public static string ConvertToSnakeCase(string value) Parameters Type Name Description System.String value The value to convert. Returns Type Description System.String | Improve this Doc View Source TranslateMemberName(String) Given a CLR member name (property or field), translates its name to a database type name. Declaration public string TranslateMemberName(string clrName) Parameters Type Name Description System.String clrName Returns Type Description System.String | Improve this Doc View Source TranslateTypeName(String) Given a CLR type name (e.g class, struct, enum), translates its name to a database type name. Declaration public string TranslateTypeName(string clrName) Parameters Type Name Description System.String clrName Returns Type Description System.String Implements INpgsqlNameTranslator"
  },
  "doc/api/Npgsql.TypeHandlers.BoolHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.BoolHandler.html",
    "title": "Class BoolHandler | Npgsql Documentation",
    "keywords": "Class BoolHandler A type handler for the PostgreSQL bool data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.Boolean > NpgsqlSimpleTypeHandler < System.Boolean > BoolHandler Implements INpgsqlTypeHandler < System.Boolean > INpgsqlSimpleTypeHandler < System.Boolean > Inherited Members NpgsqlSimpleTypeHandler<Boolean>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Boolean>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Boolean>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Boolean>.Write(Boolean, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<Boolean>.ValidateAndGetLength(Boolean, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Boolean>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Boolean>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Boolean>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Boolean>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<Boolean>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public class BoolHandler : NpgsqlSimpleTypeHandler<bool>, INpgsqlTypeHandler<bool>, INpgsqlSimpleTypeHandler<bool> Remarks See http://www.postgresql.org/docs/current/static/datatype-boolean.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source BoolHandler(PostgresType) Declaration public BoolHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override bool Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Boolean Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Boolean>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Boolean, NpgsqlParameter) Declaration public override int ValidateAndGetLength(bool value, NpgsqlParameter parameter) Parameters Type Name Description System.Boolean value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Boolean>.ValidateAndGetLength(System.Boolean, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Boolean, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(bool value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Boolean value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Boolean>.Write(System.Boolean, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.NpgsqlWriteBuffer.html": {
    "href": "doc/api/Npgsql.NpgsqlWriteBuffer.html",
    "title": "Class NpgsqlWriteBuffer | Npgsql Documentation",
    "keywords": "Class NpgsqlWriteBuffer A buffer used by Npgsql to write data to the socket efficiently. Provides methods which encode different values types and tracks the current position. Inheritance System.Object NpgsqlWriteBuffer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlWriteBuffer Properties | Improve this Doc View Source WriteSpaceLeft Declaration public int WriteSpaceLeft { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Flush(Boolean) Declaration public Task Flush(bool async) Parameters Type Name Description System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source GetStream() Declaration public Stream GetStream() Returns Type Description System.IO.Stream | Improve this Doc View Source WriteByte(Byte) Declaration public void WriteByte(byte value) Parameters Type Name Description System.Byte value | Improve this Doc View Source WriteBytes(Byte[], Int32, Int32) Declaration public void WriteBytes(byte[] buf, int offset, int count) Parameters Type Name Description System.Byte [] buf System.Int32 offset System.Int32 count | Improve this Doc View Source WriteBytes(ReadOnlySpan<Byte>) Declaration public void WriteBytes(ReadOnlySpan<byte> buf) Parameters Type Name Description System.ReadOnlySpan < System.Byte > buf | Improve this Doc View Source WriteBytesRaw(Byte[], Boolean) Declaration public Task WriteBytesRaw(byte[] bytes, bool async) Parameters Type Name Description System.Byte [] bytes System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source WriteDouble(Double) Declaration public void WriteDouble(double value) Parameters Type Name Description System.Double value | Improve this Doc View Source WriteDouble(Double, Boolean) Declaration public void WriteDouble(double value, bool littleEndian) Parameters Type Name Description System.Double value System.Boolean littleEndian | Improve this Doc View Source WriteInt16(Int16) Declaration public void WriteInt16(short value) Parameters Type Name Description System.Int16 value | Improve this Doc View Source WriteInt16(Int16, Boolean) Declaration public void WriteInt16(short value, bool littleEndian) Parameters Type Name Description System.Int16 value System.Boolean littleEndian | Improve this Doc View Source WriteInt32(Int32) Declaration public void WriteInt32(int value) Parameters Type Name Description System.Int32 value | Improve this Doc View Source WriteInt32(Int32, Boolean) Declaration public void WriteInt32(int value, bool littleEndian) Parameters Type Name Description System.Int32 value System.Boolean littleEndian | Improve this Doc View Source WriteInt64(Int64) Declaration public void WriteInt64(long value) Parameters Type Name Description System.Int64 value | Improve this Doc View Source WriteInt64(Int64, Boolean) Declaration public void WriteInt64(long value, bool littleEndian) Parameters Type Name Description System.Int64 value System.Boolean littleEndian | Improve this Doc View Source WriteNullTerminatedString(String) Declaration public void WriteNullTerminatedString(string s) Parameters Type Name Description System.String s | Improve this Doc View Source WriteSByte(SByte) Declaration public void WriteSByte(sbyte value) Parameters Type Name Description System.SByte value | Improve this Doc View Source WriteSingle(Single) Declaration public void WriteSingle(float value) Parameters Type Name Description System.Single value | Improve this Doc View Source WriteSingle(Single, Boolean) Declaration public void WriteSingle(float value, bool littleEndian) Parameters Type Name Description System.Single value System.Boolean littleEndian | Improve this Doc View Source WriteString(String, Int32) Declaration public void WriteString(string s, int len = 0) Parameters Type Name Description System.String s System.Int32 len | Improve this Doc View Source WriteString(String, Int32, Boolean) Declaration public Task WriteString(string s, int byteLen, bool async) Parameters Type Name Description System.String s System.Int32 byteLen System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source WriteString(String, Int32, Int32, Boolean) Declaration public Task WriteString(string s, int charLen, int byteLen, bool async) Parameters Type Name Description System.String s System.Int32 charLen System.Int32 byteLen System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source WriteUInt16(UInt16) Declaration public void WriteUInt16(ushort value) Parameters Type Name Description System.UInt16 value | Improve this Doc View Source WriteUInt16(UInt16, Boolean) Declaration public void WriteUInt16(ushort value, bool littleEndian) Parameters Type Name Description System.UInt16 value System.Boolean littleEndian | Improve this Doc View Source WriteUInt32(UInt32) Declaration public void WriteUInt32(uint value) Parameters Type Name Description System.UInt32 value | Improve this Doc View Source WriteUInt32(UInt32, Boolean) Declaration public void WriteUInt32(uint value, bool littleEndian) Parameters Type Name Description System.UInt32 value System.Boolean littleEndian | Improve this Doc View Source WriteUInt64(UInt64) Declaration public void WriteUInt64(ulong value) Parameters Type Name Description System.UInt64 value | Improve this Doc View Source WriteUInt64(UInt64, Boolean) Declaration public void WriteUInt64(ulong value, bool littleEndian) Parameters Type Name Description System.UInt64 value System.Boolean littleEndian"
  },
  "doc/api/Npgsql.Logging.NpgsqlLogLevel.html": {
    "href": "doc/api/Npgsql.Logging.NpgsqlLogLevel.html",
    "title": "Enum NpgsqlLogLevel | Npgsql Documentation",
    "keywords": "Enum NpgsqlLogLevel Namespace : Npgsql.Logging Assembly : Npgsql.dll Syntax public enum NpgsqlLogLevel Fields Name Description Debug Error Fatal Info Trace Warn"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryFollowedBy.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryFollowedBy.html",
    "title": "Class NpgsqlTsQueryFollowedBy | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryFollowedBy TsQuery \"Followed by\" Node. Inheritance System.Object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryFollowedBy Inherited Members NpgsqlTsQueryBinOp.Left NpgsqlTsQueryBinOp.Right NpgsqlTsQuery.Kind NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public sealed class NpgsqlTsQueryFollowedBy : NpgsqlTsQueryBinOp Constructors | Improve this Doc View Source NpgsqlTsQueryFollowedBy(NpgsqlTsQuery, Int32, NpgsqlTsQuery) Creates a \"followed by\" operator, specifying 2 child nodes and the distance between them in lexemes. Declaration public NpgsqlTsQueryFollowedBy(NpgsqlTsQuery left, int distance, NpgsqlTsQuery right) Parameters Type Name Description NpgsqlTsQuery left System.Int32 distance NpgsqlTsQuery right Properties | Improve this Doc View Source Distance The distance between the 2 nodes, in lexemes. Declaration public int Distance { get; set; } Property Value Type Description System.Int32"
  },
  "doc/api/Npgsql.NpgsqlLengthCache.html": {
    "href": "doc/api/Npgsql.NpgsqlLengthCache.html",
    "title": "Class NpgsqlLengthCache | Npgsql Documentation",
    "keywords": "Class NpgsqlLengthCache An array of cached lengths for the parameters sending process. When sending parameters, lengths need to be calculated more than once (once for Bind, once for an array, once for the string within that array). This cache optimized that. Lengths are added to the cache, and then retrieved at the same order. Inheritance System.Object NpgsqlLengthCache Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlLengthCache Methods | Improve this Doc View Source Get() Retrieves a length value previously stored in the cache via Set(Int32) . Called at the writing phase, after validation has already occurred and the length cache is populated. Declaration public int Get() Returns Type Description System.Int32 | Improve this Doc View Source Set(Int32) Stores a length value in the cache, to be fetched later via Get() . Called at the ValidateAndGetLength<TAny>(TAny, ref NpgsqlLengthCache, NpgsqlParameter) phase. Declaration public int Set(int len) Parameters Type Name Description System.Int32 len Returns Type Description System.Int32 The length parameter."
  },
  "doc/api/NpgsqlTypes.NpgsqlDate.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlDate.html",
    "title": "Struct NpgsqlDate | Npgsql Documentation",
    "keywords": "Struct NpgsqlDate Implements System.IEquatable < NpgsqlDate > System.IComparable < NpgsqlDate > System.IComparable System.Collections.Generic.IComparer < NpgsqlDate > System.Collections.IComparer Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax [Serializable] public struct NpgsqlDate : IEquatable<NpgsqlDate>, IComparable<NpgsqlDate>, IComparable, IComparer<NpgsqlDate>, IComparer Constructors | Improve this Doc View Source NpgsqlDate(NpgsqlDate) Declaration public NpgsqlDate(NpgsqlDate copyFrom) Parameters Type Name Description NpgsqlDate copyFrom | Improve this Doc View Source NpgsqlDate(DateTime) Declaration public NpgsqlDate(DateTime dateTime) Parameters Type Name Description System.DateTime dateTime | Improve this Doc View Source NpgsqlDate(Int32, Int32, Int32) Declaration public NpgsqlDate(int year, int month, int day) Parameters Type Name Description System.Int32 year System.Int32 month System.Int32 day Fields | Improve this Doc View Source Epoch Represents the date 1970-01-01 Declaration public static readonly NpgsqlDate Epoch Field Value Type Description NpgsqlDate | Improve this Doc View Source Era Represents the date 0001-01-01 Declaration public static readonly NpgsqlDate Era Field Value Type Description NpgsqlDate | Improve this Doc View Source Infinity Declaration public static readonly NpgsqlDate Infinity Field Value Type Description NpgsqlDate | Improve this Doc View Source MaxCalculableValue Declaration public static readonly NpgsqlDate MaxCalculableValue Field Value Type Description NpgsqlDate | Improve this Doc View Source MaxYear Declaration public const int MaxYear = 5874897 Field Value Type Description System.Int32 | Improve this Doc View Source MinCalculableValue Declaration public static readonly NpgsqlDate MinCalculableValue Field Value Type Description NpgsqlDate | Improve this Doc View Source MinYear Declaration public const int MinYear = -4714 Field Value Type Description System.Int32 | Improve this Doc View Source NegativeInfinity Declaration public static readonly NpgsqlDate NegativeInfinity Field Value Type Description NpgsqlDate Properties | Improve this Doc View Source Day Declaration public int Day { get; } Property Value Type Description System.Int32 | Improve this Doc View Source DayOfWeek Declaration public DayOfWeek DayOfWeek { get; } Property Value Type Description System.DayOfWeek | Improve this Doc View Source DayOfYear Declaration public int DayOfYear { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsFinite Declaration public bool IsFinite { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInfinity Declaration public bool IsInfinity { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsLeapYear Declaration public bool IsLeapYear { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsNegativeInfinity Declaration public bool IsNegativeInfinity { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Month Declaration public int Month { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Now Declaration public static NpgsqlDate Now { get; } Property Value Type Description NpgsqlDate | Improve this Doc View Source Today Declaration public static NpgsqlDate Today { get; } Property Value Type Description NpgsqlDate | Improve this Doc View Source Tomorrow Declaration public static NpgsqlDate Tomorrow { get; } Property Value Type Description NpgsqlDate | Improve this Doc View Source Year Declaration public int Year { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Yesterday Declaration public static NpgsqlDate Yesterday { get; } Property Value Type Description NpgsqlDate Methods | Improve this Doc View Source Add(NpgsqlTimeSpan) Declaration public NpgsqlDate Add(NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlTimeSpan interval Returns Type Description NpgsqlDate | Improve this Doc View Source AddDays(Int32) Declaration public NpgsqlDate AddDays(int days) Parameters Type Name Description System.Int32 days Returns Type Description NpgsqlDate | Improve this Doc View Source AddMonths(Int32) Declaration public NpgsqlDate AddMonths(int months) Parameters Type Name Description System.Int32 months Returns Type Description NpgsqlDate | Improve this Doc View Source AddYears(Int32) Declaration public NpgsqlDate AddYears(int years) Parameters Type Name Description System.Int32 years Returns Type Description NpgsqlDate | Improve this Doc View Source Compare(NpgsqlDate, NpgsqlDate) Declaration public int Compare(NpgsqlDate x, NpgsqlDate y) Parameters Type Name Description NpgsqlDate x NpgsqlDate y Returns Type Description System.Int32 | Improve this Doc View Source Compare(Object, Object) Declaration public int Compare(object x, object y) Parameters Type Name Description System.Object x System.Object y Returns Type Description System.Int32 | Improve this Doc View Source CompareTo(NpgsqlDate) Declaration public int CompareTo(NpgsqlDate other) Parameters Type Name Description NpgsqlDate other Returns Type Description System.Int32 | Improve this Doc View Source CompareTo(Object) Declaration public int CompareTo(object o) Parameters Type Name Description System.Object o Returns Type Description System.Int32 | Improve this Doc View Source Equals(NpgsqlDate) Declaration public bool Equals(NpgsqlDate other) Parameters Type Name Description NpgsqlDate other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Parse(String) Declaration public static NpgsqlDate Parse(string str) Parameters Type Name Description System.String str Returns Type Description NpgsqlDate | Improve this Doc View Source Subtract(NpgsqlTimeSpan) Declaration public NpgsqlDate Subtract(NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlTimeSpan interval Returns Type Description NpgsqlDate | Improve this Doc View Source ToDateTime(NpgsqlDate) Declaration public static DateTime ToDateTime(NpgsqlDate date) Parameters Type Name Description NpgsqlDate date Returns Type Description System.DateTime | Improve this Doc View Source ToNpgsqlDate(DateTime) Declaration public static NpgsqlDate ToNpgsqlDate(DateTime date) Parameters Type Name Description System.DateTime date Returns Type Description NpgsqlDate | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source TryParse(String, out NpgsqlDate) Declaration public static bool TryParse(string str, out NpgsqlDate date) Parameters Type Name Description System.String str NpgsqlDate date Returns Type Description System.Boolean Operators | Improve this Doc View Source Addition(NpgsqlDate, NpgsqlTimeSpan) Declaration public static NpgsqlDate operator +(NpgsqlDate date, NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlDate date NpgsqlTimeSpan interval Returns Type Description NpgsqlDate | Improve this Doc View Source Addition(NpgsqlTimeSpan, NpgsqlDate) Declaration public static NpgsqlDate operator +(NpgsqlTimeSpan interval, NpgsqlDate date) Parameters Type Name Description NpgsqlTimeSpan interval NpgsqlDate date Returns Type Description NpgsqlDate | Improve this Doc View Source Equality(NpgsqlDate, NpgsqlDate) Declaration public static bool operator ==(NpgsqlDate x, NpgsqlDate y) Parameters Type Name Description NpgsqlDate x NpgsqlDate y Returns Type Description System.Boolean | Improve this Doc View Source Explicit(NpgsqlDate to DateTime) Declaration public static explicit operator DateTime(NpgsqlDate date) Parameters Type Name Description NpgsqlDate date Returns Type Description System.DateTime | Improve this Doc View Source Explicit(DateTime to NpgsqlDate) Declaration public static explicit operator NpgsqlDate(DateTime date) Parameters Type Name Description System.DateTime date Returns Type Description NpgsqlDate | Improve this Doc View Source GreaterThan(NpgsqlDate, NpgsqlDate) Declaration public static bool operator>(NpgsqlDate x, NpgsqlDate y) Parameters Type Name Description NpgsqlDate x NpgsqlDate y Returns Type Description System.Boolean | Improve this Doc View Source GreaterThanOrEqual(NpgsqlDate, NpgsqlDate) Declaration public static bool operator >=(NpgsqlDate x, NpgsqlDate y) Parameters Type Name Description NpgsqlDate x NpgsqlDate y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlDate, NpgsqlDate) Declaration public static bool operator !=(NpgsqlDate x, NpgsqlDate y) Parameters Type Name Description NpgsqlDate x NpgsqlDate y Returns Type Description System.Boolean | Improve this Doc View Source LessThan(NpgsqlDate, NpgsqlDate) Declaration public static bool operator <(NpgsqlDate x, NpgsqlDate y) Parameters Type Name Description NpgsqlDate x NpgsqlDate y Returns Type Description System.Boolean | Improve this Doc View Source LessThanOrEqual(NpgsqlDate, NpgsqlDate) Declaration public static bool operator <=(NpgsqlDate x, NpgsqlDate y) Parameters Type Name Description NpgsqlDate x NpgsqlDate y Returns Type Description System.Boolean | Improve this Doc View Source Subtraction(NpgsqlDate, NpgsqlDate) Declaration public static NpgsqlTimeSpan operator -(NpgsqlDate dateX, NpgsqlDate dateY) Parameters Type Name Description NpgsqlDate dateX NpgsqlDate dateY Returns Type Description NpgsqlTimeSpan | Improve this Doc View Source Subtraction(NpgsqlDate, NpgsqlTimeSpan) Declaration public static NpgsqlDate operator -(NpgsqlDate date, NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlDate date NpgsqlTimeSpan interval Returns Type Description NpgsqlDate Implements System.IEquatable<T> System.IComparable<T> System.IComparable System.Collections.Generic.IComparer<T> System.Collections.IComparer"
  },
  "doc/api/Npgsql.NpgsqlConnectionStringPropertyAttribute.html": {
    "href": "doc/api/Npgsql.NpgsqlConnectionStringPropertyAttribute.html",
    "title": "Class NpgsqlConnectionStringPropertyAttribute | Npgsql Documentation",
    "keywords": "Class NpgsqlConnectionStringPropertyAttribute Marks on NpgsqlConnectionStringBuilder which participate in the connection string. Optionally holds a set of synonyms for the property. Inheritance System.Object System.Attribute NpgsqlConnectionStringPropertyAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax [AttributeUsage(AttributeTargets.Property)] public class NpgsqlConnectionStringPropertyAttribute : Attribute Constructors | Improve this Doc View Source NpgsqlConnectionStringPropertyAttribute() Creates a NpgsqlConnectionStringPropertyAttribute . Declaration public NpgsqlConnectionStringPropertyAttribute() | Improve this Doc View Source NpgsqlConnectionStringPropertyAttribute(String[]) Creates a NpgsqlConnectionStringPropertyAttribute . Declaration public NpgsqlConnectionStringPropertyAttribute(params string[] synonyms) Parameters Type Name Description System.String [] synonyms Properties | Improve this Doc View Source Synonyms Holds a list of synonyms for the property. Declaration public string[] Synonyms { get; } Property Value Type Description System.String []"
  },
  "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.TimeHandlerFactory.html": {
    "href": "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.TimeHandlerFactory.html",
    "title": "Class TimeHandlerFactory | Npgsql Documentation",
    "keywords": "Class TimeHandlerFactory A factory for type handlers for the PostgreSQL time data type. Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < System.TimeSpan > TimeHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<TimeSpan>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<TimeSpan>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class TimeHandlerFactory : NpgsqlTypeHandlerFactory<TimeSpan> Remarks See http://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<TimeSpan> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < System.TimeSpan > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<System.TimeSpan>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.Logging.INpgsqlLoggingProvider.html": {
    "href": "doc/api/Npgsql.Logging.INpgsqlLoggingProvider.html",
    "title": "Interface INpgsqlLoggingProvider | Npgsql Documentation",
    "keywords": "Interface INpgsqlLoggingProvider Namespace : Npgsql.Logging Assembly : Npgsql.dll Syntax public interface INpgsqlLoggingProvider Methods | Improve this Doc View Source CreateLogger(String) Creates a new INpgsqlLogger instance of the given name. Declaration NpgsqlLogger CreateLogger(string name) Parameters Type Name Description System.String name Returns Type Description NpgsqlLogger"
  },
  "doc/api/Npgsql.LegacyPostgis.PostgisLineString.html": {
    "href": "doc/api/Npgsql.LegacyPostgis.PostgisLineString.html",
    "title": "Class PostgisLineString | Npgsql Documentation",
    "keywords": "Class PostgisLineString Represents an Ogc 2D LineString Inheritance System.Object PostgisGeometry PostgisLineString Implements System.IEquatable < PostgisLineString > System.Collections.Generic.IEnumerable < Coordinate2D > System.Collections.IEnumerable Inherited Members PostgisGeometry.SRID System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.LegacyPostgis Assembly : Npgsql.LegacyPostgis.dll Syntax public class PostgisLineString : PostgisGeometry, IEquatable<PostgisLineString>, IEnumerable<Coordinate2D>, IEnumerable Constructors | Improve this Doc View Source PostgisLineString(Coordinate2D[]) Declaration public PostgisLineString(Coordinate2D[] points) Parameters Type Name Description Coordinate2D [] points | Improve this Doc View Source PostgisLineString(IEnumerable<Coordinate2D>) Declaration public PostgisLineString(IEnumerable<Coordinate2D> points) Parameters Type Name Description System.Collections.Generic.IEnumerable < Coordinate2D > points Properties | Improve this Doc View Source Item[Int32] Declaration public Coordinate2D this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description Coordinate2D | Improve this Doc View Source PointCount Declaration public int PointCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(PostgisLineString) Declaration public bool Equals(PostgisLineString other) Parameters Type Name Description PostgisLineString other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<Coordinate2D> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Coordinate2D > | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetLenHelper() Declaration protected override int GetLenHelper() Returns Type Description System.Int32 Overrides PostgisGeometry.GetLenHelper() Operators | Improve this Doc View Source Equality(PostgisLineString, PostgisLineString) Declaration public static bool operator ==(PostgisLineString x, PostgisLineString y) Parameters Type Name Description PostgisLineString x PostgisLineString y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(PostgisLineString, PostgisLineString) Declaration public static bool operator !=(PostgisLineString x, PostgisLineString y) Parameters Type Name Description PostgisLineString x PostgisLineString y Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.IEquatable<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "doc/api/Npgsql.LegacyPostgis.PostgisGeometryCollection.html": {
    "href": "doc/api/Npgsql.LegacyPostgis.PostgisGeometryCollection.html",
    "title": "Class PostgisGeometryCollection | Npgsql Documentation",
    "keywords": "Class PostgisGeometryCollection Represents a collection of Postgis feature. Inheritance System.Object PostgisGeometry PostgisGeometryCollection Implements System.IEquatable < PostgisGeometryCollection > System.Collections.Generic.IEnumerable < PostgisGeometry > System.Collections.IEnumerable Inherited Members PostgisGeometry.SRID System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.LegacyPostgis Assembly : Npgsql.LegacyPostgis.dll Syntax public class PostgisGeometryCollection : PostgisGeometry, IEquatable<PostgisGeometryCollection>, IEnumerable<PostgisGeometry>, IEnumerable Constructors | Improve this Doc View Source PostgisGeometryCollection(PostgisGeometry[]) Declaration public PostgisGeometryCollection(PostgisGeometry[] geometries) Parameters Type Name Description PostgisGeometry [] geometries | Improve this Doc View Source PostgisGeometryCollection(IEnumerable<PostgisGeometry>) Declaration public PostgisGeometryCollection(IEnumerable<PostgisGeometry> geometries) Parameters Type Name Description System.Collections.Generic.IEnumerable < PostgisGeometry > geometries Properties | Improve this Doc View Source GeometryCount Declaration public int GeometryCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Declaration public PostgisGeometry this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description PostgisGeometry Methods | Improve this Doc View Source Equals(PostgisGeometryCollection) Declaration public bool Equals(PostgisGeometryCollection other) Parameters Type Name Description PostgisGeometryCollection other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<PostgisGeometry> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < PostgisGeometry > | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetLenHelper() Declaration protected override int GetLenHelper() Returns Type Description System.Int32 Overrides PostgisGeometry.GetLenHelper() Operators | Improve this Doc View Source Equality(PostgisGeometryCollection, PostgisGeometryCollection) Declaration public static bool operator ==(PostgisGeometryCollection x, PostgisGeometryCollection y) Parameters Type Name Description PostgisGeometryCollection x PostgisGeometryCollection y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(PostgisGeometryCollection, PostgisGeometryCollection) Declaration public static bool operator !=(PostgisGeometryCollection x, PostgisGeometryCollection y) Parameters Type Name Description PostgisGeometryCollection x PostgisGeometryCollection y Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.IEquatable<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "doc/api/NpgsqlTypes.html": {
    "href": "doc/api/NpgsqlTypes.html",
    "title": "Namespace NpgsqlTypes | Npgsql Documentation",
    "keywords": "Namespace NpgsqlTypes Classes NpgsqlRange<T>.RangeTypeConverter Represents a type converter for NpgsqlRange<T> . NpgsqlTsQuery Represents a PostgreSQL tsquery. This is the base class for the lexeme, not, or, and, and \"followed by\" nodes. NpgsqlTsQueryAnd TsQuery And node. NpgsqlTsQueryBinOp Base class for TsQuery binary operators (& and |). NpgsqlTsQueryEmpty Represents an empty tsquery. Shold only be used as top node. NpgsqlTsQueryFollowedBy TsQuery \"Followed by\" Node. NpgsqlTsQueryLexeme TsQuery Lexeme node. NpgsqlTsQueryNot TsQuery Not node. NpgsqlTsQueryOr TsQuery Or Node. NpgsqlTsVector Represents a PostgreSQL tsvector. PgNameAttribute Indicates that this property or field correspond to a PostgreSQL field with the specified name Structs NpgsqlBox Represents a PostgreSQL box type. NpgsqlCircle Represents a PostgreSQL Circle type. NpgsqlDate NpgsqlDateTime A struct similar to .NET DateTime but capable of storing PostgreSQL's timestamp and timestamptz types. DateTime is capable of storing values from year 1 to 9999 at 100-nanosecond precision, while PostgreSQL's timestamps store values from 4713BC to 5874897AD with 1-microsecond precision. NpgsqlInet Represents a PostgreSQL inet type, which is a combination of an IPAddress and a subnet mask. NpgsqlLine Represents a PostgreSQL line type. NpgsqlLSeg Represents a PostgreSQL Line Segment type. NpgsqlPath Represents a PostgreSQL Path type. NpgsqlPoint Represents a PostgreSQL point type. NpgsqlPolygon Represents a PostgreSQL Polygon type. NpgsqlRange<T> Represents a PostgreSQL range type. NpgsqlTid Represents a PostgreSQL tid value NpgsqlTimeSpan Represents the PostgreSQL interval datatype. NpgsqlTsVector.Lexeme Represents a lexeme. A lexeme consists of a text string and optional word entry positions. NpgsqlTsVector.Lexeme.WordEntryPos Represents a word entry position and an optional weight. Enums NpgsqlDbType Represents a PostgreSQL data type that can be written or read to the database. Used in places such as NpgsqlDbType to unambiguously specify how to encode or decode values. NpgsqlTsQuery.NodeKind NodeKind NpgsqlTsQueryLexeme.Weight Weight enum, can be OR'ed together. NpgsqlTsVector.Lexeme.Weight The weight is labeled from A to D. D is the default, and not printed."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlFullTextSearchLinqExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlFullTextSearchLinqExtensions.html",
    "title": "Class NpgsqlFullTextSearchLinqExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlFullTextSearchLinqExtensions Inheritance System.Object NpgsqlFullTextSearchLinqExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlFullTextSearchLinqExtensions Methods | Improve this Doc View Source And(NpgsqlTsQuery, NpgsqlTsQuery) AND tsquerys together. Generates the \"&&\" operator. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery And(this NpgsqlTsQuery query1, NpgsqlTsQuery query2) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 Returns Type Description NpgsqlTsQuery | Improve this Doc View Source Concat(NpgsqlTsVector, NpgsqlTsVector) Returns a vector which combines the lexemes and positional information of vector1 and vector2 using the || tsvector operator. Positions and weight labels are retained during the concatenation. https://www.postgresql.org/docs/10/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector Concat(this NpgsqlTsVector vector1, NpgsqlTsVector vector2) Parameters Type Name Description NpgsqlTsVector vector1 NpgsqlTsVector vector2 Returns Type Description NpgsqlTsVector | Improve this Doc View Source Contains(NpgsqlTsQuery, NpgsqlTsQuery) Returns whether query1 contains query2 . Generates the &quot;@>\" operator. http://www.postgresql.org/docs/current/static/functions-textsearch.html Declaration public static bool Contains(this NpgsqlTsQuery query1, NpgsqlTsQuery query2) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 Returns Type Description System.Boolean | Improve this Doc View Source Delete(NpgsqlTsVector, String) Return a new vector with lexeme removed from vector https://www.postgresql.org/docs/current/static/functions-textsearch.html Declaration public static NpgsqlTsVector Delete(this NpgsqlTsVector vector, string lexeme) Parameters Type Name Description NpgsqlTsVector vector System.String lexeme Returns Type Description NpgsqlTsVector | Improve this Doc View Source Delete(NpgsqlTsVector, String[]) Return a new vector with lexemes removed from vector https://www.postgresql.org/docs/current/static/functions-textsearch.html Declaration public static NpgsqlTsVector Delete(this NpgsqlTsVector vector, string[] lexemes) Parameters Type Name Description NpgsqlTsVector vector System.String [] lexemes Returns Type Description NpgsqlTsVector | Improve this Doc View Source Filter(NpgsqlTsVector, Char[]) Returns a new vector with only lexemes having weights specified in weights . https://www.postgresql.org/docs/current/static/functions-textsearch.html Declaration public static NpgsqlTsVector Filter(this NpgsqlTsVector vector, char[] weights) Parameters Type Name Description NpgsqlTsVector vector System.Char [] weights Returns Type Description NpgsqlTsVector | Improve this Doc View Source GetLength(NpgsqlTsVector) Returns the number of lexemes in vector . http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static int GetLength(this NpgsqlTsVector vector) Parameters Type Name Description NpgsqlTsVector vector Returns Type Description System.Int32 | Improve this Doc View Source GetNodeCount(NpgsqlTsQuery) Returns the number of lexemes plus operators in query . http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static int GetNodeCount(this NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsQuery query Returns Type Description System.Int32 | Improve this Doc View Source GetQueryTree(NpgsqlTsQuery) Get the indexable part of query . http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static string GetQueryTree(this NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsQuery query Returns Type Description System.String | Improve this Doc View Source GetResultHeadline(NpgsqlTsQuery, String) Returns a string suitable for display containing a query match. http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-HEADLINE Declaration public static string GetResultHeadline(this NpgsqlTsQuery query, string document) Parameters Type Name Description NpgsqlTsQuery query System.String document Returns Type Description System.String | Improve this Doc View Source GetResultHeadline(NpgsqlTsQuery, String, String) Returns a string suitable for display containing a query match. http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-HEADLINE Declaration public static string GetResultHeadline(this NpgsqlTsQuery query, string document, string options) Parameters Type Name Description NpgsqlTsQuery query System.String document System.String options Returns Type Description System.String | Improve this Doc View Source GetResultHeadline(NpgsqlTsQuery, String, String, String) Returns a string suitable for display containing a query match using the text search configuration specified by config . http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-HEADLINE Declaration public static string GetResultHeadline(this NpgsqlTsQuery query, string config, string document, string options) Parameters Type Name Description NpgsqlTsQuery query System.String config System.String document System.String options Returns Type Description System.String | Improve this Doc View Source IsContainedIn(NpgsqlTsQuery, NpgsqlTsQuery) Returns whether query1 is contained within query2 . Generates the &quot;&lt;@\" operator. http://www.postgresql.org/docs/current/static/functions-textsearch.html Declaration public static bool IsContainedIn(this NpgsqlTsQuery query1, NpgsqlTsQuery query2) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 Returns Type Description System.Boolean | Improve this Doc View Source Matches(NpgsqlTsVector, NpgsqlTsQuery) This method generates the &quot;@@\" match operator. http://www.postgresql.org/docs/current/static/textsearch-intro.html#TEXTSEARCH-MATCHING Declaration public static bool Matches(this NpgsqlTsVector vector, NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsQuery query Returns Type Description System.Boolean | Improve this Doc View Source Matches(NpgsqlTsVector, String) This method generates the &quot;@@\" match operator. The query parameter is assumed to be a plain search query and will be converted to a tsquery using plainto_tsquery. http://www.postgresql.org/docs/current/static/textsearch-intro.html#TEXTSEARCH-MATCHING Declaration public static bool Matches(this NpgsqlTsVector vector, string query) Parameters Type Name Description NpgsqlTsVector vector System.String query Returns Type Description System.Boolean | Improve this Doc View Source Or(NpgsqlTsQuery, NpgsqlTsQuery) OR tsquerys together. Generates the \"||\" operator. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery Or(this NpgsqlTsQuery query1, NpgsqlTsQuery query2) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 Returns Type Description NpgsqlTsQuery | Improve this Doc View Source Rank(NpgsqlTsVector, NpgsqlTsQuery) Calculates the rank of vector for query . http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float Rank(this NpgsqlTsVector vector, NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsQuery query Returns Type Description System.Single | Improve this Doc View Source Rank(NpgsqlTsVector, NpgsqlTsQuery, NpgsqlTsRankingNormalization) Calculates the rank of vector for query while normalizing the result according to the behaviors specified by normalization . http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float Rank(this NpgsqlTsVector vector, NpgsqlTsQuery query, NpgsqlTsRankingNormalization normalization) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsQuery query NpgsqlTsRankingNormalization normalization Returns Type Description System.Single | Improve this Doc View Source Rank(NpgsqlTsVector, Single[], NpgsqlTsQuery) Calculates the rank of vector for query with custom weighting for word instances depending on their labels (D, C, B or A). http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float Rank(this NpgsqlTsVector vector, float[] weights, NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsVector vector System.Single [] weights NpgsqlTsQuery query Returns Type Description System.Single | Improve this Doc View Source Rank(NpgsqlTsVector, Single[], NpgsqlTsQuery, NpgsqlTsRankingNormalization) Calculates the rank of vector for query while normalizing the result according to the behaviors specified by normalization and using custom weighting for word instances depending on their labels (D, C, B or A). http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float Rank(this NpgsqlTsVector vector, float[] weights, NpgsqlTsQuery query, NpgsqlTsRankingNormalization normalization) Parameters Type Name Description NpgsqlTsVector vector System.Single [] weights NpgsqlTsQuery query NpgsqlTsRankingNormalization normalization Returns Type Description System.Single | Improve this Doc View Source RankCoverDensity(NpgsqlTsVector, NpgsqlTsQuery) Calculates the rank of vector for query using the cover density method. http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float RankCoverDensity(this NpgsqlTsVector vector, NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsQuery query Returns Type Description System.Single | Improve this Doc View Source RankCoverDensity(NpgsqlTsVector, NpgsqlTsQuery, NpgsqlTsRankingNormalization) Calculates the rank of vector for query using the cover density method while normalizing the result according to the behaviors specified by normalization . http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float RankCoverDensity(this NpgsqlTsVector vector, NpgsqlTsQuery query, NpgsqlTsRankingNormalization normalization) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsQuery query NpgsqlTsRankingNormalization normalization Returns Type Description System.Single | Improve this Doc View Source RankCoverDensity(NpgsqlTsVector, Single[], NpgsqlTsQuery) Calculates the rank of vector for query using the cover density method with custom weighting for word instances depending on their labels (D, C, B or A). http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float RankCoverDensity(this NpgsqlTsVector vector, float[] weights, NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsVector vector System.Single [] weights NpgsqlTsQuery query Returns Type Description System.Single | Improve this Doc View Source RankCoverDensity(NpgsqlTsVector, Single[], NpgsqlTsQuery, NpgsqlTsRankingNormalization) Calculates the rank of vector for query using the cover density method while normalizing the result according to the behaviors specified by normalization and using custom weighting for word instances depending on their labels (D, C, B or A). http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING Declaration public static float RankCoverDensity(this NpgsqlTsVector vector, float[] weights, NpgsqlTsQuery query, NpgsqlTsRankingNormalization normalization) Parameters Type Name Description NpgsqlTsVector vector System.Single [] weights NpgsqlTsQuery query NpgsqlTsRankingNormalization normalization Returns Type Description System.Single | Improve this Doc View Source Rewrite(NpgsqlTsQuery, NpgsqlTsQuery, NpgsqlTsQuery) Searchs query for occurrences of target , and replaces each occurrence with a substitute . All parameters are of type tsquery. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery Rewrite(this NpgsqlTsQuery query, NpgsqlTsQuery target, NpgsqlTsQuery substitute) Parameters Type Name Description NpgsqlTsQuery query NpgsqlTsQuery target NpgsqlTsQuery substitute Returns Type Description NpgsqlTsQuery | Improve this Doc View Source SetWeight(NpgsqlTsVector, NpgsqlTsVector.Lexeme.Weight) Assign weight to each element of vector and return a new weighted tsvector. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector SetWeight(this NpgsqlTsVector vector, NpgsqlTsVector.Lexeme.Weight weight) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsVector.Lexeme.Weight weight Returns Type Description NpgsqlTsVector | Improve this Doc View Source SetWeight(NpgsqlTsVector, NpgsqlTsVector.Lexeme.Weight, String[]) Assign weight to elements of vector that are in lexemes and return a new weighted tsvector. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector SetWeight(this NpgsqlTsVector vector, NpgsqlTsVector.Lexeme.Weight weight, string[] lexemes) Parameters Type Name Description NpgsqlTsVector vector NpgsqlTsVector.Lexeme.Weight weight System.String [] lexemes Returns Type Description NpgsqlTsVector | Improve this Doc View Source SetWeight(NpgsqlTsVector, Char) Assign weight to each element of vector and return a new weighted tsvector. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector SetWeight(this NpgsqlTsVector vector, char weight) Parameters Type Name Description NpgsqlTsVector vector System.Char weight Returns Type Description NpgsqlTsVector | Improve this Doc View Source SetWeight(NpgsqlTsVector, Char, String[]) Assign weight to elements of vector that are in lexemes and return a new weighted tsvector. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector SetWeight(this NpgsqlTsVector vector, char weight, string[] lexemes) Parameters Type Name Description NpgsqlTsVector vector System.Char weight System.String [] lexemes Returns Type Description NpgsqlTsVector | Improve this Doc View Source ToNegative(NpgsqlTsQuery) Negate a tsquery. Generates the \"!!\" operator. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery ToNegative(this NpgsqlTsQuery query) Parameters Type Name Description NpgsqlTsQuery query Returns Type Description NpgsqlTsQuery | Improve this Doc View Source ToPhrase(NpgsqlTsQuery, NpgsqlTsQuery) Returns a tsquery that searches for a match to query1 followed by a match to query2 . http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery ToPhrase(this NpgsqlTsQuery query1, NpgsqlTsQuery query2) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 Returns Type Description NpgsqlTsQuery | Improve this Doc View Source ToPhrase(NpgsqlTsQuery, NpgsqlTsQuery, Int32) Returns a tsquery that searches for a match to query1 followed by a match to query2 at a distance of distance lexemes using the <N> tsquery operator http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSQUERY Declaration public static NpgsqlTsQuery ToPhrase(this NpgsqlTsQuery query1, NpgsqlTsQuery query2, int distance) Parameters Type Name Description NpgsqlTsQuery query1 NpgsqlTsQuery query2 System.Int32 distance Returns Type Description NpgsqlTsQuery | Improve this Doc View Source ToStripped(NpgsqlTsVector) Removes weights and positions from vector and returns a new stripped tsvector. http://www.postgresql.org/docs/current/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR Declaration public static NpgsqlTsVector ToStripped(this NpgsqlTsVector vector) Parameters Type Name Description NpgsqlTsVector vector Returns Type Description NpgsqlTsVector"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Extensions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Extensions.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Extensions | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Extensions Classes NpgsqlJsonDbFunctionsExtensions Provides methods for supporting translation to PostgreSQL JSON operators and functions."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion Classes NpgsqlArrayConverter<TModelArray, TProviderArray> A value converter that can convert between array types, given another for the elements. NpgsqlValueConverterSelector"
  },
  "doc/api/Npgsql.NodaTime.TimeHandlerFactory.html": {
    "href": "doc/api/Npgsql.NodaTime.TimeHandlerFactory.html",
    "title": "Class TimeHandlerFactory | Npgsql Documentation",
    "keywords": "Class TimeHandlerFactory Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < LocalTime > TimeHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<LocalTime>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<LocalTime>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.NodaTime Assembly : Npgsql.NodaTime.dll Syntax public class TimeHandlerFactory : NpgsqlTypeHandlerFactory<LocalTime> Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<LocalTime> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < LocalTime > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<LocalTime>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.TypeHandlers.HstoreHandlerFactory.html": {
    "href": "doc/api/Npgsql.TypeHandlers.HstoreHandlerFactory.html",
    "title": "Class HstoreHandlerFactory | Npgsql Documentation",
    "keywords": "Class HstoreHandlerFactory A factory for type handlers for the PostgreSQL hstore extension data type, which stores sets of key/value pairs within a single PostgreSQL value. Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < System.Collections.Generic.Dictionary < System.String , System.String >> HstoreHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<Dictionary<String, String>>.Create(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<Dictionary<String, String>>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<Dictionary<String, String>>.DefaultValueType NpgsqlTypeHandlerFactory.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public class HstoreHandlerFactory : NpgsqlTypeHandlerFactory<Dictionary<string, string>> Remarks See https://www.postgresql.org/docs/current/hstore.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<Dictionary<string, string>> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < System.Collections.Generic.Dictionary < System.String , System.String >> Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<System.Collections.Generic.Dictionary<System.String, System.String>>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.LegacyPostgis.PostgisMultiPoint.html": {
    "href": "doc/api/Npgsql.LegacyPostgis.PostgisMultiPoint.html",
    "title": "Class PostgisMultiPoint | Npgsql Documentation",
    "keywords": "Class PostgisMultiPoint Represents a Postgis 2D MultiPoint Inheritance System.Object PostgisGeometry PostgisMultiPoint Implements System.IEquatable < PostgisMultiPoint > System.Collections.Generic.IEnumerable < Coordinate2D > System.Collections.IEnumerable Inherited Members PostgisGeometry.SRID System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.LegacyPostgis Assembly : Npgsql.LegacyPostgis.dll Syntax public class PostgisMultiPoint : PostgisGeometry, IEquatable<PostgisMultiPoint>, IEnumerable<Coordinate2D>, IEnumerable Constructors | Improve this Doc View Source PostgisMultiPoint(Coordinate2D[]) Declaration public PostgisMultiPoint(Coordinate2D[] points) Parameters Type Name Description Coordinate2D [] points | Improve this Doc View Source PostgisMultiPoint(IEnumerable<Coordinate2D>) Declaration public PostgisMultiPoint(IEnumerable<Coordinate2D> points) Parameters Type Name Description System.Collections.Generic.IEnumerable < Coordinate2D > points | Improve this Doc View Source PostgisMultiPoint(IEnumerable<PostgisPoint>) Declaration public PostgisMultiPoint(IEnumerable<PostgisPoint> points) Parameters Type Name Description System.Collections.Generic.IEnumerable < PostgisPoint > points Properties | Improve this Doc View Source Item[Int32] Declaration public Coordinate2D this[int indexer] { get; } Parameters Type Name Description System.Int32 indexer Property Value Type Description Coordinate2D | Improve this Doc View Source PointCount Declaration public int PointCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(PostgisMultiPoint) Declaration public bool Equals(PostgisMultiPoint other) Parameters Type Name Description PostgisMultiPoint other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<Coordinate2D> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Coordinate2D > | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetLenHelper() Declaration protected override int GetLenHelper() Returns Type Description System.Int32 Overrides PostgisGeometry.GetLenHelper() Operators | Improve this Doc View Source Equality(PostgisMultiPoint, PostgisMultiPoint) Declaration public static bool operator ==(PostgisMultiPoint x, PostgisMultiPoint y) Parameters Type Name Description PostgisMultiPoint x PostgisMultiPoint y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(PostgisMultiPoint, PostgisMultiPoint) Declaration public static bool operator !=(PostgisMultiPoint x, PostgisMultiPoint y) Parameters Type Name Description PostgisMultiPoint x PostgisMultiPoint y Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.IEquatable<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "doc/api/Npgsql.TypeHandlers.JsonHandlerFactory.html": {
    "href": "doc/api/Npgsql.TypeHandlers.JsonHandlerFactory.html",
    "title": "Class JsonHandlerFactory | Npgsql Documentation",
    "keywords": "Class JsonHandlerFactory A factory for type handlers for the PostgreSQL json data type. Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < System.String > JsonHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<String>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<String>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public class JsonHandlerFactory : NpgsqlTypeHandlerFactory<string> Remarks See https://www.postgresql.org/docs/current/datatype-json.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source JsonHandlerFactory() Declaration public JsonHandlerFactory() | Improve this Doc View Source JsonHandlerFactory(JsonSerializerOptions) Declaration public JsonHandlerFactory(JsonSerializerOptions serializerOptions) Parameters Type Name Description JsonSerializerOptions serializerOptions Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<string> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < System.String > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<System.String>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryNot.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryNot.html",
    "title": "Class NpgsqlTsQueryNot | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryNot TsQuery Not node. Inheritance System.Object NpgsqlTsQuery NpgsqlTsQueryNot Inherited Members NpgsqlTsQuery.Kind NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public sealed class NpgsqlTsQueryNot : NpgsqlTsQuery Constructors | Improve this Doc View Source NpgsqlTsQueryNot(NpgsqlTsQuery) Creates a not operator, with a given child node. Declaration public NpgsqlTsQueryNot(NpgsqlTsQuery child) Parameters Type Name Description NpgsqlTsQuery child Properties | Improve this Doc View Source Child Child node Declaration public NpgsqlTsQuery Child { get; set; } Property Value Type Description NpgsqlTsQuery"
  },
  "doc/api/NpgsqlTypes.NpgsqlRange-1.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlRange-1.html",
    "title": "Struct NpgsqlRange<T> | Npgsql Documentation",
    "keywords": "Struct NpgsqlRange<T> Represents a PostgreSQL range type. Implements System.IEquatable < NpgsqlRange <T>> Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlRange<T> : IEquatable<NpgsqlRange<T>> Type Parameters Name Description T The element type of the values in the range. Remarks See: https://www.postgresql.org/docs/current/static/rangetypes.html Constructors | Improve this Doc View Source NpgsqlRange(T, T) Constructs an NpgsqlRange<T> with inclusive and definite bounds. Declaration public NpgsqlRange(T lowerBound, T upperBound) Parameters Type Name Description T lowerBound The lower bound of the range. T upperBound The upper bound of the range. | Improve this Doc View Source NpgsqlRange(T, Boolean, T, Boolean) Constructs an NpgsqlRange<T> with definite bounds. Declaration public NpgsqlRange(T lowerBound, bool lowerBoundIsInclusive, T upperBound, bool upperBoundIsInclusive) Parameters Type Name Description T lowerBound The lower bound of the range. System.Boolean lowerBoundIsInclusive True if the lower bound is is part of the range (i.e. inclusive); otherwise, false. T upperBound The upper bound of the range. System.Boolean upperBoundIsInclusive True if the upper bound is part of the range (i.e. inclusive); otherwise, false. | Improve this Doc View Source NpgsqlRange(T, Boolean, Boolean, T, Boolean, Boolean) Constructs an NpgsqlRange<T> . Declaration public NpgsqlRange(T lowerBound, bool lowerBoundIsInclusive, bool lowerBoundInfinite, T upperBound, bool upperBoundIsInclusive, bool upperBoundInfinite) Parameters Type Name Description T lowerBound The lower bound of the range. System.Boolean lowerBoundIsInclusive True if the lower bound is is part of the range (i.e. inclusive); otherwise, false. System.Boolean lowerBoundInfinite True if the lower bound is indefinite (i.e. infinite or unbounded); otherwise, false. T upperBound The upper bound of the range. System.Boolean upperBoundIsInclusive True if the upper bound is part of the range (i.e. inclusive); otherwise, false. System.Boolean upperBoundInfinite True if the upper bound is indefinite (i.e. infinite or unbounded); otherwise, false. Fields | Improve this Doc View Source Empty Represents the empty range. This field is read-only. Declaration public static readonly NpgsqlRange<T> Empty Field Value Type Description NpgsqlRange <T> Properties | Improve this Doc View Source IsEmpty True if the range is empty; otherwise, false. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LowerBound The lower bound of the range. Only valid when LowerBoundInfinite is false. Declaration public T LowerBound { get; } Property Value Type Description T | Improve this Doc View Source LowerBoundInfinite True if the lower bound is indefinite (i.e. infinite or unbounded); otherwise, false. Declaration public bool LowerBoundInfinite { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LowerBoundIsInclusive True if the lower bound is part of the range (i.e. inclusive); otherwise, false. Declaration public bool LowerBoundIsInclusive { get; } Property Value Type Description System.Boolean | Improve this Doc View Source UpperBound The upper bound of the range. Only valid when UpperBoundInfinite is false. Declaration public T UpperBound { get; } Property Value Type Description T | Improve this Doc View Source UpperBoundInfinite True if the upper bound is indefinite (i.e. infinite or unbounded); otherwise, false. Declaration public bool UpperBoundInfinite { get; } Property Value Type Description System.Boolean | Improve this Doc View Source UpperBoundIsInclusive True if the upper bound is part of the range (i.e. inclusive); otherwise, false. Declaration public bool UpperBoundIsInclusive { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Equals(NpgsqlRange<T>) Declaration public bool Equals(NpgsqlRange<T> other) Parameters Type Name Description NpgsqlRange <T> other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Parse(String) Parses the well-known text representation of a PostgreSQL range type into a NpgsqlRange<T> . Declaration public static NpgsqlRange<T> Parse(string value) Parameters Type Name Description System.String value A PosgreSQL range type in a well-known text format. Returns Type Description NpgsqlRange <T> The NpgsqlRange<T> represented by the value . Remarks See: https://www.postgresql.org/docs/current/static/rangetypes.html Exceptions Type Condition System.FormatException Malformed range literal. System.FormatException Malformed range literal. Missing left parenthesis or bracket. System.FormatException Malformed range literal. Missing right parenthesis or bracket. System.FormatException Malformed range literal. Missing comma after lower bound. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlRange<T>, NpgsqlRange<T>) Indicates whether the NpgsqlRange<T> on the left is equal to the NpgsqlRange<T> on the right. Declaration public static bool operator ==(NpgsqlRange<T> x, NpgsqlRange<T> y) Parameters Type Name Description NpgsqlRange <T> x The NpgsqlRange<T> on the left. NpgsqlRange <T> y The NpgsqlRange<T> on the right. Returns Type Description System.Boolean True if the NpgsqlRange<T> on the left is equal to the NpgsqlRange<T> on the right; otherwise, false. | Improve this Doc View Source Inequality(NpgsqlRange<T>, NpgsqlRange<T>) Indicates whether the NpgsqlRange<T> on the left is not equal to the NpgsqlRange<T> on the right. Declaration public static bool operator !=(NpgsqlRange<T> x, NpgsqlRange<T> y) Parameters Type Name Description NpgsqlRange <T> x The NpgsqlRange<T> on the left. NpgsqlRange <T> y The NpgsqlRange<T> on the right. Returns Type Description System.Boolean True if the NpgsqlRange<T> on the left is not equal to the NpgsqlRange<T> on the right; otherwise, false. Implements System.IEquatable<T>"
  },
  "doc/api/NpgsqlTypes.NpgsqlPath.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlPath.html",
    "title": "Struct NpgsqlPath | Npgsql Documentation",
    "keywords": "Struct NpgsqlPath Represents a PostgreSQL Path type. Implements System.Collections.Generic.IList < NpgsqlPoint > System.Collections.Generic.ICollection < NpgsqlPoint > System.Collections.Generic.IEnumerable < NpgsqlPoint > System.Collections.IEnumerable System.IEquatable < NpgsqlPath > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlPath : IList<NpgsqlPoint>, ICollection<NpgsqlPoint>, IEnumerable<NpgsqlPoint>, IEnumerable, IEquatable<NpgsqlPath> Constructors | Improve this Doc View Source NpgsqlPath(NpgsqlPoint[]) Declaration public NpgsqlPath(params NpgsqlPoint[] points) Parameters Type Name Description NpgsqlPoint [] points | Improve this Doc View Source NpgsqlPath(Boolean) Declaration public NpgsqlPath(bool open) Parameters Type Name Description System.Boolean open | Improve this Doc View Source NpgsqlPath(IEnumerable<NpgsqlPoint>) Declaration public NpgsqlPath(IEnumerable<NpgsqlPoint> points) Parameters Type Name Description System.Collections.Generic.IEnumerable < NpgsqlPoint > points | Improve this Doc View Source NpgsqlPath(IEnumerable<NpgsqlPoint>, Boolean) Declaration public NpgsqlPath(IEnumerable<NpgsqlPoint> points, bool open) Parameters Type Name Description System.Collections.Generic.IEnumerable < NpgsqlPoint > points System.Boolean open | Improve this Doc View Source NpgsqlPath(Int32) Declaration public NpgsqlPath(int capacity) Parameters Type Name Description System.Int32 capacity | Improve this Doc View Source NpgsqlPath(Int32, Boolean) Declaration public NpgsqlPath(int capacity, bool open) Parameters Type Name Description System.Int32 capacity System.Boolean open Properties | Improve this Doc View Source Capacity Declaration public int Capacity { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Declaration public NpgsqlPoint this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description NpgsqlPoint | Improve this Doc View Source Open Declaration public bool Open { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Add(NpgsqlPoint) Declaration public void Add(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(NpgsqlPoint) Declaration public bool Contains(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(NpgsqlPoint[], Int32) Declaration public void CopyTo(NpgsqlPoint[] array, int arrayIndex) Parameters Type Name Description NpgsqlPoint [] array System.Int32 arrayIndex | Improve this Doc View Source Equals(NpgsqlPath) Declaration public bool Equals(NpgsqlPath other) Parameters Type Name Description NpgsqlPath other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<NpgsqlPoint> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < NpgsqlPoint > | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source IndexOf(NpgsqlPoint) Declaration public int IndexOf(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description System.Int32 | Improve this Doc View Source Insert(Int32, NpgsqlPoint) Declaration public void Insert(int index, NpgsqlPoint item) Parameters Type Name Description System.Int32 index NpgsqlPoint item | Improve this Doc View Source Parse(String) Declaration public static NpgsqlPath Parse(string s) Parameters Type Name Description System.String s Returns Type Description NpgsqlPath | Improve this Doc View Source Remove(NpgsqlPoint) Declaration public bool Remove(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description System.Boolean | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlPath, NpgsqlPath) Declaration public static bool operator ==(NpgsqlPath x, NpgsqlPath y) Parameters Type Name Description NpgsqlPath x NpgsqlPath y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlPath, NpgsqlPath) Declaration public static bool operator !=(NpgsqlPath x, NpgsqlPath y) Parameters Type Name Description NpgsqlPath x NpgsqlPath y Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.IEquatable<T>"
  },
  "doc/api/Npgsql.NpgsqlParameter-1.html": {
    "href": "doc/api/Npgsql.NpgsqlParameter-1.html",
    "title": "Class NpgsqlParameter<T> | Npgsql Documentation",
    "keywords": "Class NpgsqlParameter<T> A generic version of NpgsqlParameter which provides more type safety and avoids boxing of value types. Use TypedValue instead of Value . Inheritance System.Object System.MarshalByRefObject System.Data.Common.DbParameter NpgsqlParameter NpgsqlParameter<T> Implements System.Data.IDbDataParameter System.Data.IDataParameter System.ICloneable Inherited Members NpgsqlParameter.ConvertedValue NpgsqlParameter.ParameterName NpgsqlParameter.NpgsqlValue NpgsqlParameter.DbType NpgsqlParameter.NpgsqlDbType NpgsqlParameter.DataTypeName NpgsqlParameter.IsNullable NpgsqlParameter.Direction NpgsqlParameter.Precision NpgsqlParameter.Scale NpgsqlParameter.Size NpgsqlParameter.SourceColumn NpgsqlParameter.SourceVersion NpgsqlParameter.SourceColumnNullMapping NpgsqlParameter.Collection NpgsqlParameter.PostgresType NpgsqlParameter.ResetDbType() NpgsqlParameter.Clone() NpgsqlParameter.ICloneable.Clone() System.Data.Common.DbParameter.System.Data.IDbDataParameter.Precision System.Data.Common.DbParameter.System.Data.IDbDataParameter.Scale System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlParameter<T> : NpgsqlParameter, IDbDataParameter, IDataParameter, ICloneable Type Parameters Name Description T The type of the value that will be stored in the parameter. Constructors | Improve this Doc View Source NpgsqlParameter() Initializes a new instance of NpgsqlParameter<T> . Declaration public NpgsqlParameter() | Improve this Doc View Source NpgsqlParameter(String, T) Initializes a new instance of NpgsqlParameter<T> with a parameter name and value. Declaration public NpgsqlParameter(string parameterName, T value) Parameters Type Name Description System.String parameterName T value | Improve this Doc View Source NpgsqlParameter(String, NpgsqlDbType) Initializes a new instance of NpgsqlParameter<T> with a parameter name and type. Declaration public NpgsqlParameter(string parameterName, NpgsqlDbType npgsqlDbType) Parameters Type Name Description System.String parameterName NpgsqlDbType npgsqlDbType | Improve this Doc View Source NpgsqlParameter(String, DbType) Initializes a new instance of NpgsqlParameter<T> with a parameter name and type. Declaration public NpgsqlParameter(string parameterName, DbType dbType) Parameters Type Name Description System.String parameterName System.Data.DbType dbType Properties | Improve this Doc View Source TypedValue Gets or sets the strongly-typed value of the parameter. Declaration public T TypedValue { get; set; } Property Value Type Description T | Improve this Doc View Source Value Gets or sets the value of the parameter. This delegates to TypedValue . Declaration public override object Value { get; set; } Property Value Type Description System.Object Overrides NpgsqlParameter.Value Implements System.Data.IDbDataParameter System.Data.IDataParameter System.ICloneable"
  },
  "doc/api/Npgsql.NodaTime.IntervalHandlerFactory.html": {
    "href": "doc/api/Npgsql.NodaTime.IntervalHandlerFactory.html",
    "title": "Class IntervalHandlerFactory | Npgsql Documentation",
    "keywords": "Class IntervalHandlerFactory Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < Period > IntervalHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<Period>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<Period>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.NodaTime Assembly : Npgsql.NodaTime.dll Syntax public class IntervalHandlerFactory : NpgsqlTypeHandlerFactory<Period> Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<Period> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < Period > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<Period>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.BackendMessages.html": {
    "href": "doc/api/Npgsql.BackendMessages.html",
    "title": "Namespace Npgsql.BackendMessages | Npgsql Documentation",
    "keywords": "Namespace Npgsql.BackendMessages Classes FieldDescription A descriptive record on a single field received from PostgreSQL. See RowDescription in http://www.postgresql.org/docs/current/static/protocol-message-formats.html"
  },
  "doc/api/Npgsql.TypeHandlers.NumericHandlers.Int64Handler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.NumericHandlers.Int64Handler.html",
    "title": "Class Int64Handler | Npgsql Documentation",
    "keywords": "Class Int64Handler A type handler for the PostgreSQL bigint data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.Int64 > NpgsqlSimpleTypeHandler < System.Int64 > Int64Handler Implements INpgsqlTypeHandler < System.Int64 > INpgsqlSimpleTypeHandler < System.Int64 > INpgsqlSimpleTypeHandler < System.Byte > INpgsqlSimpleTypeHandler < System.Int16 > INpgsqlSimpleTypeHandler < System.Int32 > INpgsqlSimpleTypeHandler < System.Single > INpgsqlSimpleTypeHandler < System.Double > INpgsqlSimpleTypeHandler < System.Decimal > Inherited Members NpgsqlSimpleTypeHandler<Int64>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Int64>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Int64>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Int64>.Write(Int64, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<Int64>.ValidateAndGetLength(Int64, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Int64>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Int64>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Int64>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Int64>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<Int64>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class Int64Handler : NpgsqlSimpleTypeHandler<long>, INpgsqlTypeHandler<long>, INpgsqlSimpleTypeHandler<long>, INpgsqlSimpleTypeHandler<byte>, INpgsqlSimpleTypeHandler<short>, INpgsqlSimpleTypeHandler<int>, INpgsqlSimpleTypeHandler<float>, INpgsqlSimpleTypeHandler<double>, INpgsqlSimpleTypeHandler<decimal> Remarks See http://www.postgresql.org/docs/current/static/datatype-numeric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source Int64Handler(PostgresType) Declaration public Int64Handler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override long Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Int64 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Int64>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Byte, NpgsqlParameter) Declaration public int ValidateAndGetLength(byte value, NpgsqlParameter parameter) Parameters Type Name Description System.Byte value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Decimal, NpgsqlParameter) Declaration public int ValidateAndGetLength(decimal value, NpgsqlParameter parameter) Parameters Type Name Description System.Decimal value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Double, NpgsqlParameter) Declaration public int ValidateAndGetLength(double value, NpgsqlParameter parameter) Parameters Type Name Description System.Double value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Int16, NpgsqlParameter) Declaration public int ValidateAndGetLength(short value, NpgsqlParameter parameter) Parameters Type Name Description System.Int16 value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Int32, NpgsqlParameter) Declaration public int ValidateAndGetLength(int value, NpgsqlParameter parameter) Parameters Type Name Description System.Int32 value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Int64, NpgsqlParameter) Declaration public override int ValidateAndGetLength(long value, NpgsqlParameter parameter) Parameters Type Name Description System.Int64 value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Int64>.ValidateAndGetLength(System.Int64, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(Single, NpgsqlParameter) Declaration public int ValidateAndGetLength(float value, NpgsqlParameter parameter) Parameters Type Name Description System.Single value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source Write(Byte, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(byte value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Byte value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Decimal, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(decimal value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Decimal value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Double, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(double value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Double value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Int16, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(short value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Int16 value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Int32, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(int value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Int32 value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Int64, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Int64 value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Int64>.Write(System.Int64, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Single, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(float value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Single value NpgsqlWriteBuffer buf NpgsqlParameter parameter Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<Byte>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration byte INpgsqlSimpleTypeHandler<byte>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Byte | Improve this Doc View Source INpgsqlSimpleTypeHandler<Decimal>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration decimal INpgsqlSimpleTypeHandler<decimal>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Decimal | Improve this Doc View Source INpgsqlSimpleTypeHandler<Double>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration double INpgsqlSimpleTypeHandler<double>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Double | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int16>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration short INpgsqlSimpleTypeHandler<short>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Int16 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int32>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration int INpgsqlSimpleTypeHandler<int>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Int32 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Single>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration float INpgsqlSimpleTypeHandler<float>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Single Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.PostgresNotice.html": {
    "href": "doc/api/Npgsql.PostgresNotice.html",
    "title": "Class PostgresNotice | Npgsql Documentation",
    "keywords": "Class PostgresNotice PostgreSQL notices are non-critical messages generated by PostgreSQL, either as a result of a user query (e.g. as a warning or informational notice), or due to outside activity (e.g. if the database administrator initiates a \"fast\" database shutdown). Inheritance System.Object PostgresNotice Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class PostgresNotice Remarks http://www.postgresql.org/docs/current/static/protocol-flow.html#PROTOCOL-ASYNC Constructors | Improve this Doc View Source PostgresNotice() Creates a new instance. Declaration [Obsolete] public PostgresNotice() Remarks Exists for backwards compat with 4.0, has been removed for 5.0. | Improve this Doc View Source PostgresNotice(String, String, String, String) Creates a new instance. Declaration public PostgresNotice(string severity, string invariantSeverity, string sqlState, string messageText) Parameters Type Name Description System.String severity System.String invariantSeverity System.String sqlState System.String messageText Properties | Improve this Doc View Source Code The SQLSTATE code for the error. Declaration [Obsolete(\"Use SqlState instead\")] public string Code { get; } Property Value Type Description System.String Remarks Always present. See http://www.postgresql.org/docs/current/static/errcodes-appendix.html | Improve this Doc View Source ColumnName If the error was associated with a specific table column, the name of the column. (Refer to the schema and table name fields to identify the table.) Declaration public string ColumnName { get; set; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source ConstraintName If the error was associated with a specific constraint, the name of the constraint. Refer to fields listed above for the associated table or domain. (For this purpose, indexes are treated as constraints, even if they weren't created with constraint syntax.) Declaration public string ConstraintName { get; set; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source DataTypeName If the error was associated with a specific data type, the name of the data type. (Refer to the schema name field for the name of the data type's schema.) Declaration public string DataTypeName { get; set; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Detail An optional secondary error message carrying more detail about the problem. May run to multiple lines. Declaration public string Detail { get; set; } Property Value Type Description System.String | Improve this Doc View Source File The file name of the source-code location where the error was reported. Declaration public string File { get; set; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Hint An optional suggestion what to do about the problem. This is intended to differ from Detail in that it offers advice (potentially inappropriate) rather than hard facts. May run to multiple lines. Declaration public string Hint { get; set; } Property Value Type Description System.String | Improve this Doc View Source InternalPosition This is defined the same as the Position field, but it is used when the cursor position refers to an internally generated command rather than the one submitted by the client. The InternalQuery field will always appear when this field appears. 0 means not provided. Declaration public int InternalPosition { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source InternalQuery The text of a failed internally-generated command. This could be, for example, a SQL query issued by a PL/pgSQL function. Declaration public string InternalQuery { get; set; } Property Value Type Description System.String | Improve this Doc View Source InvariantSeverity Severity of the error or notice, not localized. Always present since PostgreSQL 9.6. Declaration public string InvariantSeverity { get; } Property Value Type Description System.String | Improve this Doc View Source Line The line number of the source-code location where the error was reported. Declaration public string Line { get; set; } Property Value Type Description System.String | Improve this Doc View Source MessageText The primary human-readable error message. This should be accurate but terse. Declaration public string MessageText { get; set; } Property Value Type Description System.String Remarks Always present. | Improve this Doc View Source Position The field value is a decimal ASCII integer, indicating an error cursor position as an index into the original query string. The first character has index 1, and positions are measured in characters not bytes. 0 means not provided. Declaration public int Position { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Routine The name of the source-code routine reporting the error. Declaration public string Routine { get; set; } Property Value Type Description System.String | Improve this Doc View Source SchemaName If the error was associated with a specific database object, the name of the schema containing that object, if any. Declaration public string SchemaName { get; set; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Severity Severity of the error or notice. Always present. Declaration public string Severity { get; set; } Property Value Type Description System.String | Improve this Doc View Source SqlState The SQLSTATE code for the error. Declaration public string SqlState { get; set; } Property Value Type Description System.String Remarks Always present. See http://www.postgresql.org/docs/current/static/errcodes-appendix.html | Improve this Doc View Source TableName Table name: if the error was associated with a specific table, the name of the table. (Refer to the schema name field for the name of the table's schema.) Declaration public string TableName { get; set; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Where An indication of the context in which the error occurred. Presently this includes a call stack traceback of active PL functions. The trace is one entry per line, most recent first. Declaration public string Where { get; set; } Property Value Type Description System.String"
  },
  "doc/api/Npgsql.NameTranslation.NpgsqlNullNameTranslator.html": {
    "href": "doc/api/Npgsql.NameTranslation.NpgsqlNullNameTranslator.html",
    "title": "Class NpgsqlNullNameTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNullNameTranslator A name translator which preserves CLR names (e.g. SomeClass) when mapping names to the database. Inheritance System.Object NpgsqlNullNameTranslator Implements INpgsqlNameTranslator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.NameTranslation Assembly : Npgsql.dll Syntax public class NpgsqlNullNameTranslator : INpgsqlNameTranslator Methods | Improve this Doc View Source TranslateMemberName(String) Given a CLR member name (property or field), translates its name to a database type name. Declaration public string TranslateMemberName(string clrName) Parameters Type Name Description System.String clrName Returns Type Description System.String | Improve this Doc View Source TranslateTypeName(String) Given a CLR type name (e.g class, struct, enum), translates its name to a database type name. Declaration public string TranslateTypeName(string clrName) Parameters Type Name Description System.String clrName Returns Type Description System.String Implements INpgsqlNameTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.CockroachDbInterleaveInParent.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.CockroachDbInterleaveInParent.html",
    "title": "Class CockroachDbInterleaveInParent | Npgsql Documentation",
    "keywords": "Class CockroachDbInterleaveInParent Inheritance System.Object CockroachDbInterleaveInParent Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class CockroachDbInterleaveInParent Constructors | Improve this Doc View Source CockroachDbInterleaveInParent(IAnnotatable) Declaration public CockroachDbInterleaveInParent(IAnnotatable annotatable) Parameters Type Name Description IAnnotatable annotatable Properties | Improve this Doc View Source Annotatable Declaration public Annotatable Annotatable { get; } Property Value Type Description Annotatable | Improve this Doc View Source InterleavePrefix Declaration public List<string> InterleavePrefix { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source ParentTableName Declaration public string ParentTableName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ParentTableSchema Declaration public string ParentTableSchema { get; set; } Property Value Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL Classes NpgsqlRetryingExecutionStrategy"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal.NpgsqlLoggingDefinitions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal.NpgsqlLoggingDefinitions.html",
    "title": "Class NpgsqlLoggingDefinitions | Npgsql Documentation",
    "keywords": "Class NpgsqlLoggingDefinitions Inheritance System.Object NpgsqlLoggingDefinitions Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Diagnostics.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlLoggingDefinitions : RelationalLoggingDefinitions Fields | Improve this Doc View Source LogEnumColumnSkipped Declaration public EventDefinitionBase LogEnumColumnSkipped Field Value Type Description EventDefinitionBase | Improve this Doc View Source LogExpressionIndexSkipped Declaration public EventDefinitionBase LogExpressionIndexSkipped Field Value Type Description EventDefinitionBase | Improve this Doc View Source LogFoundColumn Declaration public EventDefinitionBase LogFoundColumn Field Value Type Description EventDefinitionBase | Improve this Doc View Source LogFoundDefaultSchema Declaration public EventDefinitionBase LogFoundDefaultSchema Field Value Type Description EventDefinitionBase | Improve this Doc View Source LogFoundForeignKey Declaration public EventDefinitionBase LogFoundForeignKey Field Value Type Description EventDefinitionBase | Improve this Doc View Source LogFoundIndex Declaration public EventDefinitionBase LogFoundIndex Field Value Type Description EventDefinitionBase | Improve this Doc View Source LogFoundPrimaryKey Declaration public EventDefinitionBase LogFoundPrimaryKey Field Value Type Description EventDefinitionBase | Improve this Doc View Source LogFoundSequence Declaration public EventDefinitionBase LogFoundSequence Field Value Type Description EventDefinitionBase | Improve this Doc View Source LogFoundTable Declaration public EventDefinitionBase LogFoundTable Field Value Type Description EventDefinitionBase | Improve this Doc View Source LogFoundUniqueConstraint Declaration public EventDefinitionBase LogFoundUniqueConstraint Field Value Type Description EventDefinitionBase | Improve this Doc View Source LogMissingSchema Declaration public EventDefinitionBase LogMissingSchema Field Value Type Description EventDefinitionBase | Improve this Doc View Source LogMissingTable Declaration public EventDefinitionBase LogMissingTable Field Value Type Description EventDefinitionBase | Improve this Doc View Source LogPrincipalColumnNotFound Declaration public EventDefinitionBase LogPrincipalColumnNotFound Field Value Type Description EventDefinitionBase | Improve this Doc View Source LogPrincipalTableNotInSelectionSet Declaration public EventDefinitionBase LogPrincipalTableNotInSelectionSet Field Value Type Description EventDefinitionBase | Improve this Doc View Source LogUnsupportedColumnConstraintSkipped Declaration public EventDefinitionBase LogUnsupportedColumnConstraintSkipped Field Value Type Description EventDefinitionBase | Improve this Doc View Source LogUnsupportedColumnIndexSkipped Declaration public EventDefinitionBase LogUnsupportedColumnIndexSkipped Field Value Type Description EventDefinitionBase"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDbContextOptionsExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlDbContextOptionsExtensions.html",
    "title": "Class NpgsqlDbContextOptionsExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlDbContextOptionsExtensions Provides extension methods on and used to configure a to context to a PostgreSQL database with Npgsql. Inheritance System.Object NpgsqlDbContextOptionsExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlDbContextOptionsExtensions Methods | Improve this Doc View Source UseNpgsql(DbContextOptionsBuilder, DbConnection, Action<NpgsqlDbContextOptionsBuilder>) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder UseNpgsql(this DbContextOptionsBuilder optionsBuilder, DbConnection connection, Action<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction = null) Parameters Type Name Description DbContextOptionsBuilder optionsBuilder A builder for setting options on the context. System.Data.Common.DbConnection connection An existing System.Data.Common.DbConnection to be used to connect to the database. If the connection is in the open state then EF will not open or close the connection. If the connection is in the closed state then EF will open and close the connection as needed. System.Action < NpgsqlDbContextOptionsBuilder > npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder The options builder so that further configuration can be chained. | Improve this Doc View Source UseNpgsql(DbContextOptionsBuilder, String, Action<NpgsqlDbContextOptionsBuilder>) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder UseNpgsql(this DbContextOptionsBuilder optionsBuilder, string connectionString, Action<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction = null) Parameters Type Name Description DbContextOptionsBuilder optionsBuilder A builder for setting options on the context. System.String connectionString The connection string of the database to connect to. System.Action < NpgsqlDbContextOptionsBuilder > npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder The options builder so that further configuration can be chained. | Improve this Doc View Source UseNpgsql<TContext>(DbContextOptionsBuilder<TContext>, DbConnection, Action<NpgsqlDbContextOptionsBuilder>) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder<TContext> UseNpgsql<TContext>(this DbContextOptionsBuilder<TContext> optionsBuilder, DbConnection connection, Action<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction = null) where TContext : DbContext Parameters Type Name Description DbContextOptionsBuilder <TContext> optionsBuilder A builder for setting options on the context. System.Data.Common.DbConnection connection An existing System.Data.Common.DbConnection to be used to connect to the database. If the connection is in the open state then EF will not open or close the connection. If the connection is in the closed state then EF will open and close the connection as needed. System.Action < NpgsqlDbContextOptionsBuilder > npgsqlOptionsAction An optional action to allow additional Npgsql-specific configuration. Returns Type Description DbContextOptionsBuilder <TContext> The options builder so that further configuration can be chained. Type Parameters Name Description TContext | Improve this Doc View Source UseNpgsql<TContext>(DbContextOptionsBuilder<TContext>, String, Action<NpgsqlDbContextOptionsBuilder>) Configures the context to connect to a PostgreSQL database with Npgsql. Declaration public static DbContextOptionsBuilder<TContext> UseNpgsql<TContext>(this DbContextOptionsBuilder<TContext> optionsBuilder, string connectionString, Action<NpgsqlDbContextOptionsBuilder> npgsqlOptionsAction = null) where TContext : DbContext Parameters Type Name Description DbContextOptionsBuilder <TContext> optionsBuilder A builder for setting options on the context. System.String connectionString The connection string of the database to connect to. System.Action < NpgsqlDbContextOptionsBuilder > npgsqlOptionsAction An optional action to allow additional Npgsql-configuration. Returns Type Description DbContextOptionsBuilder <TContext> The options builder so that further configuration can be chained. Type Parameters Name Description TContext"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NpgsqlRetryingExecutionStrategy.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NpgsqlRetryingExecutionStrategy.html",
    "title": "Class NpgsqlRetryingExecutionStrategy | Npgsql Documentation",
    "keywords": "Class NpgsqlRetryingExecutionStrategy Inheritance System.Object NpgsqlRetryingExecutionStrategy Namespace : Npgsql.EntityFrameworkCore.PostgreSQL Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRetryingExecutionStrategy : ExecutionStrategy Constructors | Improve this Doc View Source NpgsqlRetryingExecutionStrategy(DbContext) Creates a new instance of NpgsqlRetryingExecutionStrategy . Declaration public NpgsqlRetryingExecutionStrategy(DbContext context) Parameters Type Name Description DbContext context The context on which the operations will be invoked. Remarks The default retry limit is 6, which means that the total amount of time spent before failing is about a minute. | Improve this Doc View Source NpgsqlRetryingExecutionStrategy(DbContext, Int32) Creates a new instance of NpgsqlRetryingExecutionStrategy . Declaration public NpgsqlRetryingExecutionStrategy(DbContext context, int maxRetryCount) Parameters Type Name Description DbContext context The context on which the operations will be invoked. System.Int32 maxRetryCount The maximum number of retry attempts. | Improve this Doc View Source NpgsqlRetryingExecutionStrategy(DbContext, Int32, TimeSpan, ICollection<String>) Creates a new instance of NpgsqlRetryingExecutionStrategy . Declaration public NpgsqlRetryingExecutionStrategy(DbContext context, int maxRetryCount, TimeSpan maxRetryDelay, ICollection<string> errorCodesToAdd) Parameters Type Name Description DbContext context The context on which the operations will be invoked. System.Int32 maxRetryCount The maximum number of retry attempts. System.TimeSpan maxRetryDelay The maximum delay between retries. System.Collections.Generic.ICollection < System.String > errorCodesToAdd Additional error codes that should be considered transient. | Improve this Doc View Source NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies) Creates a new instance of NpgsqlRetryingExecutionStrategy . Declaration public NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies) Parameters Type Name Description ExecutionStrategyDependencies dependencies Parameter object containing service dependencies. | Improve this Doc View Source NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies, Int32) Creates a new instance of NpgsqlRetryingExecutionStrategy . Declaration public NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount) Parameters Type Name Description ExecutionStrategyDependencies dependencies Parameter object containing service dependencies. System.Int32 maxRetryCount The maximum number of retry attempts. | Improve this Doc View Source NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies, Int32, TimeSpan, ICollection<String>) Creates a new instance of NpgsqlRetryingExecutionStrategy . Declaration public NpgsqlRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount, TimeSpan maxRetryDelay, ICollection<string> errorCodesToAdd) Parameters Type Name Description ExecutionStrategyDependencies dependencies Parameter object containing service dependencies. System.Int32 maxRetryCount The maximum number of retry attempts. System.TimeSpan maxRetryDelay The maximum delay between retries. System.Collections.Generic.ICollection < System.String > errorCodesToAdd Additional SQL error numbers that should be considered transient. Methods | Improve this Doc View Source ShouldRetryOn(Exception) Declaration protected override bool ShouldRetryOn(Exception exception) Parameters Type Name Description System.Exception exception Returns Type Description System.Boolean"
  },
  "doc/api/Npgsql.NpgsqlLargeObjectStream.html": {
    "href": "doc/api/Npgsql.NpgsqlLargeObjectStream.html",
    "title": "Class NpgsqlLargeObjectStream | Npgsql Documentation",
    "keywords": "Class NpgsqlLargeObjectStream An interface to remotely control the seekable stream for an opened large object on a PostgreSQL server. Note that the OpenRead/OpenReadWrite method as well as all operations performed on this stream must be wrapped inside a database transaction. Inheritance System.Object System.MarshalByRefObject System.IO.Stream NpgsqlLargeObjectStream Implements System.IAsyncDisposable System.IDisposable Inherited Members System.IO.Stream.Null System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.CopyTo(System.IO.Stream) System.IO.Stream.CopyTo(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Threading.CancellationToken) System.IO.Stream.CreateWaitHandle() System.IO.Stream.Dispose() System.IO.Stream.DisposeAsync() System.IO.Stream.EndRead(System.IAsyncResult) System.IO.Stream.EndWrite(System.IAsyncResult) System.IO.Stream.FlushAsync() System.IO.Stream.FlushAsync(System.Threading.CancellationToken) System.IO.Stream.ObjectInvariant() System.IO.Stream.Read(System.Span<System.Byte>) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ReadAsync(System.Memory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.ReadByte() System.IO.Stream.Synchronized(System.IO.Stream) System.IO.Stream.Write(System.ReadOnlySpan<System.Byte>) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.WriteAsync(System.ReadOnlyMemory<System.Byte>, System.Threading.CancellationToken) System.IO.Stream.WriteByte(System.Byte) System.IO.Stream.ReadTimeout System.IO.Stream.WriteTimeout System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlLargeObjectStream : Stream, IAsyncDisposable, IDisposable Properties | Improve this Doc View Source CanRead CanRead always returns true, unless the stream has been closed. Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanRead | Improve this Doc View Source CanSeek CanSeek always returns true, unless the stream has been closed. Declaration public override bool CanSeek { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanSeek | Improve this Doc View Source CanTimeout CanTimeout always returns false. Declaration public override bool CanTimeout { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanTimeout | Improve this Doc View Source CanWrite CanWrite returns true if the stream was opened with write permissions, and the stream has not been closed. Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanWrite | Improve this Doc View Source Has64BitSupport Since PostgreSQL 9.3, large objects larger than 2GB can be handled, up to 4TB. This property returns true whether the PostgreSQL version is >= 9.3. Declaration public bool Has64BitSupport { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Length Gets the length of the large object. This internally seeks to the end of the stream to retrieve the length, and then back again. Declaration public override long Length { get; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Length | Improve this Doc View Source Position Returns the current position in the stream. Getting the current position does not need a round-trip to the server, however setting the current position does. Declaration public override long Position { get; set; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Position Methods | Improve this Doc View Source Close() Releases resources at the backend allocated for this stream. Declaration public override void Close() Overrides System.IO.Stream.Close() | Improve this Doc View Source Dispose(Boolean) Releases resources at the backend allocated for this stream, iff disposing is true. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Whether to release resources allocated at the backend. Overrides System.IO.Stream.Dispose(System.Boolean) | Improve this Doc View Source Flush() Does nothing. Declaration public override void Flush() Overrides System.IO.Stream.Flush() | Improve this Doc View Source GetLengthAsync() Gets the length of the large object. This internally seeks to the end of the stream to retrieve the length, and then back again. Declaration public Task<long> GetLengthAsync() Returns Type Description System.Threading.Tasks.Task < System.Int64 > | Improve this Doc View Source GetLengthAsync(CancellationToken) Gets the length of the large object. This internally seeks to the end of the stream to retrieve the length, and then back again. Declaration public Task<long> GetLengthAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task < System.Int64 > | Improve this Doc View Source Read(Byte[], Int32, Int32) Reads count bytes from the large object. The only case when fewer bytes are read is when end of stream is reached. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer The buffer where read data should be stored. System.Int32 offset The offset in the buffer where the first byte should be read. System.Int32 count The maximum number of bytes that should be read. Returns Type Description System.Int32 How many bytes actually read, or 0 if end of file was already reached. Overrides System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32) | Improve this Doc View Source ReadAsync(Byte[], Int32, Int32, CancellationToken) Reads count bytes from the large object. The only case when fewer bytes are read is when end of stream is reached. Declaration public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description System.Byte [] buffer The buffer where read data should be stored. System.Int32 offset The offset in the buffer where the first byte should be read. System.Int32 count The maximum number of bytes that should be read. System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task < System.Int32 > How many bytes actually read, or 0 if end of file was already reached. Overrides System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) | Improve this Doc View Source Seek(Int64, SeekOrigin) Seeks in the stream to the specified position. This requires a round-trip to the backend. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description System.Int64 offset A byte offset relative to the origin parameter. System.IO.SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description System.Int64 Overrides System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin) | Improve this Doc View Source SeekAsync(Int64, SeekOrigin, CancellationToken) Seeks in the stream to the specified position. This requires a round-trip to the backend. Declaration public Task<long> SeekAsync(long offset, SeekOrigin origin, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Int64 offset A byte offset relative to the origin parameter. System.IO.SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task < System.Int64 > | Improve this Doc View Source SetLength(Int64) Truncates or enlarges the large object to the given size. If enlarging, the large object is extended with null bytes. For PostgreSQL versions earlier than 9.3, the value must fit in an Int32. Declaration public override void SetLength(long value) Parameters Type Name Description System.Int64 value Number of bytes to either truncate or enlarge the large object. Overrides System.IO.Stream.SetLength(System.Int64) | Improve this Doc View Source SetLength(Int64, CancellationToken) Truncates or enlarges the large object to the given size. If enlarging, the large object is extended with null bytes. For PostgreSQL versions earlier than 9.3, the value must fit in an Int32. Declaration public Task SetLength(long value, CancellationToken cancellationToken) Parameters Type Name Description System.Int64 value Number of bytes to either truncate or enlarge the large object. System.Threading.CancellationToken cancellationToken Cancellation token. Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write(Byte[], Int32, Int32) Writes count bytes to the large object. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer The buffer to write data from. System.Int32 offset The offset in the buffer at which to begin copying bytes. System.Int32 count The number of bytes to write. Overrides System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32) | Improve this Doc View Source WriteAsync(Byte[], Int32, Int32, CancellationToken) Writes count bytes to the large object. Declaration public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description System.Byte [] buffer The buffer to write data from. System.Int32 offset The offset in the buffer at which to begin copying bytes. System.Int32 count The number of bytes to write. System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None . Returns Type Description System.Threading.Tasks.Task Overrides System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) Implements System.IAsyncDisposable System.IDisposable"
  },
  "doc/api/Npgsql.NpgsqlConnectionStringBuilder.html": {
    "href": "doc/api/Npgsql.NpgsqlConnectionStringBuilder.html",
    "title": "Class NpgsqlConnectionStringBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlConnectionStringBuilder Provides a simple way to create and manage the contents of connection strings used by the NpgsqlConnection class. Inheritance System.Object System.Data.Common.DbConnectionStringBuilder NpgsqlConnectionStringBuilder Implements System.Collections.IDictionary System.Collections.ICollection System.ComponentModel.ICustomTypeDescriptor System.Collections.Generic.IDictionary < System.String , System.Object > System.Collections.Generic.ICollection < System.Collections.Generic.KeyValuePair < System.String , System.Object >> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.String , System.Object >> System.Collections.IEnumerable Inherited Members System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.get_Item(System.Object) System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.set_Item(System.Object, System.Object) System.Data.Common.DbConnectionStringBuilder.Add(System.String, System.Object) System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder, System.String, System.String) System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder, System.String, System.String, System.Boolean) System.Data.Common.DbConnectionStringBuilder.ClearPropertyDescriptors() System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder) System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String) System.Data.Common.DbConnectionStringBuilder.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.Add(System.Object, System.Object) System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.Contains(System.Object) System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.GetEnumerator() System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.Remove(System.Object) System.Data.Common.DbConnectionStringBuilder.System.Collections.IEnumerable.GetEnumerator() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetAttributes() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetClassName() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetComponentName() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetConverter() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type) System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetEvents() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[]) System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetProperties() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[]) System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor) System.Data.Common.DbConnectionStringBuilder.ToString() System.Data.Common.DbConnectionStringBuilder.ConnectionString System.Data.Common.DbConnectionStringBuilder.Count System.Data.Common.DbConnectionStringBuilder.IsFixedSize System.Data.Common.DbConnectionStringBuilder.IsReadOnly System.Data.Common.DbConnectionStringBuilder.System.Collections.ICollection.IsSynchronized System.Data.Common.DbConnectionStringBuilder.System.Collections.ICollection.SyncRoot System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.Item[System.Object] System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlConnectionStringBuilder : DbConnectionStringBuilder, IDictionary, ICollection, ICustomTypeDescriptor, IDictionary<string, object>, ICollection<KeyValuePair<string, object>>, IEnumerable<KeyValuePair<string, object>>, IEnumerable Constructors | Improve this Doc View Source NpgsqlConnectionStringBuilder() Initializes a new instance of the NpgsqlConnectionStringBuilder class. Declaration public NpgsqlConnectionStringBuilder() | Improve this Doc View Source NpgsqlConnectionStringBuilder(Boolean) Initializes a new instance of the NpgsqlConnectionStringBuilder class, optionally using ODBC rules for quoting values. Declaration public NpgsqlConnectionStringBuilder(bool useOdbcRules) Parameters Type Name Description System.Boolean useOdbcRules true to use {} to delimit fields; false to use quotation marks. | Improve this Doc View Source NpgsqlConnectionStringBuilder(String) Initializes a new instance of the NpgsqlConnectionStringBuilder class and sets its System.Data.Common.DbConnectionStringBuilder.ConnectionString . Declaration public NpgsqlConnectionStringBuilder(string connectionString) Parameters Type Name Description System.String connectionString Properties | Improve this Doc View Source ApplicationName The optional application name parameter to be sent to the backend during connection initiation. Declaration [NpgsqlConnectionStringProperty] public string ApplicationName { get; set; } Property Value Type Description System.String | Improve this Doc View Source AutoPrepareMinUsages The minimum number of usages an SQL statement is used before it's automatically prepared. Defaults to 5. Declaration [NpgsqlConnectionStringProperty] public int AutoPrepareMinUsages { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source BackendTimeouts Obsolete, see https://www.npgsql.org/doc/release-notes/3.1.html Declaration [NpgsqlConnectionStringProperty] [Obsolete(\"The BackendTimeouts parameter is no longer supported\")] public bool BackendTimeouts { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source CheckCertificateRevocation Whether to check the certificate revocation list during authentication. False by default. Declaration [NpgsqlConnectionStringProperty] public bool CheckCertificateRevocation { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ClientCertificate Location of a client certificate to be sent to the server. Declaration [NpgsqlConnectionStringProperty] public string ClientCertificate { get; set; } Property Value Type Description System.String | Improve this Doc View Source ClientEncoding Gets or sets the client_encoding parameter. Declaration [NpgsqlConnectionStringProperty] public string ClientEncoding { get; set; } Property Value Type Description System.String | Improve this Doc View Source CommandTimeout The time to wait (in seconds) while trying to execute a command before terminating the attempt and generating an error. Defaults to 30 seconds. Declaration [NpgsqlConnectionStringProperty] public int CommandTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ConnectionIdleLifetime The time to wait before closing idle connections in the pool if the count of all connections exceeds MinPoolSize. Declaration [NpgsqlConnectionStringProperty] public int ConnectionIdleLifetime { get; set; } Property Value Type Description System.Int32 The time (in seconds) to wait. The default value is 300. | Improve this Doc View Source ConnectionLifeTime Obsolete, see https://www.npgsql.org/doc/release-notes/3.1.html Declaration [NpgsqlConnectionStringProperty] [Obsolete(\"The ConnectionLifeTime parameter is no longer supported\")] public int ConnectionLifeTime { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ConnectionPruningInterval How many seconds the pool waits before attempting to prune idle connections that are beyond idle lifetime ( ConnectionIdleLifetime . Declaration [NpgsqlConnectionStringProperty] public int ConnectionPruningInterval { get; set; } Property Value Type Description System.Int32 The interval (in seconds). The default value is 10. | Improve this Doc View Source ContinuousProcessing Obsolete, see https://www.npgsql.org/doc/release-notes/3.1.html Declaration [NpgsqlConnectionStringProperty] [Obsolete(\"The ContinuousProcessing parameter is no longer supported.\")] public bool ContinuousProcessing { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ConvertInfinityDateTime Makes MaxValue and MinValue timestamps and dates readable as infinity and negative infinity. Declaration [NpgsqlConnectionStringProperty] public bool ConvertInfinityDateTime { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Database The PostgreSQL database to connect to. Declaration [NpgsqlConnectionStringProperty(new string[]{\"DB\"})] public string Database { get; set; } Property Value Type Description System.String | Improve this Doc View Source Encoding Gets or sets the .NET encoding that will be used to encode/decode PostgreSQL string data. Declaration [NpgsqlConnectionStringProperty] public string Encoding { get; set; } Property Value Type Description System.String | Improve this Doc View Source Enlist Whether to enlist in an ambient TransactionScope. Declaration [NpgsqlConnectionStringProperty] public bool Enlist { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source EntityAdminDatabase The database admin to specify when creating and dropping a database in Entity Framework. This is needed because Npgsql needs to connect to a database in order to send the create/drop database command. If not specified, defaults to \"template1\". Check NpgsqlServices.UsingPostgresDBConnection for more information. Declaration [NpgsqlConnectionStringProperty] public string EntityAdminDatabase { get; set; } Property Value Type Description System.String | Improve this Doc View Source EntityTemplateDatabase The database template to specify when creating a database in Entity Framework. If not specified, PostgreSQL defaults to \"template1\". Declaration [NpgsqlConnectionStringProperty] public string EntityTemplateDatabase { get; set; } Property Value Type Description System.String Remarks http://www.postgresql.org/docs/current/static/manage-ag-templatedbs.html | Improve this Doc View Source Host The hostname or IP address of the PostgreSQL server to connect to. Declaration [NpgsqlConnectionStringProperty(new string[]{\"Server\"})] public string Host { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeRealm The Kerberos realm to be used for authentication. Declaration [NpgsqlConnectionStringProperty] public bool IncludeRealm { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IntegratedSecurity Whether to use Windows integrated security to log in. Declaration [NpgsqlConnectionStringProperty] public bool IntegratedSecurity { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source InternalCommandTimeout The time to wait (in seconds) while trying to execute a an internal command before terminating the attempt and generating an error. Declaration [NpgsqlConnectionStringProperty] public int InternalCommandTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[String] Gets or sets the value associated with the specified key. Declaration public override object this[string keyword] { get; set; } Parameters Type Name Description System.String keyword The key of the item to get or set. Property Value Type Description System.Object The value associated with the specified key. Overrides System.Data.Common.DbConnectionStringBuilder.Item[System.String] | Improve this Doc View Source KeepAlive The number of seconds of connection inactivity before Npgsql sends a keepalive query. Set to 0 (the default) to disable. Declaration [NpgsqlConnectionStringProperty] public int KeepAlive { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source KerberosServiceName The Kerberos service name to be used for authentication. Declaration [NpgsqlConnectionStringProperty(new string[]{\"Krbsrvname\"})] public string KerberosServiceName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Keys Gets an ICollection{string} containing the keys of the NpgsqlConnectionStringBuilder . Declaration public ICollection<string> Keys { get; } Property Value Type Description System.Collections.Generic.ICollection < System.String > | Improve this Doc View Source LoadTableComposites Load table composite type definitions, and not just free-standing composite types. Declaration [NpgsqlConnectionStringProperty] public bool LoadTableComposites { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MaxAutoPrepare The maximum number SQL statements that can be automatically prepared at any given point. Beyond this number the least-recently-used statement will be recycled. Zero (the default) disables automatic preparation. Declaration [NpgsqlConnectionStringProperty] public int MaxAutoPrepare { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MaxPoolSize The maximum connection pool size. Declaration [NpgsqlConnectionStringProperty] public int MaxPoolSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MinPoolSize The minimum connection pool size. Declaration [NpgsqlConnectionStringProperty] public int MinPoolSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source NoResetOnClose If set to true, a pool connection's state won't be reset when it is closed (improves performance). Do not specify this unless you know what you're doing. Declaration [NpgsqlConnectionStringProperty] public bool NoResetOnClose { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Passfile Path to a PostgreSQL password file (PGPASSFILE), from which the password would be taken. Declaration [NpgsqlConnectionStringProperty] public string Passfile { get; set; } Property Value Type Description System.String | Improve this Doc View Source Password The password to connect with. Not required if using IntegratedSecurity. Declaration [NpgsqlConnectionStringProperty(new string[]{\"PSW\", \"PWD\"})] public string Password { get; set; } Property Value Type Description System.String | Improve this Doc View Source PersistSecurityInfo Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state. Declaration [NpgsqlConnectionStringProperty] public bool PersistSecurityInfo { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Pooling Whether connection pooling should be used. Declaration [NpgsqlConnectionStringProperty] public bool Pooling { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Port The TCP/IP port of the PostgreSQL server. Declaration [NpgsqlConnectionStringProperty] public int Port { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PreloadReader Obsolete, see https://www.npgsql.org/doc/release-notes/3.0.html Declaration [NpgsqlConnectionStringProperty] [Obsolete(\"The PreloadReader parameter is no longer supported\")] public bool PreloadReader { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ReadBufferSize Determines the size of the internal buffer Npgsql uses when reading. Increasing may improve performance if transferring large values from the database. Declaration [NpgsqlConnectionStringProperty] public int ReadBufferSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SearchPath Gets or sets the schema search path. Declaration [NpgsqlConnectionStringProperty] public string SearchPath { get; set; } Property Value Type Description System.String | Improve this Doc View Source ServerCompatibilityMode A compatibility mode for special PostgreSQL server types. Declaration [NpgsqlConnectionStringProperty] public ServerCompatibilityMode ServerCompatibilityMode { get; set; } Property Value Type Description ServerCompatibilityMode | Improve this Doc View Source SocketReceiveBufferSize Determines the size of socket read buffer. Declaration [NpgsqlConnectionStringProperty] public int SocketReceiveBufferSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SocketSendBufferSize Determines the size of socket send buffer. Declaration [NpgsqlConnectionStringProperty] public int SocketSendBufferSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source SslMode Controls whether SSL is required, disabled or preferred, depending on server support. Declaration [NpgsqlConnectionStringProperty] public SslMode SslMode { get; set; } Property Value Type Description SslMode | Improve this Doc View Source TcpKeepAlive Whether to use TCP keepalive with system defaults if overrides isn't specified. Declaration [NpgsqlConnectionStringProperty] public bool TcpKeepAlive { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source TcpKeepAliveInterval The interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received. Defaults to the value of TcpKeepAliveTime . TcpKeepAliveTime must be non-zero as well. Supported only on Windows. Declaration [NpgsqlConnectionStringProperty] public int TcpKeepAliveInterval { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TcpKeepAliveTime The number of seconds of connection inactivity before a TCP keepalive query is sent. Use of this option is discouraged, use KeepAlive instead if possible. Set to 0 (the default) to disable. Supported only on Windows. Declaration [NpgsqlConnectionStringProperty] public int TcpKeepAliveTime { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Timeout The time to wait (in seconds) while trying to establish a connection before terminating the attempt and generating an error. Defaults to 15 seconds. Declaration [NpgsqlConnectionStringProperty] public int Timeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Timezone Gets or sets the PostgreSQL session timezone, in Olson/IANA database format. Declaration [NpgsqlConnectionStringProperty] public string Timezone { get; set; } Property Value Type Description System.String | Improve this Doc View Source TrustServerCertificate Whether to trust the server certificate without validating it. Declaration [NpgsqlConnectionStringProperty] public bool TrustServerCertificate { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source UseExtendedTypes Obsolete, see https://www.npgsql.org/doc/release-notes/3.0.html Declaration [NpgsqlConnectionStringProperty] [Obsolete(\"The UseExtendedTypes parameter is no longer supported\")] public bool UseExtendedTypes { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source UsePerfCounters Writes connection performance information to performance counters. Declaration [NpgsqlConnectionStringProperty] public bool UsePerfCounters { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Username The username to connect with. Not required if using IntegratedSecurity. Declaration [NpgsqlConnectionStringProperty(new string[]{\"User Name\", \"UserId\", \"User Id\", \"UID\"})] public string Username { get; set; } Property Value Type Description System.String | Improve this Doc View Source UseSslStream Obsolete, see https://www.npgsql.org/doc/release-notes/4.1.html Declaration [NpgsqlConnectionStringProperty] [Obsolete(\"The UseSslStream parameter is no longer supported (always true)\")] public bool UseSslStream { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Values Gets an ICollection{string} containing the values in the NpgsqlConnectionStringBuilder . Declaration public ICollection<object> Values { get; } Property Value Type Description System.Collections.Generic.ICollection < System.Object > | Improve this Doc View Source WriteBufferSize Determines the size of the internal buffer Npgsql uses when writing. Increasing may improve performance if transferring large values to the database. Declaration [NpgsqlConnectionStringProperty] public int WriteBufferSize { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(KeyValuePair<String, Object>) Adds an item to the NpgsqlConnectionStringBuilder . Declaration public void Add(KeyValuePair<string, object> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , System.Object > item The key-value pair to be added. | Improve this Doc View Source Clear() Clears the contents of the NpgsqlConnectionStringBuilder instance. Declaration public override void Clear() Overrides System.Data.Common.DbConnectionStringBuilder.Clear() | Improve this Doc View Source Contains(KeyValuePair<String, Object>) Determines whether the NpgsqlConnectionStringBuilder contains a specific key-value pair. Declaration public bool Contains(KeyValuePair<string, object> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , System.Object > item The item to locate in the NpgsqlConnectionStringBuilder . Returns Type Description System.Boolean true if the NpgsqlConnectionStringBuilder contains the entry; otherwise false . | Improve this Doc View Source ContainsKey(String) Determines whether the NpgsqlConnectionStringBuilder contains a specific key. Declaration public override bool ContainsKey(string keyword) Parameters Type Name Description System.String keyword The key to locate in the NpgsqlConnectionStringBuilder . Returns Type Description System.Boolean true if the NpgsqlConnectionStringBuilder contains an entry with the specified key; otherwise false . Overrides System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String) | Improve this Doc View Source CopyTo(KeyValuePair<String, Object>[], Int32) Copies the elements of the NpgsqlConnectionStringBuilder to an Array, starting at a particular Array index. Declaration public void CopyTo(KeyValuePair<string, object>[] array, int arrayIndex) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , System.Object >[] array The one-dimensional Array that is the destination of the elements copied from NpgsqlConnectionStringBuilder . The Array must have zero-based indexing. System.Int32 arrayIndex The zero-based index in array at which copying begins. | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Returns an enumerator that iterates through the NpgsqlConnectionStringBuilder . Declaration public IEnumerator<KeyValuePair<string, object>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair < System.String , System.Object >> | Improve this Doc View Source GetHashCode() Hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetProperties(Hashtable) Declaration protected override void GetProperties(Hashtable propertyDescriptors) Parameters Type Name Description System.Collections.Hashtable propertyDescriptors Overrides System.Data.Common.DbConnectionStringBuilder.GetProperties(System.Collections.Hashtable) | Improve this Doc View Source Remove(KeyValuePair<String, Object>) Removes the entry from the DbConnectionStringBuilder instance. Declaration public bool Remove(KeyValuePair<string, object> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , System.Object > item The key/value pair to be removed from the connection string in this DbConnectionStringBuilder. Returns Type Description System.Boolean true if the key existed within the connection string and was removed; false if the key did not exist. | Improve this Doc View Source Remove(String) Removes the entry with the specified key from the DbConnectionStringBuilder instance. Declaration public override bool Remove(string keyword) Parameters Type Name Description System.String keyword The key of the key/value pair to be removed from the connection string in this DbConnectionStringBuilder. Returns Type Description System.Boolean true if the key existed within the connection string and was removed; false if the key did not exist. Overrides System.Data.Common.DbConnectionStringBuilder.Remove(System.String) | Improve this Doc View Source TryGetValue(String, out Object) Retrieves a value corresponding to the supplied key from this NpgsqlConnectionStringBuilder . Declaration public override bool TryGetValue(string keyword, out object value) Parameters Type Name Description System.String keyword The key of the item to retrieve. System.Object value The value corresponding to the key. Returns Type Description System.Boolean true if keyword was found within the connection string, false otherwise. Overrides System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String, System.Object) Explicit Interface Implementations | Improve this Doc View Source IDictionary<String, Object>.Item[String] Declaration object IDictionary<string, object>.this[string keyword] { get; set; } Parameters Type Name Description System.String keyword Returns Type Description System.Object Implements System.Collections.IDictionary System.Collections.ICollection System.ComponentModel.ICustomTypeDescriptor System.Collections.Generic.IDictionary<TKey, TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "doc/api/Npgsql.NpgsqlNetTopologySuiteExtensions.html": {
    "href": "doc/api/Npgsql.NpgsqlNetTopologySuiteExtensions.html",
    "title": "Class NpgsqlNetTopologySuiteExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteExtensions Extension allowing adding the NetTopologySuite plugin to an Npgsql type mapper. Inheritance System.Object NpgsqlNetTopologySuiteExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.NetTopologySuite.dll Syntax public static class NpgsqlNetTopologySuiteExtensions Methods | Improve this Doc View Source UseNetTopologySuite(INpgsqlTypeMapper, Nullable<CoordinateSequenceFactory>, Nullable<PrecisionModel>, Ordinates, Boolean) Sets up NetTopologySuite mappings for the PostGIS types. Declaration public static INpgsqlTypeMapper UseNetTopologySuite(this INpgsqlTypeMapper mapper, CoordinateSequenceFactory? coordinateSequenceFactory = default(CoordinateSequenceFactory? ), PrecisionModel? precisionModel = default(PrecisionModel? ), Ordinates handleOrdinates = null, bool geographyAsDefault = false) Parameters Type Name Description INpgsqlTypeMapper mapper The type mapper to set up (global or connection-specific). System.Nullable < CoordinateSequenceFactory > coordinateSequenceFactory The factory which knows how to build a particular implementation of ICoordinateSequence from an array of Coordinates. System.Nullable < PrecisionModel > precisionModel Specifies the grid of allowable points. Ordinates handleOrdinates Specifies the ordinates which will be handled. Not specified ordinates will be ignored. If GeoAPI.Geometries.Ordiantes.None is specified, an actual value will be taken from the GeoAPI.Geometries.ICoordinateSequenceFactory.Ordinates property of coordinateSequenceFactory . System.Boolean geographyAsDefault Specifies that the geography type is used for mapping by default. Returns Type Description INpgsqlTypeMapper"
  },
  "doc/api/Npgsql.GeoJSON.GeoJSONOptions.html": {
    "href": "doc/api/Npgsql.GeoJSON.GeoJSONOptions.html",
    "title": "Enum GeoJSONOptions | Npgsql Documentation",
    "keywords": "Enum GeoJSONOptions Namespace : Npgsql.GeoJSON Assembly : Npgsql.GeoJSON.dll Syntax [Flags] public enum GeoJSONOptions Fields Name Description BoundingBox LongCRS None ShortCRS"
  },
  "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.DateHandlerFactory.html": {
    "href": "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.DateHandlerFactory.html",
    "title": "Class DateHandlerFactory | Npgsql Documentation",
    "keywords": "Class DateHandlerFactory A factory for type handlers for the PostgreSQL date data type. Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < System.DateTime > DateHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<DateTime>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<DateTime>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.DateTimeHandlers Assembly : Npgsql.dll Syntax public class DateHandlerFactory : NpgsqlTypeHandlerFactory<DateTime> Remarks See http://www.postgresql.org/docs/current/static/datatype-datetime.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<DateTime> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < System.DateTime > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<System.DateTime>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlModelBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlModelBuilderExtensions.html",
    "title": "Class NpgsqlModelBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlModelBuilderExtensions Npgsql specific extension methods for . Inheritance System.Object NpgsqlModelBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlModelBuilderExtensions Methods | Improve this Doc View Source CanSetHiLoSequence(IConventionModelBuilder, String, String, Boolean) Returns a value indicating whether the given name and schema can be set for the hi-lo sequence. Declaration public static bool CanSetHiLoSequence(this IConventionModelBuilder modelBuilder, string name, string schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder. System.String name The name of the sequence. System.String schema The schema of the sequence. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description System.Boolean true if the given name and schema can be set for the hi-lo sequence. | Improve this Doc View Source ForNpgsqlHasEnum(ModelBuilder, String, String, String[]) Registers a user-defined enum type in the model. Declaration [Obsolete(\"Use HasPostgresEnum\")] public static ModelBuilder ForNpgsqlHasEnum(this ModelBuilder modelBuilder, string schema, string name, string[] labels) Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to create the enum type. System.String schema The schema in which to create the enum type. System.String name The name of the enum type to create. System.String [] labels The enum label values. Returns Type Description ModelBuilder The updated . Remarks See: https://www.postgresql.org/docs/current/static/datatype-enum.html Exceptions Type Condition System.ArgumentNullException builder | Improve this Doc View Source ForNpgsqlHasEnum(ModelBuilder, String, String[]) Registers a user-defined enum type in the model. Declaration [Obsolete(\"Use HasPostgresEnum\")] public static ModelBuilder ForNpgsqlHasEnum(this ModelBuilder modelBuilder, string name, string[] labels) Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to create the enum type. System.String name The name of the enum type to create. System.String [] labels The enum label values. Returns Type Description ModelBuilder The updated . Remarks See: https://www.postgresql.org/docs/current/static/datatype-enum.html Exceptions Type Condition System.ArgumentNullException builder | Improve this Doc View Source ForNpgsqlHasEnum<TEnum>(ModelBuilder, String, String, INpgsqlNameTranslator) Registers a user-defined enum type in the model. Declaration [Obsolete(\"Use HasPostgresEnum\")] public static ModelBuilder ForNpgsqlHasEnum<TEnum>(this ModelBuilder modelBuilder, string schema = null, string name = null, INpgsqlNameTranslator nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to create the enum type. System.String schema The schema in which to create the enum type. System.String name The name of the enum type to create. INpgsqlNameTranslator nameTranslator The translator for name and label inference. Defaults to . Returns Type Description ModelBuilder The updated . Type Parameters Name Description TEnum Remarks See: https://www.postgresql.org/docs/current/static/datatype-enum.html Exceptions Type Condition System.ArgumentNullException builder | Improve this Doc View Source ForNpgsqlHasRange(ModelBuilder, String, String) Registers a user-defined range type in the model. Declaration [Obsolete(\"Use HasPostgresRange\")] public static ModelBuilder ForNpgsqlHasRange(this ModelBuilder modelBuilder, string name, string subtype) Parameters Type Name Description ModelBuilder modelBuilder The model builder on which to create the range type. System.String name The name of the range type to be created. System.String subtype The subtype (or element type) of the range Returns Type Description ModelBuilder Remarks See https://www.postgresql.org/docs/current/static/rangetypes.html , https://www.postgresql.org/docs/current/static/sql-createtype.html , | Improve this Doc View Source ForNpgsqlHasRange(ModelBuilder, String, String, String, String, String, String, String) Registers a user-defined range type in the model. Declaration [Obsolete(\"Use HasPostgresRange\")] public static ModelBuilder ForNpgsqlHasRange(this ModelBuilder modelBuilder, string schema, string name, string subtype, string canonicalFunction = null, string subtypeOpClass = null, string collation = null, string subtypeDiff = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder on which to create the range type. System.String schema The schema in which to create the range type. System.String name The name of the range type to be created. System.String subtype The subtype (or element type) of the range System.String canonicalFunction An optional PostgreSQL function which converts range values to a canonical form. System.String subtypeOpClass Used to specify a non-default operator class. System.String collation Used to specify a non-default collation in the range's order. System.String subtypeDiff An optional PostgreSQL function taking two values of the subtype type as argument, and return a double precision value representing the difference between the two given values. Returns Type Description ModelBuilder Remarks See https://www.postgresql.org/docs/current/static/rangetypes.html , https://www.postgresql.org/docs/current/static/sql-createtype.html , | Improve this Doc View Source ForNpgsqlUseIdentityAlwaysColumns(ModelBuilder) Configures the model to use the PostgreSQL IDENTITY feature to generate values for properties marked as , when targeting PostgreSQL. Values for these columns will always be generated as identity, and the application will not be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration [Obsolete(\"Use UseIdentityAlwaysColumns\")] public static ModelBuilder ForNpgsqlUseIdentityAlwaysColumns(this ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source ForNpgsqlUseIdentityByDefaultColumns(ModelBuilder) Configures the model to use the PostgreSQL IDENTITY feature to generate values for properties marked as , when targeting PostgreSQL. Values for these columns will be generated as identity by default, but the application will be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration [Obsolete(\"Use UseIdentityByDefaultColumns\")] public static ModelBuilder ForNpgsqlUseIdentityByDefaultColumns(this ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source ForNpgsqlUseIdentityColumns(ModelBuilder) Configures the model to use the PostgreSQL IDENTITY feature to generate values for properties marked as , when targeting PostgreSQL. Values for these columns will be generated as identity by default, but the application will be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration [Obsolete(\"Use UseIdentityColumns\")] public static ModelBuilder ForNpgsqlUseIdentityColumns(this ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source ForNpgsqlUseSequenceHiLo(ModelBuilder, String, String) Configures the model to use a sequence-based hi-lo pattern to generate values for properties marked as , when targeting PostgreSQL. Declaration [Obsolete(\"Use UseHiLo\")] public static ModelBuilder ForNpgsqlUseSequenceHiLo(this ModelBuilder modelBuilder, string name = null, string schema = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder. System.String name The name of the sequence. System.String schema The schema of the sequence. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source ForNpgsqlUseSerialColumns(ModelBuilder) Configures the model to use the PostgreSQL SERIAL feature to generate values for properties marked as , when targeting PostgreSQL. This is the default behavior when targeting PostgreSQL. Declaration [Obsolete(\"Use UseSerialColumns\")] public static ModelBuilder ForNpgsqlUseSerialColumns(this ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source ForNpgsqlUseTablespace(ModelBuilder, String) Declaration [Obsolete(\"Use UseTablespace\")] public static ModelBuilder ForNpgsqlUseTablespace(this ModelBuilder modelBuilder, string tablespace) Parameters Type Name Description ModelBuilder modelBuilder System.String tablespace Returns Type Description ModelBuilder | Improve this Doc View Source HasDatabaseTemplate(ModelBuilder, String) Declaration [Obsolete(\"Use UseDatabaseTemplate\")] public static ModelBuilder HasDatabaseTemplate(this ModelBuilder modelBuilder, string templateDatabaseName) Parameters Type Name Description ModelBuilder modelBuilder System.String templateDatabaseName Returns Type Description ModelBuilder | Improve this Doc View Source HasHiLoSequence(IConventionModelBuilder, String, String, Boolean) Configures the database sequence used for the hi-lo pattern to generate values for key properties marked as , when targeting PostgreSQL. Declaration public static IConventionSequenceBuilder HasHiLoSequence(this IConventionModelBuilder modelBuilder, string name, string schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The model builder. System.String name The name of the sequence. System.String schema The schema of the sequence. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionSequenceBuilder A builder to further configure the sequence. | Improve this Doc View Source HasPostgresEnum(ModelBuilder, String, String, String[]) Registers a user-defined enum type in the model. Declaration public static ModelBuilder HasPostgresEnum(this ModelBuilder modelBuilder, string schema, string name, string[] labels) Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to create the enum type. System.String schema The schema in which to create the enum type. System.String name The name of the enum type to create. System.String [] labels The enum label values. Returns Type Description ModelBuilder The updated . Remarks See: https://www.postgresql.org/docs/current/static/datatype-enum.html Exceptions Type Condition System.ArgumentNullException builder | Improve this Doc View Source HasPostgresEnum(ModelBuilder, String, String[]) Registers a user-defined enum type in the model. Declaration public static ModelBuilder HasPostgresEnum(this ModelBuilder modelBuilder, string name, string[] labels) Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to create the enum type. System.String name The name of the enum type to create. System.String [] labels The enum label values. Returns Type Description ModelBuilder The updated . Remarks See: https://www.postgresql.org/docs/current/static/datatype-enum.html Exceptions Type Condition System.ArgumentNullException builder | Improve this Doc View Source HasPostgresEnum<TEnum>(ModelBuilder, String, String, INpgsqlNameTranslator) Registers a user-defined enum type in the model. Declaration public static ModelBuilder HasPostgresEnum<TEnum>(this ModelBuilder modelBuilder, string schema = null, string name = null, INpgsqlNameTranslator nameTranslator = null) where TEnum : struct, Enum Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to create the enum type. System.String schema The schema in which to create the enum type. System.String name The name of the enum type to create. INpgsqlNameTranslator nameTranslator The translator for name and label inference. Defaults to . Returns Type Description ModelBuilder The updated . Type Parameters Name Description TEnum Remarks See: https://www.postgresql.org/docs/current/static/datatype-enum.html Exceptions Type Condition System.ArgumentNullException builder | Improve this Doc View Source HasPostgresExtension(ModelBuilder, String) Registers a PostgreSQL extension in the model. Declaration public static ModelBuilder HasPostgresExtension(this ModelBuilder modelBuilder, string name) Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to define the extension. System.String name The name of the extension to create. Returns Type Description ModelBuilder The updated . Remarks See: https://www.postgresql.org/docs/current/external-extensions.html Exceptions Type Condition System.ArgumentNullException modelBuilder | Improve this Doc View Source HasPostgresExtension(ModelBuilder, String, String, String) Registers a PostgreSQL extension in the model. Declaration public static ModelBuilder HasPostgresExtension(this ModelBuilder modelBuilder, string schema, string name, string version) Parameters Type Name Description ModelBuilder modelBuilder The model builder in which to define the extension. System.String schema The schema in which to create the extension. System.String name The name of the extension to create. System.String version The version of the extension. Returns Type Description ModelBuilder The updated . Remarks See: https://www.postgresql.org/docs/current/external-extensions.html Exceptions Type Condition System.ArgumentNullException modelBuilder | Improve this Doc View Source HasPostgresRange(ModelBuilder, String, String) Registers a user-defined range type in the model. Declaration public static ModelBuilder HasPostgresRange(this ModelBuilder modelBuilder, string name, string subtype) Parameters Type Name Description ModelBuilder modelBuilder The model builder on which to create the range type. System.String name The name of the range type to be created. System.String subtype The subtype (or element type) of the range Returns Type Description ModelBuilder Remarks See https://www.postgresql.org/docs/current/static/rangetypes.html , https://www.postgresql.org/docs/current/static/sql-createtype.html , | Improve this Doc View Source HasPostgresRange(ModelBuilder, String, String, String, String, String, String, String) Registers a user-defined range type in the model. Declaration public static ModelBuilder HasPostgresRange(this ModelBuilder modelBuilder, string schema, string name, string subtype, string canonicalFunction = null, string subtypeOpClass = null, string collation = null, string subtypeDiff = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder on which to create the range type. System.String schema The schema in which to create the range type. System.String name The name of the range type to be created. System.String subtype The subtype (or element type) of the range System.String canonicalFunction An optional PostgreSQL function which converts range values to a canonical form. System.String subtypeOpClass Used to specify a non-default operator class. System.String collation Used to specify a non-default collation in the range's order. System.String subtypeDiff An optional PostgreSQL function taking two values of the subtype type as argument, and return a double precision value representing the difference between the two given values. Returns Type Description ModelBuilder Remarks See https://www.postgresql.org/docs/current/static/rangetypes.html , https://www.postgresql.org/docs/current/static/sql-createtype.html , | Improve this Doc View Source HasValueGenerationStrategy(IConventionModelBuilder, Nullable<NpgsqlValueGenerationStrategy>, Boolean) Configures the value generation strategy for the key property, when targeting PostgreSQL. Declaration public static IConventionModelBuilder HasValueGenerationStrategy(this IConventionModelBuilder modelBuilder, NpgsqlValueGenerationStrategy? valueGenerationStrategy, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModelBuilder modelBuilder The builder for the property being configured. System.Nullable < NpgsqlValueGenerationStrategy > valueGenerationStrategy The value generation strategy. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. Returns Type Description IConventionModelBuilder The same builder instance if the configuration was applied, null otherwise. | Improve this Doc View Source UseDatabaseTemplate(ModelBuilder, String) Declaration public static ModelBuilder UseDatabaseTemplate(this ModelBuilder modelBuilder, string templateDatabaseName) Parameters Type Name Description ModelBuilder modelBuilder System.String templateDatabaseName Returns Type Description ModelBuilder | Improve this Doc View Source UseHiLo(ModelBuilder, String, String) Configures the model to use a sequence-based hi-lo pattern to generate values for properties marked as , when targeting PostgreSQL. Declaration public static ModelBuilder UseHiLo(this ModelBuilder modelBuilder, string name = null, string schema = null) Parameters Type Name Description ModelBuilder modelBuilder The model builder. System.String name The name of the sequence. System.String schema The schema of the sequence. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseIdentityAlwaysColumns(ModelBuilder) Configures the model to use the PostgreSQL IDENTITY feature to generate values for properties marked as , when targeting PostgreSQL. Values for these columns will always be generated as identity, and the application will not be able to override this behavior by providing a value. Available only starting PostgreSQL 10. Declaration public static ModelBuilder UseIdentityAlwaysColumns(this ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseIdentityByDefaultColumns(ModelBuilder) Configures the model to use the PostgreSQL IDENTITY feature to generate values for properties marked as , when targeting PostgreSQL. Values for these columns will be generated as identity by default, but the application will be able to override this behavior by providing a value. This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static ModelBuilder UseIdentityByDefaultColumns(this ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseIdentityColumns(ModelBuilder) Configures the model to use the PostgreSQL IDENTITY feature to generate values for properties marked as , when targeting PostgreSQL. Values for these columns will be generated as identity by default, but the application will be able to override this behavior by providing a value. This is the default behavior when targeting PostgreSQL. Available only starting PostgreSQL 10. Declaration public static ModelBuilder UseIdentityColumns(this ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseSerialColumns(ModelBuilder) Configures the model to use the PostgreSQL SERIAL feature to generate values for properties marked as , when targeting PostgreSQL. This option should be considered deprecated starting with PostgreSQL 10, consider using UseIdentityColumns(ModelBuilder) instead. Declaration public static ModelBuilder UseSerialColumns(this ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder The model builder. Returns Type Description ModelBuilder The same builder instance so that multiple calls can be chained. | Improve this Doc View Source UseTablespace(ModelBuilder, String) Declaration public static ModelBuilder UseTablespace(this ModelBuilder modelBuilder, string tablespace) Parameters Type Name Description ModelBuilder modelBuilder System.String tablespace Returns Type Description ModelBuilder"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlNetTopologySuiteOptions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlNetTopologySuiteOptions.html",
    "title": "Class NpgsqlNetTopologySuiteOptions | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteOptions Represents options for Npgsql NetTopologySuite that can only be set at the System.IServiceProvider singleton level. Inheritance System.Object NpgsqlNetTopologySuiteOptions Implements INpgsqlNetTopologySuiteOptions ISingletonOptions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteOptions : INpgsqlNetTopologySuiteOptions, ISingletonOptions Properties | Improve this Doc View Source IsGeographyDefault True if geography is to be used by default instead of geometry Declaration public bool IsGeographyDefault { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Initialize(IDbContextOptions) Declaration public void Initialize(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options | Improve this Doc View Source Validate(IDbContextOptions) Declaration public void Validate(IDbContextOptions options) Parameters Type Name Description IDbContextOptions options Implements INpgsqlNetTopologySuiteOptions ISingletonOptions"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonDomTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlJsonDomTranslator.html",
    "title": "Class NpgsqlJsonDomTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlJsonDomTranslator Inheritance System.Object NpgsqlJsonDomTranslator Implements IMethodCallTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlJsonDomTranslator : IMemberTranslator, IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlJsonDomTranslator(NpgsqlSqlExpressionFactory, IRelationalTypeMappingSource) Declaration public NpgsqlJsonDomTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Improve this Doc View Source Translate(SqlExpression, MemberInfo, Type) Declaration public SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType) Parameters Type Name Description SqlExpression instance System.Reflection.MemberInfo member System.Type returnType Returns Type Description SqlExpression | Improve this Doc View Source Translate(SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>) Declaration public SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description SqlExpression instance System.Reflection.MethodInfo method System.Collections.Generic.IReadOnlyList < SqlExpression > arguments Returns Type Description SqlExpression Implements IMethodCallTranslator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlNetTopologySuiteTypeMappingSourcePlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlNetTopologySuiteTypeMappingSourcePlugin.html",
    "title": "Class NpgsqlNetTopologySuiteTypeMappingSourcePlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteTypeMappingSourcePlugin Inheritance System.Object NpgsqlNetTopologySuiteTypeMappingSourcePlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public class NpgsqlNetTopologySuiteTypeMappingSourcePlugin : IRelationalTypeMappingSourcePlugin Constructors | Improve this Doc View Source NpgsqlNetTopologySuiteTypeMappingSourcePlugin(INpgsqlNetTopologySuiteOptions) Declaration public NpgsqlNetTopologySuiteTypeMappingSourcePlugin(INpgsqlNetTopologySuiteOptions options) Parameters Type Name Description INpgsqlNetTopologySuiteOptions options Methods | Improve this Doc View Source FindMapping(RelationalTypeMappingInfo) Declaration public virtual RelationalTypeMapping FindMapping(in RelationalTypeMappingInfo mappingInfo) Parameters Type Name Description RelationalTypeMappingInfo mappingInfo Returns Type Description RelationalTypeMapping | Improve this Doc View Source TryParseStoreTypeName(String, out Boolean, out Type, out Int32) Given a PostGIS store type name (e.g. GEOMETRY, GEOGRAPHY(Point, 4326)), attempts to parse it and return its components. Declaration public static bool TryParseStoreTypeName(string storeTypeName, out bool isGeography, out Type clrType, out int srid) Parameters Type Name Description System.String storeTypeName System.Boolean isGeography System.Type clrType System.Int32 srid Returns Type Description System.Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRangeTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRangeTypeMapping.html",
    "title": "Class NpgsqlRangeTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlRangeTypeMapping The type mapping for the PostgreSQL range types. Inheritance System.Object NpgsqlTypeMapping NpgsqlRangeTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRangeTypeMapping : NpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/rangetypes.html Constructors | Improve this Doc View Source NpgsqlRangeTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType, RelationalTypeMapping, ISqlGenerationHelper) Declaration protected NpgsqlRangeTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType, RelationalTypeMapping subtypeMapping, ISqlGenerationHelper sqlGenerationHelper) Parameters Type Name Description RelationalTypeMappingParameters parameters NpgsqlDbType npgsqlDbType RelationalTypeMapping subtypeMapping ISqlGenerationHelper sqlGenerationHelper | Improve this Doc View Source NpgsqlRangeTypeMapping(String, String, Type, RelationalTypeMapping, ISqlGenerationHelper) Constructs an instance of the NpgsqlRangeTypeMapping class. Declaration public NpgsqlRangeTypeMapping(string storeType, string storeTypeSchema, Type clrType, RelationalTypeMapping subtypeMapping, ISqlGenerationHelper sqlGenerationHelper) Parameters Type Name Description System.String storeType The database type to map System.String storeTypeSchema The schema of the type. System.Type clrType The CLR type to map. RelationalTypeMapping subtypeMapping The type mapping for the range subtype. ISqlGenerationHelper sqlGenerationHelper The SQL generation helper to delimit the store name. | Improve this Doc View Source NpgsqlRangeTypeMapping(String, Type, RelationalTypeMapping, ISqlGenerationHelper) Constructs an instance of the NpgsqlRangeTypeMapping class. Declaration public NpgsqlRangeTypeMapping(string storeType, Type clrType, RelationalTypeMapping subtypeMapping, ISqlGenerationHelper sqlGenerationHelper) Parameters Type Name Description System.String storeType The database type to map System.Type clrType The CLR type to map. RelationalTypeMapping subtypeMapping The type mapping for the range subtype. ISqlGenerationHelper sqlGenerationHelper The SQL generation helper to delimit the store name. Properties | Improve this Doc View Source SubtypeMapping The relational type mapping used to initialize the bound mapping. Declaration public RelationalTypeMapping SubtypeMapping { get; } Property Value Type Description RelationalTypeMapping Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlResources.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlResources.html",
    "title": "Class NpgsqlResources | Npgsql Documentation",
    "keywords": "Class NpgsqlResources This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance System.Object NpgsqlResources Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlResources Methods | Improve this Doc View Source LogEnumColumnSkipped(IDiagnosticsLogger) Enum column '{name}' cannot be scaffolded, define a CLR enum type and add the property manually. Declaration public static EventDefinition<string> LogEnumColumnSkipped(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < System.String > | Improve this Doc View Source LogExpressionIndexSkipped(IDiagnosticsLogger) Expression index '{name}' on table {tableName} cannot be scaffolded, expression indices aren't supported and must be added via raw SQL in migrations. Declaration public static EventDefinition<string, string> LogExpressionIndexSkipped(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < System.String , System.String > | Improve this Doc View Source LogFoundColumn(IDiagnosticsLogger) Found column with table: {tableName}, column name: {columnName}, data type: {dataType}, nullable: {isNullable}, default value: {defaultValue} Declaration public static EventDefinition<string, string, string, bool, string> LogFoundColumn(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < System.String , System.String , System.String , System.Boolean , System.String > | Improve this Doc View Source LogFoundForeignKey(IDiagnosticsLogger) Found foreign key on table: {tableName}, name: {foreignKeyName}, principal table: {principalTableName}, delete action: {deleteAction}. Declaration public static EventDefinition<string, string, string, string> LogFoundForeignKey(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < System.String , System.String , System.String , System.String > | Improve this Doc View Source LogFoundIndex(IDiagnosticsLogger) Found index with name: {indexName}, table: {tableName}, is unique: {isUnique}. Declaration public static EventDefinition<string, string, bool> LogFoundIndex(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < System.String , System.String , System.Boolean > | Improve this Doc View Source LogFoundPrimaryKey(IDiagnosticsLogger) Found primary key with name: {primaryKeyName}, table: {tableName}. Declaration public static EventDefinition<string, string> LogFoundPrimaryKey(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < System.String , System.String > | Improve this Doc View Source LogFoundSequence(IDiagnosticsLogger) Found sequence name: {name}, data type: {dataType}, cyclic: {isCyclic}, increment: {increment}, start: {start}, minimum: {min}, maximum: {max}. Declaration public static FallbackEventDefinition LogFoundSequence(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description FallbackEventDefinition | Improve this Doc View Source LogFoundTable(IDiagnosticsLogger) Found table with name: {name}. Declaration public static EventDefinition<string> LogFoundTable(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < System.String > | Improve this Doc View Source LogFoundUniqueConstraint(IDiagnosticsLogger) Found unique constraint with name: {uniqueConstraintName}, table: {tableName}. Declaration public static EventDefinition<string, string> LogFoundUniqueConstraint(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < System.String , System.String > | Improve this Doc View Source LogMissingSchema(IDiagnosticsLogger) Unable to find a schema in the database matching the selected schema {schema}. Declaration public static EventDefinition<string> LogMissingSchema(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < System.String > | Improve this Doc View Source LogMissingTable(IDiagnosticsLogger) Unable to find a table in the database matching the selected table {table}. Declaration public static EventDefinition<string> LogMissingTable(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < System.String > | Improve this Doc View Source LogPrincipalColumnNotFound(IDiagnosticsLogger) For foreign key {foreignKeyName} on table {tableName}, unable to find the column called {principalColumnName} on the foreign key's principal table, {principaltableName}. Skipping foreign key. Declaration public static EventDefinition<string, string, string, string> LogPrincipalColumnNotFound(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < System.String , System.String , System.String , System.String > | Improve this Doc View Source LogPrincipalTableNotInSelectionSet(IDiagnosticsLogger) For foreign key {fkName} on table {tableName}, unable to model the end of the foreign key on principal table {principaltableName}. This is usually because the principal table was not included in the selection set. Declaration public static EventDefinition<string, string, string> LogPrincipalTableNotInSelectionSet(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < System.String , System.String , System.String > | Improve this Doc View Source LogUnsupportedColumnConstraintSkipped(IDiagnosticsLogger) Constraint '{name}' on table {tableName} cannot be scaffolded because it includes a column that cannot be scaffolded (e.g. enum). Declaration public static EventDefinition<string, string> LogUnsupportedColumnConstraintSkipped(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < System.String , System.String > | Improve this Doc View Source LogUnsupportedColumnIndexSkipped(IDiagnosticsLogger) Index '{name}' on table {tableName} cannot be scaffolded because it includes a column that cannot be scaffolded (e.g. enum). Declaration public static EventDefinition<string, string> LogUnsupportedColumnIndexSkipped(IDiagnosticsLogger logger) Parameters Type Name Description IDiagnosticsLogger logger Returns Type Description EventDefinition < System.String , System.String >"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.Diagnostics.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.Diagnostics.html",
    "title": "Namespace Microsoft.EntityFrameworkCore.Diagnostics | Npgsql Documentation",
    "keywords": "Namespace Microsoft.EntityFrameworkCore.Diagnostics Classes NpgsqlEventId Event IDs for PostgreSQL/Npgsql events that correspond to messages logged to an and events sent to a . These IDs are also used with to configure the behavior of warnings."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRegexIsMatchTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRegexIsMatchTranslator.html",
    "title": "Class NpgsqlRegexIsMatchTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlRegexIsMatchTranslator Translates Regex.IsMatch calls into PostgreSQL regex expressions for database-side processing. Inheritance System.Object NpgsqlRegexIsMatchTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRegexIsMatchTranslator : IMethodCallTranslator Remarks http://www.postgresql.org/docs/current/static/functions-matching.html Constructors | Improve this Doc View Source NpgsqlRegexIsMatchTranslator(NpgsqlSqlExpressionFactory) Declaration public NpgsqlRegexIsMatchTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>) Declaration public SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description SqlExpression instance System.Reflection.MethodInfo method System.Collections.Generic.IReadOnlyList < SqlExpression > arguments Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceHiLoValueGenerator-1.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceHiLoValueGenerator-1.html",
    "title": "Class NpgsqlSequenceHiLoValueGenerator<TValue> | Npgsql Documentation",
    "keywords": "Class NpgsqlSequenceHiLoValueGenerator<TValue> This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Inheritance System.Object NpgsqlSequenceHiLoValueGenerator<TValue> Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSequenceHiLoValueGenerator<TValue> : HiLoValueGenerator<TValue> Type Parameters Name Description TValue Constructors | Improve this Doc View Source NpgsqlSequenceHiLoValueGenerator(IRawSqlCommandBuilder, IUpdateSqlGenerator, NpgsqlSequenceValueGeneratorState, INpgsqlRelationalConnection, IDiagnosticsLogger<DbLoggerCategory.Database.Command>) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public NpgsqlSequenceHiLoValueGenerator(IRawSqlCommandBuilder rawSqlCommandBuilder, IUpdateSqlGenerator sqlGenerator, NpgsqlSequenceValueGeneratorState generatorState, INpgsqlRelationalConnection connection, IDiagnosticsLogger<DbLoggerCategory.Database.Command> commandLogger) Parameters Type Name Description IRawSqlCommandBuilder rawSqlCommandBuilder IUpdateSqlGenerator sqlGenerator NpgsqlSequenceValueGeneratorState generatorState INpgsqlRelationalConnection connection IDiagnosticsLogger < DbLoggerCategory.Database.Command > commandLogger Properties | Improve this Doc View Source GeneratesTemporaryValues This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public override bool GeneratesTemporaryValues { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source GetNewLowValue() This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration protected override long GetNewLowValue() Returns Type Description System.Int64 | Improve this Doc View Source GetNewLowValueAsync(CancellationToken) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration protected override Task<long> GetNewLowValueAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Int64 >"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlTsRankingNormalization.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlTsRankingNormalization.html",
    "title": "Enum NpgsqlTsRankingNormalization | Npgsql Documentation",
    "keywords": "Enum NpgsqlTsRankingNormalization Specifies whether and how a document's length should impact its rank. This is used with the ranking functions in NpgsqlFullTextSearchLinqExtensions . See http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING for more information about the behaviors that are controlled by this value. Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax [Flags] public enum NpgsqlTsRankingNormalization Fields Name Description Default Ignores the document length. DivideBy1PlusLogLength Divides the rank by 1 + the logarithm of the document length. DivideByItselfPlusOne Divides the rank by itself + 1. DivideByLength Divides the rank by the document length. DivideByMeanHarmonicDistanceBetweenExtents Divides the rank by the mean harmonic distance between extents (this is implemented only by ts_rank_cd). DivideByUniqueWordCount Divides the rank by the number of unique words in document. DividesBy1PlusLogUniqueWordCount Divides the rank by 1 + the logarithm of the number of unique words in document."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.CustomUnaryExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.CustomUnaryExpression.html",
    "title": "Class CustomUnaryExpression | Npgsql Documentation",
    "keywords": "Class CustomUnaryExpression PostgreSQL has quite a few custom operators (full text, JSON and many others). Rather than creating expression types for each, this type represents an arbitrary expression with one operand and an operator. Inheritance System.Object System.Linq.Expressions.Expression CustomUnaryExpression Inherited Members System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Block(System.Type, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Type) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.String, System.Type[], System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Call(System.Type, System.String, System.Type[], System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Catch(System.Type, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Catch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo) System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Constant(System.Object) System.Linq.Expressions.Expression.Constant(System.Object, System.Type) System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget, System.Type) System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo, System.Int32, System.Int32, System.Int32, System.Int32) System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Default(System.Type) System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Empty() System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.Reflection.FieldInfo) System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.String) System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.Type, System.String) System.Linq.Expressions.Expression.GetActionType(System.Type[]) System.Linq.Expressions.Expression.GetDelegateType(System.Type[]) System.Linq.Expressions.Expression.GetFuncType(System.Type[]) System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Type) System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Label() System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Label(System.String) System.Linq.Expressions.Expression.Label(System.Type) System.Linq.Expressions.Expression.Label(System.Type, System.String) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>) System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Linq.Expressions.ElementInit[]) System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>) System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Linq.Expressions.ElementInit[]) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.ElementInit[]) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.MakeCatchBlock(System.Type, System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression, System.Reflection.MemberInfo) System.Linq.Expressions.Expression.MakeTry(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>) System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>) System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Linq.Expressions.MemberBinding[]) System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>) System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Linq.Expressions.MemberBinding[]) System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>) System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.MemberBinding[]) System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo) System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>) System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Reflection.MemberInfo[]) System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.New(System.Type) System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Parameter(System.Type) System.Linq.Expressions.Expression.Parameter(System.Type, System.String) System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Type, System.String) System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression, System.String) System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Reduce() System.Linq.Expressions.Expression.ReduceAndCheck() System.Linq.Expressions.Expression.ReduceExtensions() System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Rethrow() System.Linq.Expressions.Expression.Rethrow(System.Type) System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget) System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Type) System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>) System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[]) System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression) System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[]) System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>) System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[]) System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[]) System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>) System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[]) System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>) System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[]) System.Linq.Expressions.Expression.SymbolDocument(System.String) System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid) System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid, System.Guid) System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid, System.Guid, System.Guid) System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[]) System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[]) System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.TryGetActionType(System.Type[], System.Type) System.Linq.Expressions.Expression.TryGetFuncType(System.Type[], System.Type) System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression) System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression, System.Reflection.MethodInfo) System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression, System.Type) System.Linq.Expressions.Expression.Variable(System.Type) System.Linq.Expressions.Expression.Variable(System.Type, System.String) System.Linq.Expressions.Expression.CanReduce System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class CustomUnaryExpression : Expression Constructors | Improve this Doc View Source CustomUnaryExpression(Expression, String, Type, Boolean) Constructs a CustomUnaryExpression . Declaration public CustomUnaryExpression(Expression operand, string unaryOperator, Type type, bool postfix = false) Parameters Type Name Description System.Linq.Expressions.Expression operand The expression acted on by the unaryOperator . System.String unaryOperator The operator symbol acting on the expression. System.Type type The result type. System.Boolean postfix True if the unaryOperator follows the operand; otherwise, false. Exceptions Type Condition System.ArgumentNullException Properties | Improve this Doc View Source NodeType Declaration public override ExpressionType NodeType { get; } Property Value Type Description System.Linq.Expressions.ExpressionType Overrides System.Linq.Expressions.Expression.NodeType | Improve this Doc View Source Operand The expression acted on by the operator. Declaration public Expression Operand { get; } Property Value Type Description System.Linq.Expressions.Expression | Improve this Doc View Source Operator The operator. Declaration public string Operator { get; } Property Value Type Description System.String | Improve this Doc View Source Postfix True if the operator follows the operand; otherwise, false. Declaration public bool Postfix { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Type Declaration public override Type Type { get; } Property Value Type Description System.Type Overrides System.Linq.Expressions.Expression.Type Methods | Improve this Doc View Source Accept(ExpressionVisitor) Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Linq.Expressions.Expression.ToString() | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression Overrides System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgFunctionExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.PgFunctionExpression.html",
    "title": "Class PgFunctionExpression | Npgsql Documentation",
    "keywords": "Class PgFunctionExpression Represents a SQL function call expression, supporting PostgreSQL's named parameter notation. Inheritance System.Object PgFunctionExpression Implements System.IEquatable < PgFunctionExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class PgFunctionExpression : SqlExpression, IEquatable<PgFunctionExpression> Constructors | Improve this Doc View Source PgFunctionExpression(SqlExpression, String, IReadOnlyList<SqlExpression>, IReadOnlyDictionary<String, SqlExpression>, Type, RelationalTypeMapping) Initializes a new instance of the PgFunctionExpression class. Declaration public PgFunctionExpression(SqlExpression instance, string functionName, IReadOnlyList<SqlExpression> positionalArguments, IReadOnlyDictionary<string, SqlExpression> namedArguments, Type returnType, RelationalTypeMapping typeMapping = null) Parameters Type Name Description SqlExpression instance The instance on which the function is called. System.String functionName Name of the function. System.Collections.Generic.IReadOnlyList < SqlExpression > positionalArguments The positional arguments. System.Collections.Generic.IReadOnlyDictionary < System.String , SqlExpression > namedArguments The named arguments. System.Type returnType The return type. RelationalTypeMapping typeMapping The type mapping corresponding to the return type, or null to allow inference. | Improve this Doc View Source PgFunctionExpression(SqlExpression, String, IReadOnlyList<SqlExpression>, Type, RelationalTypeMapping) Initializes a new instance of the PgFunctionExpression class. Declaration public PgFunctionExpression(SqlExpression instance, string functionName, IReadOnlyList<SqlExpression> positionalArguments, Type returnType, RelationalTypeMapping typeMapping = null) Parameters Type Name Description SqlExpression instance The instance on which the function is called. System.String functionName Name of the function. System.Collections.Generic.IReadOnlyList < SqlExpression > positionalArguments The positional arguments. System.Type returnType The return type. RelationalTypeMapping typeMapping The type mapping corresponding to the return type, or null to allow inference. | Improve this Doc View Source PgFunctionExpression(String, IReadOnlyDictionary<String, SqlExpression>, Type, RelationalTypeMapping) Initializes a new instance of the PgFunctionExpression class. Declaration public PgFunctionExpression(string functionName, IReadOnlyDictionary<string, SqlExpression> namedArguments, Type returnType, RelationalTypeMapping typeMapping = null) Parameters Type Name Description System.String functionName Name of the function. System.Collections.Generic.IReadOnlyDictionary < System.String , SqlExpression > namedArguments The named arguments. System.Type returnType The return type. RelationalTypeMapping typeMapping The type mapping corresponding to the return type, or null to allow inference. | Improve this Doc View Source PgFunctionExpression(String, IReadOnlyList<SqlExpression>, Type, RelationalTypeMapping) Initializes a new instance of the PgFunctionExpression class. Declaration public PgFunctionExpression(string functionName, IReadOnlyList<SqlExpression> positionalArguments, Type returnType, RelationalTypeMapping typeMapping = null) Parameters Type Name Description System.String functionName Name of the function. System.Collections.Generic.IReadOnlyList < SqlExpression > positionalArguments The positional arguments. System.Type returnType The return type. RelationalTypeMapping typeMapping The type mapping corresponding to the return type, or null to allow inference. | Improve this Doc View Source PgFunctionExpression(String, String, IReadOnlyList<SqlExpression>, Type, RelationalTypeMapping) Initializes a new instance of the PgFunctionExpression class. Declaration public PgFunctionExpression(string functionName, string schema, IReadOnlyList<SqlExpression> positionalArguments, Type returnType, RelationalTypeMapping typeMapping = null) Parameters Type Name Description System.String functionName Name of the function. System.String schema The schema this function exists in if any. System.Collections.Generic.IReadOnlyList < SqlExpression > positionalArguments The positional arguments. System.Type returnType The return type. RelationalTypeMapping typeMapping The type mapping corresponding to the return type, or null to allow inference. | Improve this Doc View Source PgFunctionExpression(String, Type, RelationalTypeMapping) Initializes a new instance of the PgFunctionExpression class. Declaration public PgFunctionExpression(string functionName, Type returnType, RelationalTypeMapping typeMapping = null) Parameters Type Name Description System.String functionName Name of the function. System.Type returnType The return type. RelationalTypeMapping typeMapping The type mapping corresponding to the return type, or null to allow inference. Properties | Improve this Doc View Source FunctionName Gets the name of the function. Declaration public virtual string FunctionName { get; } Property Value Type Description System.String The name of the function. | Improve this Doc View Source Instance The instance. Declaration public virtual SqlExpression Instance { get; } Property Value Type Description SqlExpression | Improve this Doc View Source NamedArguments The named arguments. Declaration public virtual IReadOnlyDictionary<string, SqlExpression> NamedArguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyDictionary < System.String , SqlExpression > | Improve this Doc View Source PositionalArguments The positional arguments. Declaration public virtual IReadOnlyList<SqlExpression> PositionalArguments { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < SqlExpression > | Improve this Doc View Source Schema Gets the name of the schema. Declaration public virtual string Schema { get; } Property Value Type Description System.String The name of the schema. Methods | Improve this Doc View Source Accept(ExpressionVisitor) Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source ApplyTypeMapping(RelationalTypeMapping) Declaration public virtual PgFunctionExpression ApplyTypeMapping(RelationalTypeMapping typeMapping) Parameters Type Name Description RelationalTypeMapping typeMapping Returns Type Description PgFunctionExpression | Improve this Doc View Source Equals(PgFunctionExpression) Declaration public bool Equals(PgFunctionExpression other) Parameters Type Name Description PgFunctionExpression other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration public override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source Update(SqlExpression, IReadOnlyList<SqlExpression>, IReadOnlyDictionary<String, SqlExpression>) Declaration public PgFunctionExpression Update(SqlExpression instance, IReadOnlyList<SqlExpression> positionalArguments, IReadOnlyDictionary<string, SqlExpression> namedArguments) Parameters Type Name Description SqlExpression instance System.Collections.Generic.IReadOnlyList < SqlExpression > positionalArguments System.Collections.Generic.IReadOnlyDictionary < System.String , SqlExpression > namedArguments Returns Type Description PgFunctionExpression | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression Implements System.IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRegconfigTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlRegconfigTypeMapping.html",
    "title": "Class NpgsqlRegconfigTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlRegconfigTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlRegconfigTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRegconfigTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlRegconfigTypeMapping() Declaration public NpgsqlRegconfigTypeMapping() | Improve this Doc View Source NpgsqlRegconfigTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlRegconfigTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NullSortOrder.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.NullSortOrder.html",
    "title": "Enum NullSortOrder | Npgsql Documentation",
    "keywords": "Enum NullSortOrder Options for modifying sort ordering of NULL -values in indexes. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum NullSortOrder Fields Name Description NullsFirst Specifies that nulls sort before non-nulls. NullsLast Specifies that nulls sort after non-nulls. Unspecified Represents an unspecified sort order. The database default will be used."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.NpgsqlCreateDatabaseOperation.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.NpgsqlCreateDatabaseOperation.html",
    "title": "Class NpgsqlCreateDatabaseOperation | Npgsql Documentation",
    "keywords": "Class NpgsqlCreateDatabaseOperation Inheritance System.Object NpgsqlCreateDatabaseOperation Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCreateDatabaseOperation : MigrationOperation Properties | Improve this Doc View Source Name Declaration public virtual string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Tablespace Declaration public virtual string Tablespace { get; set; } Property Value Type Description System.String | Improve this Doc View Source Template Declaration public virtual string Template { get; set; } Property Value Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.NpgsqlCodeGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.NpgsqlCodeGenerator.html",
    "title": "Class NpgsqlCodeGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlCodeGenerator The default code generator for Npgsql. Inheritance System.Object NpgsqlCodeGenerator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCodeGenerator : ProviderCodeGenerator Constructors | Improve this Doc View Source NpgsqlCodeGenerator(ProviderCodeGeneratorDependencies) Constructs an instance of the NpgsqlCodeGenerator class. Declaration public NpgsqlCodeGenerator(ProviderCodeGeneratorDependencies dependencies) Parameters Type Name Description ProviderCodeGeneratorDependencies dependencies The dependencies. Methods | Improve this Doc View Source GenerateUseProvider(String, MethodCallCodeFragment) Declaration public override MethodCallCodeFragment GenerateUseProvider(string connectionString, MethodCallCodeFragment providerOptions) Parameters Type Name Description System.String connectionString MethodCallCodeFragment providerOptions Returns Type Description MethodCallCodeFragment"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.RegexMatchExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.RegexMatchExpression.html",
    "title": "Class RegexMatchExpression | Npgsql Documentation",
    "keywords": "Class RegexMatchExpression Inheritance System.Object RegexMatchExpression Implements System.IEquatable < RegexMatchExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class RegexMatchExpression : SqlExpression, IEquatable<RegexMatchExpression> Constructors | Improve this Doc View Source RegexMatchExpression(SqlExpression, SqlExpression, RegexOptions, RelationalTypeMapping) Constructs a RegexMatchExpression . Declaration public RegexMatchExpression(SqlExpression match, SqlExpression pattern, RegexOptions options, RelationalTypeMapping typeMapping) Parameters Type Name Description SqlExpression match The expression to match. SqlExpression pattern The pattern to match. System.Text.RegularExpressions.RegexOptions options The options for regular expression evaluation. RelationalTypeMapping typeMapping The type mapping for the expression. Properties | Improve this Doc View Source Match The match expression. Declaration public virtual SqlExpression Match { get; } Property Value Type Description SqlExpression | Improve this Doc View Source Options The options for regular expression evaluation. Declaration public RegexOptions Options { get; } Property Value Type Description System.Text.RegularExpressions.RegexOptions | Improve this Doc View Source Pattern The pattern to match. Declaration public virtual SqlExpression Pattern { get; } Property Value Type Description SqlExpression | Improve this Doc View Source Type Declaration public override Type Type { get; } Property Value Type Description System.Type Methods | Improve this Doc View Source Accept(ExpressionVisitor) Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source Equals(RegexMatchExpression) Declaration public bool Equals(RegexMatchExpression other) Parameters Type Name Description RegexMatchExpression other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object other) Parameters Type Name Description System.Object other Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration public override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source Update(SqlExpression, SqlExpression) Declaration public RegexMatchExpression Update(SqlExpression match, SqlExpression pattern) Parameters Type Name Description SqlExpression match SqlExpression pattern Returns Type Description RegexMatchExpression | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression Implements System.IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampLocalDateTimeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampLocalDateTimeMapping.html",
    "title": "Class TimestampLocalDateTimeMapping | Npgsql Documentation",
    "keywords": "Class TimestampLocalDateTimeMapping Inheritance System.Object NpgsqlTypeMapping TimestampLocalDateTimeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimestampLocalDateTimeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source TimestampLocalDateTimeMapping() Declaration public TimestampLocalDateTimeMapping() | Improve this Doc View Source TimestampLocalDateTimeMapping(RelationalTypeMappingParameters) Declaration protected TimestampLocalDateTimeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description System.String storeType System.Nullable < System.Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(ValueConverter) Declaration public override CoreTypeMapping Clone(ValueConverter converter) Parameters Type Name Description ValueConverter converter Returns Type Description CoreTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions.html",
    "title": "Class NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions NetTopologySuite specific extension methods for NpgsqlDbContextOptionsBuilder . Inheritance System.Object NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public static class NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions Methods | Improve this Doc View Source UseNetTopologySuite(NpgsqlDbContextOptionsBuilder, CoordinateSequenceFactory, PrecisionModel, Ordinates, Boolean) Use NetTopologySuite to access SQL Server spatial data. Declaration public static NpgsqlDbContextOptionsBuilder UseNetTopologySuite(this NpgsqlDbContextOptionsBuilder optionsBuilder, CoordinateSequenceFactory coordinateSequenceFactory = null, PrecisionModel precisionModel = null, Ordinates handleOrdinates = null, bool geographyAsDefault = false) Parameters Type Name Description NpgsqlDbContextOptionsBuilder optionsBuilder CoordinateSequenceFactory coordinateSequenceFactory PrecisionModel precisionModel Ordinates handleOrdinates System.Boolean geographyAsDefault Returns Type Description NpgsqlDbContextOptionsBuilder The options builder so that further configuration can be chained."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlPropertyExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlPropertyExtensions.html",
    "title": "Class NpgsqlPropertyExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlPropertyExtensions Inheritance System.Object NpgsqlPropertyExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlPropertyExtensions Methods | Improve this Doc View Source FindHiLoSequence(IProperty) Finds the in the model to use for the hi-lo pattern. Declaration public static ISequence FindHiLoSequence(this IProperty property) Parameters Type Name Description IProperty property Returns Type Description ISequence The sequence to use, or null if no sequence exists in the model. | Improve this Doc View Source GetHiLoSequenceName(IProperty) Returns the name to use for the hi-lo sequence. Declaration public static string GetHiLoSequenceName(this IProperty property) Parameters Type Name Description IProperty property The property. Returns Type Description System.String The name to use for the hi-lo sequence. | Improve this Doc View Source GetHiLoSequenceNameConfigurationSource(IConventionProperty) Returns the for the hi-lo sequence name. Declaration public static ConfigurationSource? GetHiLoSequenceNameConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description System.Nullable < ConfigurationSource > The for the hi-lo sequence name. | Improve this Doc View Source GetHiLoSequenceSchema(IProperty) Returns the schema to use for the hi-lo sequence. Declaration public static string GetHiLoSequenceSchema(this IProperty property) Parameters Type Name Description IProperty property The property. Returns Type Description System.String The schema to use for the hi-lo sequence. | Improve this Doc View Source GetHiLoSequenceSchemaConfigurationSource(IConventionProperty) Returns the for the hi-lo sequence schema. Declaration public static ConfigurationSource? GetHiLoSequenceSchemaConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description System.Nullable < ConfigurationSource > The for the hi-lo sequence schema. | Improve this Doc View Source GetIdentityIncrementBy(IProperty) Returns the identity increment value. Declaration public static long? GetIdentityIncrementBy(this IProperty property) Parameters Type Name Description IProperty property The property. Returns Type Description System.Nullable < System.Int64 > The identity increment value. | Improve this Doc View Source GetIdentityIsCyclic(IProperty) Returns whether the identity's sequence is cyclic. Declaration public static bool? GetIdentityIsCyclic(this IProperty property) Parameters Type Name Description IProperty property The property. Returns Type Description System.Nullable < System.Boolean > Whether the identity's sequence is cyclic. | Improve this Doc View Source GetIdentityMaxValue(IProperty) Returns the identity maximum value. Declaration public static long? GetIdentityMaxValue(this IProperty property) Parameters Type Name Description IProperty property The property. Returns Type Description System.Nullable < System.Int64 > The identity maximum value. | Improve this Doc View Source GetIdentityMinValue(IProperty) Returns the identity minimum value. Declaration public static long? GetIdentityMinValue(this IProperty property) Parameters Type Name Description IProperty property The property. Returns Type Description System.Nullable < System.Int64 > The identity minimum value. | Improve this Doc View Source GetIdentityNumbersToCache(IProperty) Returns the number of sequence numbers to be preallocated and stored in memory for faster access. Defaults to 1 (no cache). Declaration public static long? GetIdentityNumbersToCache(this IProperty property) Parameters Type Name Description IProperty property The property. Returns Type Description System.Nullable < System.Int64 > The number of sequence numbers to be cached. | Improve this Doc View Source GetIdentityOptionsConfigurationSource(IConventionProperty) Returns the for the identity sequence options. Declaration public static ConfigurationSource? GetIdentityOptionsConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description System.Nullable < ConfigurationSource > The for the identity sequence options. | Improve this Doc View Source GetIdentityStartValue(IProperty) Returns the identity start value. Declaration public static long? GetIdentityStartValue(this IProperty property) Parameters Type Name Description IProperty property The property. Returns Type Description System.Nullable < System.Int64 > The identity start value. | Improve this Doc View Source GetValueGenerationStrategy(IProperty) Returns the NpgsqlValueGenerationStrategy to use for the property. If no strategy is set for the property, then the strategy to use will be taken from the . Declaration public static NpgsqlValueGenerationStrategy GetValueGenerationStrategy(this IProperty property) Parameters Type Name Description IProperty property Returns Type Description NpgsqlValueGenerationStrategy The strategy, or None if none was set. | Improve this Doc View Source GetValueGenerationStrategyConfigurationSource(IConventionProperty) Returns the for the NpgsqlValueGenerationStrategy . Declaration public static ConfigurationSource? GetValueGenerationStrategyConfigurationSource(this IConventionProperty property) Parameters Type Name Description IConventionProperty property The property. Returns Type Description System.Nullable < ConfigurationSource > The for the NpgsqlValueGenerationStrategy . | Improve this Doc View Source IsCompatibleWithValueGeneration(IProperty) Returns a value indicating whether the property is compatible with any NpgsqlValueGenerationStrategy . Declaration public static bool IsCompatibleWithValueGeneration(IProperty property) Parameters Type Name Description IProperty property The property. Returns Type Description System.Boolean true if compatible. | Improve this Doc View Source RemoveHiLoOptions(IConventionProperty) Removes all identity sequence annotations from the property. Declaration public static void RemoveHiLoOptions(this IConventionProperty property) Parameters Type Name Description IConventionProperty property | Improve this Doc View Source RemoveHiLoOptions(IMutableProperty) Removes all identity sequence annotations from the property. Declaration public static void RemoveHiLoOptions(this IMutableProperty property) Parameters Type Name Description IMutableProperty property | Improve this Doc View Source RemoveIdentityOptions(IConventionProperty) Removes identity sequence options from the property. Declaration public static void RemoveIdentityOptions(this IConventionProperty property) Parameters Type Name Description IConventionProperty property | Improve this Doc View Source RemoveIdentityOptions(IMutableProperty) Removes identity sequence options from the property. Declaration public static void RemoveIdentityOptions(this IMutableProperty property) Parameters Type Name Description IMutableProperty property | Improve this Doc View Source SetHiLoSequenceName(IConventionProperty, String, Boolean) Sets the name to use for the hi-lo sequence. Declaration public static void SetHiLoSequenceName(this IConventionProperty property, string name, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. System.String name The sequence name to use. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. | Improve this Doc View Source SetHiLoSequenceName(IMutableProperty, String) Sets the name to use for the hi-lo sequence. Declaration public static void SetHiLoSequenceName(this IMutableProperty property, string name) Parameters Type Name Description IMutableProperty property The property. System.String name The sequence name to use. | Improve this Doc View Source SetHiLoSequenceSchema(IConventionProperty, String, Boolean) Sets the schema to use for the hi-lo sequence. Declaration public static void SetHiLoSequenceSchema(this IConventionProperty property, string schema, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. System.String schema The schema to use. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. | Improve this Doc View Source SetHiLoSequenceSchema(IMutableProperty, String) Sets the schema to use for the hi-lo sequence. Declaration public static void SetHiLoSequenceSchema(this IMutableProperty property, string schema) Parameters Type Name Description IMutableProperty property The property. System.String schema The schema to use. | Improve this Doc View Source SetIdentityIncrementBy(IConventionProperty, Nullable<Int64>, Boolean) Sets the identity increment value. Declaration public static void SetIdentityIncrementBy(this IConventionProperty property, long? incrementBy, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. System.Nullable < System.Int64 > incrementBy The value to set. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. | Improve this Doc View Source SetIdentityIncrementBy(IMutableProperty, Nullable<Int64>) Sets the identity increment value. Declaration public static void SetIdentityIncrementBy(this IMutableProperty property, long? incrementBy) Parameters Type Name Description IMutableProperty property The property. System.Nullable < System.Int64 > incrementBy The value to set. | Improve this Doc View Source SetIdentityIsCyclic(IConventionProperty, Nullable<Boolean>, Boolean) Sets whether the identity's sequence is cyclic. Declaration public static void SetIdentityIsCyclic(this IConventionProperty property, bool? isCyclic, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. System.Nullable < System.Boolean > isCyclic The value to set. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. | Improve this Doc View Source SetIdentityIsCyclic(IMutableProperty, Nullable<Boolean>) Sets whether the identity's sequence is cyclic. Declaration public static void SetIdentityIsCyclic(this IMutableProperty property, bool? isCyclic) Parameters Type Name Description IMutableProperty property The property. System.Nullable < System.Boolean > isCyclic The value to set. | Improve this Doc View Source SetIdentityMaxValue(IConventionProperty, Nullable<Int64>, Boolean) Sets the identity maximum value. Declaration public static void SetIdentityMaxValue(this IConventionProperty property, long? maxValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. System.Nullable < System.Int64 > maxValue The value to set. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. | Improve this Doc View Source SetIdentityMaxValue(IMutableProperty, Nullable<Int64>) Sets the identity maximum value. Declaration public static void SetIdentityMaxValue(this IMutableProperty property, long? maxValue) Parameters Type Name Description IMutableProperty property The property. System.Nullable < System.Int64 > maxValue The value to set. | Improve this Doc View Source SetIdentityMinValue(IConventionProperty, Nullable<Int64>, Boolean) Sets the identity minimum value. Declaration public static void SetIdentityMinValue(this IConventionProperty property, long? minValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. System.Nullable < System.Int64 > minValue The value to set. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. | Improve this Doc View Source SetIdentityMinValue(IMutableProperty, Nullable<Int64>) Sets the identity minimum value. Declaration public static void SetIdentityMinValue(this IMutableProperty property, long? minValue) Parameters Type Name Description IMutableProperty property The property. System.Nullable < System.Int64 > minValue The value to set. | Improve this Doc View Source SetIdentityNumbersToCache(IConventionProperty, Nullable<Int64>, Boolean) Sets the number of sequence numbers to be preallocated and stored in memory for faster access. Declaration public static void SetIdentityNumbersToCache(this IConventionProperty property, long? numbersToCache, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. System.Nullable < System.Int64 > numbersToCache The value to set. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. | Improve this Doc View Source SetIdentityNumbersToCache(IMutableProperty, Nullable<Int64>) Sets the number of sequence numbers to be preallocated and stored in memory for faster access. Declaration public static void SetIdentityNumbersToCache(this IMutableProperty property, long? numbersToCache) Parameters Type Name Description IMutableProperty property The property. System.Nullable < System.Int64 > numbersToCache The value to set. | Improve this Doc View Source SetIdentityStartValue(IConventionProperty, Nullable<Int64>, Boolean) Sets the identity start value. Declaration public static void SetIdentityStartValue(this IConventionProperty property, long? startValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. System.Nullable < System.Int64 > startValue The value to set. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. | Improve this Doc View Source SetIdentityStartValue(IMutableProperty, Nullable<Int64>) Sets the identity start value. Declaration public static void SetIdentityStartValue(this IMutableProperty property, long? startValue) Parameters Type Name Description IMutableProperty property The property. System.Nullable < System.Int64 > startValue The value to set. | Improve this Doc View Source SetValueGenerationStrategy(IConventionProperty, Nullable<NpgsqlValueGenerationStrategy>, Boolean) Sets the NpgsqlValueGenerationStrategy to use for the property. Declaration public static void SetValueGenerationStrategy(this IConventionProperty property, NpgsqlValueGenerationStrategy? value, bool fromDataAnnotation = false) Parameters Type Name Description IConventionProperty property The property. System.Nullable < NpgsqlValueGenerationStrategy > value The strategy to use. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. | Improve this Doc View Source SetValueGenerationStrategy(IMutableProperty, Nullable<NpgsqlValueGenerationStrategy>) Sets the NpgsqlValueGenerationStrategy to use for the property. Declaration public static void SetValueGenerationStrategy(this IMutableProperty property, NpgsqlValueGenerationStrategy? value) Parameters Type Name Description IMutableProperty property The property. System.Nullable < NpgsqlValueGenerationStrategy > value The strategy to use."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlAnnotationCodeGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlAnnotationCodeGenerator.html",
    "title": "Class NpgsqlAnnotationCodeGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlAnnotationCodeGenerator Inheritance System.Object NpgsqlAnnotationCodeGenerator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlAnnotationCodeGenerator : AnnotationCodeGenerator Constructors | Improve this Doc View Source NpgsqlAnnotationCodeGenerator(AnnotationCodeGeneratorDependencies) Declaration public NpgsqlAnnotationCodeGenerator(AnnotationCodeGeneratorDependencies dependencies) Parameters Type Name Description AnnotationCodeGeneratorDependencies dependencies Methods | Improve this Doc View Source GenerateFluentApi(IEntityType, IAnnotation) Declaration public override MethodCallCodeFragment GenerateFluentApi(IEntityType entityType, IAnnotation annotation) Parameters Type Name Description IEntityType entityType IAnnotation annotation Returns Type Description MethodCallCodeFragment | Improve this Doc View Source GenerateFluentApi(IIndex, IAnnotation) Declaration public override MethodCallCodeFragment GenerateFluentApi(IIndex index, IAnnotation annotation) Parameters Type Name Description IIndex index IAnnotation annotation Returns Type Description MethodCallCodeFragment | Improve this Doc View Source GenerateFluentApi(IModel, IAnnotation) Declaration public override MethodCallCodeFragment GenerateFluentApi(IModel model, IAnnotation annotation) Parameters Type Name Description IModel model IAnnotation annotation Returns Type Description MethodCallCodeFragment | Improve this Doc View Source GenerateFluentApi(IProperty, IAnnotation) Declaration public override MethodCallCodeFragment GenerateFluentApi(IProperty property, IAnnotation annotation) Parameters Type Name Description IProperty property IAnnotation annotation Returns Type Description MethodCallCodeFragment | Improve this Doc View Source IsHandledByConvention(IIndex, IAnnotation) Declaration public override bool IsHandledByConvention(IIndex index, IAnnotation annotation) Parameters Type Name Description IIndex index IAnnotation annotation Returns Type Description System.Boolean | Improve this Doc View Source IsHandledByConvention(IModel, IAnnotation) Declaration public override bool IsHandledByConvention(IModel model, IAnnotation annotation) Parameters Type Name Description IModel model IAnnotation annotation Returns Type Description System.Boolean | Improve this Doc View Source IsHandledByConvention(IProperty, IAnnotation) Declaration public override bool IsHandledByConvention(IProperty property, IAnnotation annotation) Parameters Type Name Description IProperty property IAnnotation annotation Returns Type Description System.Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.CockroachDbAnnotationNames.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.CockroachDbAnnotationNames.html",
    "title": "Class CockroachDbAnnotationNames | Npgsql Documentation",
    "keywords": "Class CockroachDbAnnotationNames Inheritance System.Object CockroachDbAnnotationNames Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class CockroachDbAnnotationNames Fields | Improve this Doc View Source InterleaveInParent Declaration public const string InterleaveInParent = \"Npgsql:CockroachDB:InterleaveInParent\" Field Value Type Description System.String | Improve this Doc View Source Prefix Declaration public const string Prefix = \"Npgsql:CockroachDB:\" Field Value Type Description System.String"
  },
  "doc/api/Npgsql.NpgsqlFactory.html": {
    "href": "doc/api/Npgsql.NpgsqlFactory.html",
    "title": "Class NpgsqlFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlFactory A factory to create instances of various Npgsql objects. Inheritance System.Object System.Data.Common.DbProviderFactory NpgsqlFactory Implements System.IServiceProvider Inherited Members System.Data.Common.DbProviderFactory.CreateDataSourceEnumerator() System.Data.Common.DbProviderFactory.CanCreateDataSourceEnumerator System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax [Serializable] public sealed class NpgsqlFactory : DbProviderFactory, IServiceProvider Fields | Improve this Doc View Source Instance Gets an instance of the NpgsqlFactory . This can be used to retrieve strongly typed data objects. Declaration public static readonly NpgsqlFactory Instance Field Value Type Description NpgsqlFactory Properties | Improve this Doc View Source CanCreateCommandBuilder Specifies whether the specific System.Data.Common.DbProviderFactory supports the System.Data.Common.DbCommandBuilder class. Declaration public override bool CanCreateCommandBuilder { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbProviderFactory.CanCreateCommandBuilder | Improve this Doc View Source CanCreateDataAdapter Specifies whether the specific System.Data.Common.DbProviderFactory supports the System.Data.Common.DbDataAdapter class. Declaration public override bool CanCreateDataAdapter { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbProviderFactory.CanCreateDataAdapter Methods | Improve this Doc View Source CreateCommand() Returns a strongly typed System.Data.Common.DbCommand instance. Declaration public override DbCommand CreateCommand() Returns Type Description System.Data.Common.DbCommand Overrides System.Data.Common.DbProviderFactory.CreateCommand() | Improve this Doc View Source CreateCommandBuilder() Returns a strongly typed System.Data.Common.DbCommandBuilder instance. Declaration public override DbCommandBuilder CreateCommandBuilder() Returns Type Description System.Data.Common.DbCommandBuilder Overrides System.Data.Common.DbProviderFactory.CreateCommandBuilder() | Improve this Doc View Source CreateConnection() Returns a strongly typed System.Data.Common.DbConnection instance. Declaration public override DbConnection CreateConnection() Returns Type Description System.Data.Common.DbConnection Overrides System.Data.Common.DbProviderFactory.CreateConnection() | Improve this Doc View Source CreateConnectionStringBuilder() Returns a strongly typed System.Data.Common.DbConnectionStringBuilder instance. Declaration public override DbConnectionStringBuilder CreateConnectionStringBuilder() Returns Type Description System.Data.Common.DbConnectionStringBuilder Overrides System.Data.Common.DbProviderFactory.CreateConnectionStringBuilder() | Improve this Doc View Source CreateDataAdapter() Returns a strongly typed System.Data.Common.DbDataAdapter instance. Declaration public override DbDataAdapter CreateDataAdapter() Returns Type Description System.Data.Common.DbDataAdapter Overrides System.Data.Common.DbProviderFactory.CreateDataAdapter() | Improve this Doc View Source CreateParameter() Returns a strongly typed System.Data.Common.DbParameter instance. Declaration public override DbParameter CreateParameter() Returns Type Description System.Data.Common.DbParameter Overrides System.Data.Common.DbProviderFactory.CreateParameter() | Improve this Doc View Source GetService(Type) Gets the service object of the specified type. Declaration public object GetService(Type serviceType) Parameters Type Name Description System.Type serviceType An object that specifies the type of service object to get. Returns Type Description System.Object A service object of type serviceType, or null if there is no service object of type serviceType. Implements System.IServiceProvider"
  },
  "doc/api/Npgsql.Schema.html": {
    "href": "doc/api/Npgsql.Schema.html",
    "title": "Namespace Npgsql.Schema | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Schema Classes NpgsqlDbColumn Provides schema information about a column."
  },
  "doc/api/NpgsqlTypes.NpgsqlTid.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTid.html",
    "title": "Struct NpgsqlTid | Npgsql Documentation",
    "keywords": "Struct NpgsqlTid Represents a PostgreSQL tid value Implements System.IEquatable < NpgsqlTid > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct NpgsqlTid : IEquatable<NpgsqlTid> Remarks http://www.postgresql.org/docs/current/static/datatype-oid.html Constructors | Improve this Doc View Source NpgsqlTid(UInt32, UInt16) Declaration public NpgsqlTid(uint blockNumber, ushort offsetNumber) Parameters Type Name Description System.UInt32 blockNumber System.UInt16 offsetNumber Properties | Improve this Doc View Source BlockNumber Block number Declaration public uint BlockNumber { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source OffsetNumber Tuple index within block Declaration public ushort OffsetNumber { get; } Property Value Type Description System.UInt16 Methods | Improve this Doc View Source Equals(NpgsqlTid) Declaration public bool Equals(NpgsqlTid other) Parameters Type Name Description NpgsqlTid other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlTid, NpgsqlTid) Declaration public static bool operator ==(NpgsqlTid left, NpgsqlTid right) Parameters Type Name Description NpgsqlTid left NpgsqlTid right Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlTid, NpgsqlTid) Declaration public static bool operator !=(NpgsqlTid left, NpgsqlTid right) Parameters Type Name Description NpgsqlTid left NpgsqlTid right Returns Type Description System.Boolean Implements System.IEquatable<T>"
  },
  "doc/api/Npgsql.PostgresTypes.PostgresArrayType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.PostgresArrayType.html",
    "title": "Class PostgresArrayType | Npgsql Documentation",
    "keywords": "Class PostgresArrayType Represents a PostgreSQL array data type, which can hold several multiple values in a single column. Inheritance System.Object PostgresType PostgresArrayType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class PostgresArrayType : PostgresType Remarks See https://www.postgresql.org/docs/current/static/arrays.html . Constructors | Improve this Doc View Source PostgresArrayType(String, String, UInt32, PostgresType) Constructs a representation of a PostgreSQL array data type. Declaration protected PostgresArrayType(string ns, string internalName, uint oid, PostgresType elementPostgresType) Parameters Type Name Description System.String ns System.String internalName System.UInt32 oid PostgresType elementPostgresType Properties | Improve this Doc View Source Element The PostgreSQL data type of the element contained within this array. Declaration public PostgresType Element { get; } Property Value Type Description PostgresType"
  },
  "doc/api/Npgsql.TypeHandlers.NumericHandlers.Int16Handler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.NumericHandlers.Int16Handler.html",
    "title": "Class Int16Handler | Npgsql Documentation",
    "keywords": "Class Int16Handler A type handler for the PostgreSQL smallint data type. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.Int16 > NpgsqlSimpleTypeHandler < System.Int16 > Int16Handler Implements INpgsqlTypeHandler < System.Int16 > INpgsqlSimpleTypeHandler < System.Int16 > INpgsqlSimpleTypeHandler < System.Byte > INpgsqlSimpleTypeHandler < System.SByte > INpgsqlSimpleTypeHandler < System.Int32 > INpgsqlSimpleTypeHandler < System.Int64 > INpgsqlSimpleTypeHandler < System.Single > INpgsqlSimpleTypeHandler < System.Double > INpgsqlSimpleTypeHandler < System.Decimal > Inherited Members NpgsqlSimpleTypeHandler<Int16>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Int16>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<Int16>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Int16>.Write(Int16, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<Int16>.ValidateAndGetLength(Int16, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Int16>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<Int16>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Int16>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<Int16>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<Int16>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.NumericHandlers Assembly : Npgsql.dll Syntax public class Int16Handler : NpgsqlSimpleTypeHandler<short>, INpgsqlTypeHandler<short>, INpgsqlSimpleTypeHandler<short>, INpgsqlSimpleTypeHandler<byte>, INpgsqlSimpleTypeHandler<sbyte>, INpgsqlSimpleTypeHandler<int>, INpgsqlSimpleTypeHandler<long>, INpgsqlSimpleTypeHandler<float>, INpgsqlSimpleTypeHandler<double>, INpgsqlSimpleTypeHandler<decimal> Remarks See http://www.postgresql.org/docs/current/static/datatype-numeric.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source Int16Handler(PostgresType) Declaration public Int16Handler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override short Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Int16 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Int16>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(Byte, NpgsqlParameter) Declaration public int ValidateAndGetLength(byte value, NpgsqlParameter parameter) Parameters Type Name Description System.Byte value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Decimal, NpgsqlParameter) Declaration public int ValidateAndGetLength(decimal value, NpgsqlParameter parameter) Parameters Type Name Description System.Decimal value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Double, NpgsqlParameter) Declaration public int ValidateAndGetLength(double value, NpgsqlParameter parameter) Parameters Type Name Description System.Double value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Int16, NpgsqlParameter) Declaration public override int ValidateAndGetLength(short value, NpgsqlParameter parameter) Parameters Type Name Description System.Int16 value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Int16>.ValidateAndGetLength(System.Int16, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateAndGetLength(Int32, NpgsqlParameter) Declaration public int ValidateAndGetLength(int value, NpgsqlParameter parameter) Parameters Type Name Description System.Int32 value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Int64, NpgsqlParameter) Declaration public int ValidateAndGetLength(long value, NpgsqlParameter parameter) Parameters Type Name Description System.Int64 value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(SByte, NpgsqlParameter) Declaration public int ValidateAndGetLength(sbyte value, NpgsqlParameter parameter) Parameters Type Name Description System.SByte value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength(Single, NpgsqlParameter) Declaration public int ValidateAndGetLength(float value, NpgsqlParameter parameter) Parameters Type Name Description System.Single value NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source Write(Byte, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(byte value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Byte value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Decimal, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(decimal value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Decimal value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Double, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(double value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Double value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Int16, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(short value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Int16 value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Int16>.Write(System.Int16, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(Int32, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(int value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Int32 value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Int64, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(long value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Int64 value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(SByte, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(sbyte value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.SByte value NpgsqlWriteBuffer buf NpgsqlParameter parameter | Improve this Doc View Source Write(Single, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public void Write(float value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Single value NpgsqlWriteBuffer buf NpgsqlParameter parameter Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<Byte>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration byte INpgsqlSimpleTypeHandler<byte>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Byte | Improve this Doc View Source INpgsqlSimpleTypeHandler<Decimal>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration decimal INpgsqlSimpleTypeHandler<decimal>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Decimal | Improve this Doc View Source INpgsqlSimpleTypeHandler<Double>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration double INpgsqlSimpleTypeHandler<double>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Double | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int32>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration int INpgsqlSimpleTypeHandler<int>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Int32 | Improve this Doc View Source INpgsqlSimpleTypeHandler<Int64>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration long INpgsqlSimpleTypeHandler<long>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Int64 | Improve this Doc View Source INpgsqlSimpleTypeHandler<SByte>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration sbyte INpgsqlSimpleTypeHandler<sbyte>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.SByte | Improve this Doc View Source INpgsqlSimpleTypeHandler<Single>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration float INpgsqlSimpleTypeHandler<float>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Single Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.RawPostgis.html": {
    "href": "doc/api/Npgsql.RawPostgis.html",
    "title": "Namespace Npgsql.RawPostgis | Npgsql Documentation",
    "keywords": "Namespace Npgsql.RawPostgis Classes PostgisRawHandlerFactory"
  },
  "doc/api/NpgsqlTypes.NpgsqlTimeSpan.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTimeSpan.html",
    "title": "Struct NpgsqlTimeSpan | Npgsql Documentation",
    "keywords": "Struct NpgsqlTimeSpan Represents the PostgreSQL interval datatype. Implements System.IComparable System.Collections.IComparer System.IEquatable < NpgsqlTimeSpan > System.IComparable < NpgsqlTimeSpan > System.Collections.Generic.IComparer < NpgsqlTimeSpan > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax [Serializable] public struct NpgsqlTimeSpan : IComparable, IComparer, IEquatable<NpgsqlTimeSpan>, IComparable<NpgsqlTimeSpan>, IComparer<NpgsqlTimeSpan> Remarks PostgreSQL differs from .NET in how it's interval type doesn't assume 24 hours in a day (to deal with 23- and 25-hour days caused by daylight savings adjustments) and has a concept of months that doesn't exist in .NET's System.TimeSpan class. (Neither datatype has any concessions for leap-seconds). For most uses just casting to and from TimeSpan will work correctly — in particular, the results of subtracting one System.DateTime or the PostgreSQL date, time and timestamp types from another should be the same whether you do so in .NET or PostgreSQL — but if the handling of days and months in PostgreSQL is important to your application then you should use this class instead of System.TimeSpan . If you don't know whether these differences are important to your application, they probably arent! Just use System.TimeSpan and do not use this class directly ☺ To avoid forcing unnecessary provider-specific concerns on users who need not be concerned with them a call to System.Data.IDataRecord.GetValue(System.Int32) on a field containing an NpgsqlTimeSpan value will return a System.TimeSpan rather than an NpgsqlTimeSpan . If you need the extra functionality of NpgsqlTimeSpan then use GetInterval(Int32) . Constructors | Improve this Doc View Source NpgsqlTimeSpan(Int32, Int32, Int32, Int32) Initializes a new NpgsqlTimeSpan to the specified number of days, hours, minutes & seconds. Declaration public NpgsqlTimeSpan(int days, int hours, int minutes, int seconds) Parameters Type Name Description System.Int32 days Number of days. System.Int32 hours Number of hours. System.Int32 minutes Number of minutes. System.Int32 seconds Number of seconds. | Improve this Doc View Source NpgsqlTimeSpan(Int32, Int32, Int32, Int32, Int32) Initializes a new NpgsqlTimeSpan to the specified number of days, hours, minutes, seconds & milliseconds. Declaration public NpgsqlTimeSpan(int days, int hours, int minutes, int seconds, int milliseconds) Parameters Type Name Description System.Int32 days Number of days. System.Int32 hours Number of hours. System.Int32 minutes Number of minutes. System.Int32 seconds Number of seconds. System.Int32 milliseconds Number of milliseconds. | Improve this Doc View Source NpgsqlTimeSpan(Int32, Int32, Int32, Int32, Int32, Int32) Initializes a new NpgsqlTimeSpan to the specified number of months, days, hours, minutes, seconds & milliseconds. Declaration public NpgsqlTimeSpan(int months, int days, int hours, int minutes, int seconds, int milliseconds) Parameters Type Name Description System.Int32 months Number of months. System.Int32 days Number of days. System.Int32 hours Number of hours. System.Int32 minutes Number of minutes. System.Int32 seconds Number of seconds. System.Int32 milliseconds Number of milliseconds. | Improve this Doc View Source NpgsqlTimeSpan(Int32, Int32, Int32, Int32, Int32, Int32, Int32) Initializes a new NpgsqlTimeSpan to the specified number of years, months, days, hours, minutes, seconds & milliseconds. Years are calculated exactly equivalent to 12 months. Declaration public NpgsqlTimeSpan(int years, int months, int days, int hours, int minutes, int seconds, int milliseconds) Parameters Type Name Description System.Int32 years Number of years. System.Int32 months Number of months. System.Int32 days Number of days. System.Int32 hours Number of hours. System.Int32 minutes Number of minutes. System.Int32 seconds Number of seconds. System.Int32 milliseconds Number of milliseconds. | Improve this Doc View Source NpgsqlTimeSpan(Int32, Int32, Int64) Initializes a new NpgsqlTimeSpan to the specified number of months, days & ticks. Declaration public NpgsqlTimeSpan(int months, int days, long ticks) Parameters Type Name Description System.Int32 months Number of months. System.Int32 days Number of days. System.Int64 ticks Number of 100ns units. | Improve this Doc View Source NpgsqlTimeSpan(Int64) Initializes a new NpgsqlTimeSpan to the specified number of ticks. Declaration public NpgsqlTimeSpan(long ticks) Parameters Type Name Description System.Int64 ticks A time period expressed in 100ns units. | Improve this Doc View Source NpgsqlTimeSpan(TimeSpan) Initializes a new NpgsqlTimeSpan to hold the same time as a System.TimeSpan Declaration public NpgsqlTimeSpan(TimeSpan timespan) Parameters Type Name Description System.TimeSpan timespan A time period expressed in a System.TimeSpan Fields | Improve this Doc View Source DaysPerMonth Represents the number of days assumed in one month if month justification or unjustifcation is performed. This is set to 30 for consistency with PostgreSQL. Note that this is means that month adjustments cause a year to be taken as 30 × 12 = 360 rather than 356/366 days. Declaration public const int DaysPerMonth = 30 Field Value Type Description System.Int32 | Improve this Doc View Source HoursPerDay Represents the number of hours in one day (assuming no daylight savings adjustments). This field is constant. Declaration public const int HoursPerDay = 24 Field Value Type Description System.Int32 | Improve this Doc View Source MaxValue Represents the maximum NpgsqlTimeSpan . This field is read-only. Declaration public static readonly NpgsqlTimeSpan MaxValue Field Value Type Description NpgsqlTimeSpan | Improve this Doc View Source MinValue Represents the minimum NpgsqlTimeSpan . This field is read-only. Declaration public static readonly NpgsqlTimeSpan MinValue Field Value Type Description NpgsqlTimeSpan | Improve this Doc View Source MonthsPerYear Represents the number of months in a year. This field is constant. Declaration public const int MonthsPerYear = 12 Field Value Type Description System.Int32 | Improve this Doc View Source TicksPerDay Represents the number of ticks (100ns periods) in one day. This field is constant. Declaration public const long TicksPerDay = 864000000000L Field Value Type Description System.Int64 | Improve this Doc View Source TicksPerHour Represents the number of ticks (100ns periods) in one hour. This field is constant. Declaration public const long TicksPerHour = 36000000000L Field Value Type Description System.Int64 | Improve this Doc View Source TicksPerMicrosecond Represents the number of ticks (100ns periods) in one microsecond. This field is constant. Declaration public const long TicksPerMicrosecond = 10L Field Value Type Description System.Int64 | Improve this Doc View Source TicksPerMillsecond Represents the number of ticks (100ns periods) in one millisecond. This field is constant. Declaration public const long TicksPerMillsecond = 10000L Field Value Type Description System.Int64 | Improve this Doc View Source TicksPerMinute Represents the number of ticks (100ns periods) in one minute. This field is constant. Declaration public const long TicksPerMinute = 600000000L Field Value Type Description System.Int64 | Improve this Doc View Source TicksPerMonth Represents the number of ticks (100ns periods) in one day, assuming 30 days per month. DaysPerMonth Declaration public const long TicksPerMonth = 25920000000000L Field Value Type Description System.Int64 | Improve this Doc View Source TicksPerSecond Represents the number of ticks (100ns periods) in one second. This field is constant. Declaration public const long TicksPerSecond = 10000000L Field Value Type Description System.Int64 | Improve this Doc View Source Zero Represents the zero NpgsqlTimeSpan . This field is read-only. Declaration public static readonly NpgsqlTimeSpan Zero Field Value Type Description NpgsqlTimeSpan Properties | Improve this Doc View Source Days Gets the number of days held in the instance. Note that this does not pay attention to a time component with -24 or less hours or 24 or more hours, unless JustifyDays() has been called to produce this instance. Declaration public int Days { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Hours Gets the number of whole hours held in the instance. Note that this can be less than -23 or greater than 23 unless JustifyDays() has been used to produce this instance. Declaration public int Hours { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Microseconds Gets the number of whole microseconds held in the instance. An in the range [-999999, 999999]. Declaration public int Microseconds { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Milliseconds Gets the number of whole milliseconds held in the instance. An in the range [-999, 999]. Declaration public int Milliseconds { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Minutes Gets the number of whole minutes held in the instance. An in the range [-59, 59]. Declaration public int Minutes { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Months Gets the number of months held in the instance. Note that this does not pay attention to a day component with -30 or less days or 30 or more days, unless JustifyMonths() has been called to produce this instance. Declaration public int Months { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Seconds Gets the number of whole seconds held in the instance. An in the range [-59, 59]. Declaration public int Seconds { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Ticks The total number of ticks(100ns units) contained. This is the resolution of the NpgsqlTimeSpan type. This ignores the number of days and months held. If you want them included use UnjustifyInterval() first. The resolution of the PostgreSQL interval type is by default 1µs = 1,000 ns. It may be smaller as follows: interval(0)resolution of 1s (1 second) interval(1)resolution of 100ms = 0.1s (100 milliseconds) interval(2)resolution of 10ms = 0.01s (10 milliseconds) interval(3)resolution of 1ms = 0.001s (1 millisecond) interval(4)resolution of 100µs = 0.0001s (100 microseconds) interval(5)resolution of 10µs = 0.00001s (10 microseconds) interval(6) or intervalresolution of 1µs = 0.000001s (1 microsecond) As such, if the 100-nanosecond resolution is significant to an application, a PostgreSQL interval will not suffice for those purposes. In more frequent cases though, the resolution of the interval suffices. NpgsqlTimeSpan will always suffice to handle the resolution of any interval value, and upon writing to the database, will be rounded to the resolution used. The number of ticks in the instance. Declaration public long Ticks { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Time Returns a System.TimeSpan representing the time component of the instance. Note that this may have a value beyond the range ±23:59:59.9999999 unless JustifyDays() has been called to produce this instance. Declaration public TimeSpan Time { get; } Property Value Type Description System.TimeSpan | Improve this Doc View Source TotalDays The total number of days in the instance, assuming 24 hours in each day and 30 days in a month. Declaration public double TotalDays { get; } Property Value Type Description System.Double | Improve this Doc View Source TotalHours The total number of hours in the instance, assuming 24 hours in each day and 30 days in a month. Declaration public double TotalHours { get; } Property Value Type Description System.Double | Improve this Doc View Source TotalMicroseconds The total number of microseconds in the instance, assuming 24 hours in each day and 30 days in a month. Declaration public double TotalMicroseconds { get; } Property Value Type Description System.Double | Improve this Doc View Source TotalMilliseconds The total number of milliseconds in the instance, assuming 24 hours in each day and 30 days in a month. Declaration public double TotalMilliseconds { get; } Property Value Type Description System.Double | Improve this Doc View Source TotalMinutes The total number of minutes in the instance, assuming 24 hours in each day and 30 days in a month. Declaration public double TotalMinutes { get; } Property Value Type Description System.Double | Improve this Doc View Source TotalMonths The total number of months in the instance, assuming 24 hours in each day and 30 days in a month. Declaration public double TotalMonths { get; } Property Value Type Description System.Double | Improve this Doc View Source TotalSeconds The total number of seconds in the instance, assuming 24 hours in each day and 30 days in a month. Declaration public double TotalSeconds { get; } Property Value Type Description System.Double | Improve this Doc View Source TotalTicks The total number of ticks (100ns units) in the instance, assuming 24 hours in each day and 30 days in a month. Declaration public long TotalTicks { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Add(NpgsqlTimeSpan) Adds another interval to this instance and returns the result. Declaration public NpgsqlTimeSpan Add(NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlTimeSpan interval An NpgsqlTimeSpan to add to this instance. Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan whose values are the sums of the two instances. | Improve this Doc View Source Canonicalize() Produces a canonical NpgslInterval with 0 months and hours in the range of [-23, 23]. While the fact that for many purposes, two different NpgsqlTimeSpan instances could be considered equivalent (e.g. one with 2days, 3hours and one with 1day 27hours) there are different possible canonical forms. E.g. we could move all excess hours into days and all excess days into months and have the most readable form, or we could move everything into the ticks and have the form that allows for the easiest arithmetic) the form chosen has two important properties that make it the best choice. First, it is closest two how System.TimeSpan objects are most often represented. Second, it is compatible with results of many PostgreSQL functions, particularly with age() and the results of subtracting one date, time or timestamp from another. Note that the results of casting a System.TimeSpan to NpgsqlTimeSpan is canonicalised. Declaration public NpgsqlTimeSpan Canonicalize() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan based on this one, but with months converted to multiples of ±30days and with any hours outside of the range [-23, 23] converted into days. | Improve this Doc View Source Compare(NpgsqlTimeSpan, NpgsqlTimeSpan) Compares two NpgsqlTimeSpan instances. Declaration public static int Compare(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The first NpgsqlTimeSpan . NpgsqlTimeSpan y The second NpgsqlTimeSpan . Returns Type Description System.Int32 0 if the two are equal or equivalent. A value greater than zero if x is greater than y, a value less than zero if x is less than y. | Improve this Doc View Source CompareTo(NpgsqlTimeSpan) Compares this instance with another/ Declaration public int CompareTo(NpgsqlTimeSpan other) Parameters Type Name Description NpgsqlTimeSpan other An NpgsqlTimeSpan to compare this with. Returns Type Description System.Int32 0 if the instances are equal or equivalent. A value less than zero if this instance is less than the argument. A value greater than zero if this instance is greater than the instance. | Improve this Doc View Source CompareTo(Object) Compares this instance with another/ Declaration public int CompareTo(object other) Parameters Type Name Description System.Object other An object to compare this with. Returns Type Description System.Int32 0 if the argument is an NpgsqlTimeSpan and the instances are equal or equivalent. A value less than zero if the argument is an NpgsqlTimeSpan and this instance is less than the argument. A value greater than zero if the argument is an NpgsqlTimeSpan and this instance is greater than the instance. Exceptions Type Condition System.ArgumentException The argument is not an NpgsqlTimeSpan . | Improve this Doc View Source Duration() This absolute value of this instance. In the case of some, but not all, components being negative, the rules used for justification are used to determine if the instance is positive or negative. Declaration public NpgsqlTimeSpan Duration() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan whose value is the absolute value of this instance. | Improve this Doc View Source Equals(NpgsqlTimeSpan) Returns true if another NpgsqlTimeSpan is exactly the same as this instance. Declaration public bool Equals(NpgsqlTimeSpan other) Parameters Type Name Description NpgsqlTimeSpan other An NpgsqlTimeSpan for comparison. Returns Type Description System.Boolean true if the two NpgsqlTimeSpan instances are exactly the same, false otherwise. | Improve this Doc View Source Equals(Object) Returns true if another object is an NpgsqlTimeSpan , that is exactly the same as this instance Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj An System.Object for comparison. Returns Type Description System.Boolean true if the argument is an NpgsqlTimeSpan and is exactly the same as this one, false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source FromDays(Double) Creates an NpgsqlTimeSpan from a number of days. Declaration public static NpgsqlTimeSpan FromDays(double days) Parameters Type Name Description System.Double days The number of days in the interval. Returns Type Description NpgsqlTimeSpan A Canonicalize() d NpgsqlTimeSpan with the given number of days. | Improve this Doc View Source FromHours(Double) Creates an NpgsqlTimeSpan from a number of hours. Declaration public static NpgsqlTimeSpan FromHours(double hours) Parameters Type Name Description System.Double hours The number of hours in the interval. Returns Type Description NpgsqlTimeSpan A Canonicalize() d NpgsqlTimeSpan with the given number of hours. | Improve this Doc View Source FromMicroseconds(Double) Creates an NpgsqlTimeSpan from a number of microseconds. Declaration public static NpgsqlTimeSpan FromMicroseconds(double micro) Parameters Type Name Description System.Double micro The number of microseconds in the interval. Returns Type Description NpgsqlTimeSpan A Canonicalize() d NpgsqlTimeSpan with the given number of microseconds. | Improve this Doc View Source FromMilliseconds(Double) Creates an NpgsqlTimeSpan from a number of milliseconds. Declaration public static NpgsqlTimeSpan FromMilliseconds(double milli) Parameters Type Name Description System.Double milli The number of milliseconds in the interval. Returns Type Description NpgsqlTimeSpan A Canonicalize() d NpgsqlTimeSpan with the given number of milliseconds. | Improve this Doc View Source FromMinutes(Double) Creates an NpgsqlTimeSpan from a number of minutes. Declaration public static NpgsqlTimeSpan FromMinutes(double minutes) Parameters Type Name Description System.Double minutes The number of minutes in the interval. Returns Type Description NpgsqlTimeSpan A Canonicalize() d NpgsqlTimeSpan with the given number of minutes. | Improve this Doc View Source FromMonths(Double) Creates an NpgsqlTimeSpan from a number of months. Declaration public static NpgsqlTimeSpan FromMonths(double months) Parameters Type Name Description System.Double months The number of months in the interval. Returns Type Description NpgsqlTimeSpan A Canonicalize() d NpgsqlTimeSpan with the given number of months. | Improve this Doc View Source FromSeconds(Double) Creates an NpgsqlTimeSpan from a number of seconds. Declaration public static NpgsqlTimeSpan FromSeconds(double seconds) Parameters Type Name Description System.Double seconds The number of seconds in the interval. Returns Type Description NpgsqlTimeSpan A Canonicalize() d NpgsqlTimeSpan with the given number of seconds. | Improve this Doc View Source FromTicks(Int64) Creates an NpgsqlTimeSpan from a number of ticks. Declaration public static NpgsqlTimeSpan FromTicks(long ticks) Parameters Type Name Description System.Int64 ticks The number of ticks (100ns units) in the interval. Returns Type Description NpgsqlTimeSpan A Canonicalize() d NpgsqlTimeSpan with the given number of ticks. | Improve this Doc View Source GetHashCode() A hash code suitable for uses with hashing algorithms. Declaration public override int GetHashCode() Returns Type Description System.Int32 An signed integer. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source JustifyDays() Equivalent to PostgreSQL's justify_days function. Declaration public NpgsqlTimeSpan JustifyDays() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan based on this one, but with any hours outside of the range [-23, 23] converted into days. | Improve this Doc View Source JustifyInterval() Equivalent to PostgreSQL's justify_interval function. Declaration public NpgsqlTimeSpan JustifyInterval() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan based on this one, but with any months converted to multiples of ±30days and then with any days converted to multiples of ±24hours | Improve this Doc View Source JustifyMonths() Equivalent to PostgreSQL's justify_months function. Declaration public NpgsqlTimeSpan JustifyMonths() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan based on this one, but with any days outside of the range [-30, 30] converted into months. | Improve this Doc View Source Negate() Returns an NpgsqlTimeSpan whose value is the negated value of this instance. Declaration public NpgsqlTimeSpan Negate() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan whose value is the negated value of this instance. | Improve this Doc View Source Parse(String) Parses a System.String and returns a NpgsqlTimeSpan instance. Designed to use the formats generally returned by PostgreSQL. Declaration public static NpgsqlTimeSpan Parse(string str) Parameters Type Name Description System.String str The System.String to parse. Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan represented by the argument. Exceptions Type Condition System.ArgumentNullException The string was null. System.OverflowException A value obtained from parsing the string exceeded the values allowed for the relevant component. System.FormatException The string was not in a format that could be parsed to produce an NpgsqlTimeSpan . | Improve this Doc View Source Plus(NpgsqlTimeSpan) Returns the instance. Declaration public static NpgsqlTimeSpan Plus(NpgsqlTimeSpan x) Parameters Type Name Description NpgsqlTimeSpan x Returns Type Description NpgsqlTimeSpan | Improve this Doc View Source Subtract(NpgsqlTimeSpan) Subtracts another interval from this instance and returns the result. Declaration public NpgsqlTimeSpan Subtract(NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlTimeSpan interval An NpgsqlTimeSpan to subtract from this instance. Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan whose values are the differences of the two instances. | Improve this Doc View Source ToNpgsqlTimeSpan(TimeSpan) Casts a System.TimeSpan to an NpgsqlTimeSpan . Declaration public static NpgsqlTimeSpan ToNpgsqlTimeSpan(TimeSpan timespan) Parameters Type Name Description System.TimeSpan timespan Returns Type Description NpgsqlTimeSpan | Improve this Doc View Source ToString() Create a System.String representation of the NpgsqlTimeSpan instance. The format returned is of the form: [M mon[s]] [d day[s]] [HH:mm:ss[.f[f[f[f[f[f[f[f[f]]]]]]]]]] A zero NpgsqlTimeSpan is represented as 00:00:00 Ticks are 100ns, Postgress resolution is only to 1µs at most. Hence we lose 1 or more decimal precision in storing values in the database. Despite this, this method will output that extra digit of precision. It's forward-compatible with any future increases in resolution up to 100ns, and also makes this ToString() more applicable to any other use-case. Declaration public override string ToString() Returns Type Description System.String The System.String representation. Overrides System.ValueType.ToString() | Improve this Doc View Source ToTimeSpan(NpgsqlTimeSpan) Casts an NpgsqlTimeSpan to a System.TimeSpan . Declaration public static TimeSpan ToTimeSpan(NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlTimeSpan interval Returns Type Description System.TimeSpan | Improve this Doc View Source TryParse(String, out NpgsqlTimeSpan) Attempt to parse a System.String to produce an NpgsqlTimeSpan . Declaration public static bool TryParse(string str, out NpgsqlTimeSpan result) Parameters Type Name Description System.String str The System.String to parse. NpgsqlTimeSpan result (out) The NpgsqlTimeSpan produced, or Zero if the parsing failed. Returns Type Description System.Boolean true if the parsing succeeded, false otherwise. | Improve this Doc View Source UnjustifyDays() Opposite to PostgreSQL's justify_days function. Declaration public NpgsqlTimeSpan UnjustifyDays() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan based on this one, but with any days converted to multiples of ±24hours. | Improve this Doc View Source UnjustifyInterval() Opposite to PostgreSQL's justify_interval function. Declaration public NpgsqlTimeSpan UnjustifyInterval() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan based on this one, but with any months converted to multiples of ±30days and then any days converted to multiples of ±24hours; | Improve this Doc View Source UnjustifyMonths() Opposite to PostgreSQL's justify_months function. Declaration public NpgsqlTimeSpan UnjustifyMonths() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan based on this one, but with any months converted to multiples of ±30days. Operators | Improve this Doc View Source Addition(NpgsqlTimeSpan, NpgsqlTimeSpan) Adds two NpgsqlTimeSpan together. Declaration public static NpgsqlTimeSpan operator +(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The first NpgsqlTimeSpan to add. NpgsqlTimeSpan y The second NpgsqlTimeSpan to add. Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan whose values are the sum of the arguments. | Improve this Doc View Source Equality(NpgsqlTimeSpan, NpgsqlTimeSpan) Returns true if two NpgsqlTimeSpan are exactly the same. Declaration public static bool operator ==(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The first NpgsqlTimeSpan to compare. NpgsqlTimeSpan y The second NpgsqlTimeSpan to compare. Returns Type Description System.Boolean true if the two arguments are exactly the same, false otherwise. | Improve this Doc View Source Explicit(NpgsqlTimeSpan to TimeSpan) Explicit cast of an NpgsqlTimeSpan to a System.TimeSpan . Declaration public static explicit operator TimeSpan(NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlTimeSpan interval A NpgsqlTimeSpan . Returns Type Description System.TimeSpan An equivalent System.TimeSpan . | Improve this Doc View Source GreaterThan(NpgsqlTimeSpan, NpgsqlTimeSpan) Compares two NpgsqlTimeSpan instances to see if the first is greater than the second Declaration public static bool operator>(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The first NpgsqlTimeSpan to compare. NpgsqlTimeSpan y The second NpgsqlTimeSpan to compare. Returns Type Description System.Boolean true if the first NpgsqlTimeSpan is greater than second, false otherwise. | Improve this Doc View Source GreaterThanOrEqual(NpgsqlTimeSpan, NpgsqlTimeSpan) Compares two NpgsqlTimeSpan instances to see if the first is greater than or equivalent the second Declaration public static bool operator >=(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The first NpgsqlTimeSpan to compare. NpgsqlTimeSpan y The second NpgsqlTimeSpan to compare. Returns Type Description System.Boolean true if the first NpgsqlTimeSpan is greater than or equivalent to the second, false otherwise. | Improve this Doc View Source Implicit(TimeSpan to NpgsqlTimeSpan) Implicit cast of a System.TimeSpan to an NpgsqlTimeSpan Declaration public static implicit operator NpgsqlTimeSpan(TimeSpan timespan) Parameters Type Name Description System.TimeSpan timespan A System.TimeSpan Returns Type Description NpgsqlTimeSpan An eqivalent, canonical, NpgsqlTimeSpan . | Improve this Doc View Source Inequality(NpgsqlTimeSpan, NpgsqlTimeSpan) Returns false if two NpgsqlTimeSpan are exactly the same. Declaration public static bool operator !=(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The first NpgsqlTimeSpan to compare. NpgsqlTimeSpan y The second NpgsqlTimeSpan to compare. Returns Type Description System.Boolean false if the two arguments are exactly the same, true otherwise. | Improve this Doc View Source LessThan(NpgsqlTimeSpan, NpgsqlTimeSpan) Compares two NpgsqlTimeSpan instances to see if the first is less than the second Declaration public static bool operator <(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The first NpgsqlTimeSpan to compare. NpgsqlTimeSpan y The second NpgsqlTimeSpan to compare. Returns Type Description System.Boolean true if the first NpgsqlTimeSpan is less than second, false otherwise. | Improve this Doc View Source LessThanOrEqual(NpgsqlTimeSpan, NpgsqlTimeSpan) Compares two NpgsqlTimeSpan instances to see if the first is less than or equivalent to the second Declaration public static bool operator <=(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The first NpgsqlTimeSpan to compare. NpgsqlTimeSpan y The second NpgsqlTimeSpan to compare. Returns Type Description System.Boolean true if the first NpgsqlTimeSpan is less than or equivalent to second, false otherwise. | Improve this Doc View Source Subtraction(NpgsqlTimeSpan, NpgsqlTimeSpan) Subtracts one NpgsqlTimeSpan from another. Declaration public static NpgsqlTimeSpan operator -(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The NpgsqlTimeSpan to subtract the other from. NpgsqlTimeSpan y The NpgsqlTimeSpan to subtract from the other. Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan whose values are the difference of the arguments | Improve this Doc View Source UnaryNegation(NpgsqlTimeSpan) Negates an NpgsqlTimeSpan instance. Declaration public static NpgsqlTimeSpan operator -(NpgsqlTimeSpan x) Parameters Type Name Description NpgsqlTimeSpan x An NpgsqlTimeSpan . Returns Type Description NpgsqlTimeSpan The negation of the argument. | Improve this Doc View Source UnaryPlus(NpgsqlTimeSpan) Returns the instance. Declaration public static NpgsqlTimeSpan operator +(NpgsqlTimeSpan x) Parameters Type Name Description NpgsqlTimeSpan x Returns Type Description NpgsqlTimeSpan Explicit Interface Implementations | Improve this Doc View Source IComparer<NpgsqlTimeSpan>.Compare(NpgsqlTimeSpan, NpgsqlTimeSpan) Declaration int IComparer<NpgsqlTimeSpan>.Compare(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x NpgsqlTimeSpan y Returns Type Description System.Int32 | Improve this Doc View Source IComparer.Compare(Object, Object) Declaration int IComparer.Compare(object x, object y) Parameters Type Name Description System.Object x System.Object y Returns Type Description System.Int32 Implements System.IComparable System.Collections.IComparer System.IEquatable<T> System.IComparable<T> System.Collections.Generic.IComparer<T> See Also Ticks JustifyDays() JustifyMonths() Canonicalize()"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.html",
    "title": "Enum NpgsqlTsQueryLexeme.Weight | Npgsql Documentation",
    "keywords": "Enum NpgsqlTsQueryLexeme.Weight Weight enum, can be OR'ed together. Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax [Flags] public enum Weight Fields Name Description A A B B C C D D None None"
  },
  "doc/api/Npgsql.TypeHandling.NpgsqlTypeHandler-1.html": {
    "href": "doc/api/Npgsql.TypeHandling.NpgsqlTypeHandler-1.html",
    "title": "Class NpgsqlTypeHandler<TDefault> | Npgsql Documentation",
    "keywords": "Class NpgsqlTypeHandler<TDefault> Base class for all type handlers, which read and write CLR types into their PostgreSQL binary representation. Unless your type is arbitrary-length, consider inheriting from NpgsqlSimpleTypeHandler<TDefault> instead. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler<TDefault> BitStringHandler ByteaHandler TsQueryHandler TsVectorHandler PathHandler PolygonHandler HstoreHandler JsonHandler TextHandler NpgsqlSimpleTypeHandler <TDefault> Implements INpgsqlTypeHandler <TDefault> Inherited Members NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandling Assembly : Npgsql.dll Syntax public abstract class NpgsqlTypeHandler<TDefault> : NpgsqlTypeHandler, INpgsqlTypeHandler<TDefault> Type Parameters Name Description TDefault The default CLR type that this handler will read and write. For example, calling System.Data.Common.DbDataReader.GetValue(System.Int32) on a column with this handler will return a value with type TDefault . Type handlers can support additional types by implementing INpgsqlTypeHandler<T> . Constructors | Improve this Doc View Source NpgsqlTypeHandler(PostgresType) Constructs an NpgsqlTypeHandler<TDefault> . Declaration protected NpgsqlTypeHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source CreateArrayHandler(PostgresArrayType) Creates a type handler for arrays of this handler's type. Declaration public override ArrayHandler CreateArrayHandler(PostgresArrayType arrayBackendType) Parameters Type Name Description PostgresArrayType arrayBackendType Returns Type Description ArrayHandler Overrides NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType) | Improve this Doc View Source CreateRangeHandler(PostgresRangeType) Creates a type handler for ranges of this handler's type. Declaration public override RangeHandler CreateRangeHandler(PostgresRangeType rangeBackendType) Parameters Type Name Description PostgresRangeType rangeBackendType Returns Type Description RangeHandler Overrides NpgsqlTypeHandler.CreateRangeHandler(PostgresRangeType) | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, using either sync or async I/O. Declaration public abstract ValueTask<TDefault> Read(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. System.Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. System.Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description System.Threading.Tasks.ValueTask <TDefault> The fully-read value. | Improve this Doc View Source Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) Reads a value of type TDefault with the given length from the provided buffer, using either sync or async I/O. Type handlers typically don't need to override this - override Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) - but may do so in exceptional cases where reading of arbitrary types is required. Declaration protected override ValueTask<TAny> Read<TAny>(NpgsqlReadBuffer buf, int len, bool async, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. System.Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. System.Boolean async If I/O is required to read the full length of the value, whether it should be performed synchronously or asynchronously. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description System.Threading.Tasks.ValueTask <TAny> The fully-read value. Type Parameters Name Description TAny Overrides NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) | Improve this Doc View Source ValidateAndGetLength(TDefault, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a generic NpgsqlParameter<T> . Declaration public abstract int ValidateAndGetLength(TDefault value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description TDefault value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 | Improve this Doc View Source ValidateAndGetLength<TAny>(TAny, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of an arbitrary type. Checks that the current handler supports that type and throws an exception otherwise. Declaration protected override int ValidateAndGetLength<TAny>(TAny value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description TAny value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Type Parameters Name Description TAny Overrides Npgsql.TypeHandling.NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, Npgsql.NpgsqlLengthCache, Npgsql.NpgsqlParameter) | Improve this Doc View Source ValidateObjectAndGetLength(Object, ref NpgsqlLengthCache, NpgsqlParameter) Called to validate and get the length of a value of a non-generic NpgsqlParameter . Type handlers generally don't need to override this. Declaration protected override int ValidateObjectAndGetLength(object value, ref NpgsqlLengthCache lengthCache, NpgsqlParameter parameter) Parameters Type Name Description System.Object value NpgsqlLengthCache lengthCache NpgsqlParameter parameter Returns Type Description System.Int32 Overrides NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, ref NpgsqlLengthCache, NpgsqlParameter) | Improve this Doc View Source Write(TDefault, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Called to write the value of a generic NpgsqlParameter<T> . Declaration public abstract Task Write(TDefault value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description TDefault value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Called to write the value of a non-generic NpgsqlParameter . Type handlers generally don't need to override this. Declaration protected override Task WriteObjectWithLength(object value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description System.Object value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Overrides NpgsqlTypeHandler.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) | Improve this Doc View Source WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) Typically does not need to be overridden by type handlers, but may be needed in some cases (e.g. ArrayHandler . Note that this method assumes it can write 4 bytes of length (already verified by Npgsql.TypeHandling.NpgsqlTypeHandler`1.WriteWithLengthInternal``1(``0,Npgsql.NpgsqlWriteBuffer,Npgsql.NpgsqlLengthCache,Npgsql.NpgsqlParameter,System.Boolean) ). Declaration protected virtual Task WriteWithLength<TAny>(TAny value, NpgsqlWriteBuffer buf, NpgsqlLengthCache lengthCache, NpgsqlParameter parameter, bool async) Parameters Type Name Description TAny value NpgsqlWriteBuffer buf NpgsqlLengthCache lengthCache NpgsqlParameter parameter System.Boolean async Returns Type Description System.Threading.Tasks.Task Type Parameters Name Description TAny Implements INpgsqlTypeHandler<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Scaffolding.Internal Classes DbDataReaderExtension NpgsqlCodeGenerator The default code generator for Npgsql. NpgsqlDatabaseModelFactory The default database model factory for Npgsql."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.SortOrder.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.SortOrder.html",
    "title": "Enum SortOrder | Npgsql Documentation",
    "keywords": "Enum SortOrder Options for modifying sort ordering of index values. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Metadata Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum SortOrder Fields Name Description Ascending Specifies ascending sort order, which is the default. Descending Specifies descending sort order."
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlModelExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlModelExtensions.html",
    "title": "Class NpgsqlModelExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlModelExtensions Inheritance System.Object NpgsqlModelExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlModelExtensions Fields | Improve this Doc View Source DefaultHiLoSequenceName Declaration public const string DefaultHiLoSequenceName = \"EntityFrameworkHiLoSequence\" Field Value Type Description System.String Methods | Improve this Doc View Source GetDatabaseTemplate(IModel) Declaration public static string GetDatabaseTemplate(this IModel model) Parameters Type Name Description IModel model Returns Type Description System.String | Improve this Doc View Source GetHiLoSequenceName(IModel) Returns the name to use for the default hi-lo sequence. Declaration public static string GetHiLoSequenceName(this IModel model) Parameters Type Name Description IModel model The model. Returns Type Description System.String The name to use for the default hi-lo sequence. | Improve this Doc View Source GetHiLoSequenceNameConfigurationSource(IConventionModel) Returns the for the default hi-lo sequence name. Declaration public static ConfigurationSource? GetHiLoSequenceNameConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model The model. Returns Type Description System.Nullable < ConfigurationSource > The for the default hi-lo sequence name. | Improve this Doc View Source GetHiLoSequenceSchema(IModel) Returns the schema to use for the default hi-lo sequence. UseHiLo(PropertyBuilder, String, String) Declaration public static string GetHiLoSequenceSchema(this IModel model) Parameters Type Name Description IModel model The model. Returns Type Description System.String The schema to use for the default hi-lo sequence. | Improve this Doc View Source GetHiLoSequenceSchemaConfigurationSource(IConventionModel) Returns the for the default hi-lo sequence schema. Declaration public static ConfigurationSource? GetHiLoSequenceSchemaConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model The model. Returns Type Description System.Nullable < ConfigurationSource > The for the default hi-lo sequence schema. | Improve this Doc View Source GetOrAddPostgresEnum(IMutableModel, String, String, String[]) Declaration public static PostgresEnum GetOrAddPostgresEnum(this IMutableModel model, string schema, string name, string[] labels) Parameters Type Name Description IMutableModel model System.String schema System.String name System.String [] labels Returns Type Description PostgresEnum | Improve this Doc View Source GetOrAddPostgresExtension(IMutableModel, String, String, String) Declaration public static PostgresExtension GetOrAddPostgresExtension(this IMutableModel model, string schema, string name, string version) Parameters Type Name Description IMutableModel model System.String schema System.String name System.String version Returns Type Description PostgresExtension | Improve this Doc View Source GetOrAddPostgresRange(IMutableModel, String, String, String, String, String, String, String) Declaration public static PostgresRange GetOrAddPostgresRange(this IMutableModel model, string schema, string name, string subtype, string canonicalFunction = null, string subtypeOpClass = null, string collation = null, string subtypeDiff = null) Parameters Type Name Description IMutableModel model System.String schema System.String name System.String subtype System.String canonicalFunction System.String subtypeOpClass System.String collation System.String subtypeDiff Returns Type Description PostgresRange | Improve this Doc View Source GetPostgresEnums(IModel) Declaration public static IReadOnlyList<PostgresEnum> GetPostgresEnums(this IModel model) Parameters Type Name Description IModel model Returns Type Description System.Collections.Generic.IReadOnlyList < PostgresEnum > | Improve this Doc View Source GetPostgresExtensions(IModel) Declaration public static IReadOnlyList<PostgresExtension> GetPostgresExtensions(this IModel model) Parameters Type Name Description IModel model Returns Type Description System.Collections.Generic.IReadOnlyList < PostgresExtension > | Improve this Doc View Source GetTablespace(IModel) Declaration public static string GetTablespace(this IModel model) Parameters Type Name Description IModel model Returns Type Description System.String | Improve this Doc View Source GetValueGenerationStrategy(IModel) Returns the NpgsqlValueGenerationStrategy to use for properties of keys in the model, unless the property has a strategy explicitly set. Declaration public static NpgsqlValueGenerationStrategy? GetValueGenerationStrategy(this IModel model) Parameters Type Name Description IModel model The model. Returns Type Description System.Nullable < NpgsqlValueGenerationStrategy > The default NpgsqlValueGenerationStrategy . | Improve this Doc View Source GetValueGenerationStrategyConfigurationSource(IConventionModel) Returns the for the default NpgsqlValueGenerationStrategy . Declaration public static ConfigurationSource? GetValueGenerationStrategyConfigurationSource(this IConventionModel model) Parameters Type Name Description IConventionModel model The model. Returns Type Description System.Nullable < ConfigurationSource > The for the default NpgsqlValueGenerationStrategy . | Improve this Doc View Source PostgresRanges(IModel) Declaration public static IReadOnlyList<PostgresRange> PostgresRanges(this IModel model) Parameters Type Name Description IModel model Returns Type Description System.Collections.Generic.IReadOnlyList < PostgresRange > | Improve this Doc View Source SetDatabaseTemplate(IMutableModel, String) Declaration public static void SetDatabaseTemplate(this IMutableModel model, string template) Parameters Type Name Description IMutableModel model System.String template | Improve this Doc View Source SetHiLoSequenceName(IConventionModel, String, Boolean) Sets the name to use for the default hi-lo sequence. Declaration public static void SetHiLoSequenceName(this IConventionModel model, string name, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model The model. System.String name The value to set. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. | Improve this Doc View Source SetHiLoSequenceName(IMutableModel, String) Sets the name to use for the default hi-lo sequence. Declaration public static void SetHiLoSequenceName(this IMutableModel model, string name) Parameters Type Name Description IMutableModel model The model. System.String name The value to set. | Improve this Doc View Source SetHiLoSequenceSchema(IConventionModel, String, Boolean) Sets the schema to use for the default hi-lo sequence. Declaration public static void SetHiLoSequenceSchema(this IConventionModel model, string value, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model The model. System.String value The value to set. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. | Improve this Doc View Source SetHiLoSequenceSchema(IMutableModel, String) Sets the schema to use for the default hi-lo sequence. Declaration public static void SetHiLoSequenceSchema(this IMutableModel model, string value) Parameters Type Name Description IMutableModel model The model. System.String value The value to set. | Improve this Doc View Source SetTablespace(IMutableModel, String) Declaration public static void SetTablespace(this IMutableModel model, string tablespace) Parameters Type Name Description IMutableModel model System.String tablespace | Improve this Doc View Source SetValueGenerationStrategy(IConventionModel, Nullable<NpgsqlValueGenerationStrategy>, Boolean) Attempts to set the NpgsqlValueGenerationStrategy to use for properties of keys in the model that don't have a strategy explicitly set. Declaration public static void SetValueGenerationStrategy(this IConventionModel model, NpgsqlValueGenerationStrategy? value, bool fromDataAnnotation = false) Parameters Type Name Description IConventionModel model The model. System.Nullable < NpgsqlValueGenerationStrategy > value The value to set. System.Boolean fromDataAnnotation Indicates whether the configuration was specified using a data annotation. | Improve this Doc View Source SetValueGenerationStrategy(IMutableModel, Nullable<NpgsqlValueGenerationStrategy>) Attempts to set the NpgsqlValueGenerationStrategy to use for properties of keys in the model that don't have a strategy explicitly set. Declaration public static void SetValueGenerationStrategy(this IMutableModel model, NpgsqlValueGenerationStrategy? value) Parameters Type Name Description IMutableModel model The model. System.Nullable < NpgsqlValueGenerationStrategy > value The value to set."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceValueGeneratorFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlSequenceValueGeneratorFactory.html",
    "title": "Class NpgsqlSequenceValueGeneratorFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlSequenceValueGeneratorFactory This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Inheritance System.Object NpgsqlSequenceValueGeneratorFactory Implements INpgsqlSequenceValueGeneratorFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSequenceValueGeneratorFactory : INpgsqlSequenceValueGeneratorFactory Constructors | Improve this Doc View Source NpgsqlSequenceValueGeneratorFactory(IUpdateSqlGenerator) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public NpgsqlSequenceValueGeneratorFactory(IUpdateSqlGenerator sqlGenerator) Parameters Type Name Description IUpdateSqlGenerator sqlGenerator Methods | Improve this Doc View Source Create(IProperty, NpgsqlSequenceValueGeneratorState, INpgsqlRelationalConnection, IRawSqlCommandBuilder, IDiagnosticsLogger<DbLoggerCategory.Database.Command>) This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public virtual ValueGenerator Create(IProperty property, NpgsqlSequenceValueGeneratorState generatorState, INpgsqlRelationalConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IDiagnosticsLogger<DbLoggerCategory.Database.Command> commandLogger) Parameters Type Name Description IProperty property NpgsqlSequenceValueGeneratorState generatorState INpgsqlRelationalConnection connection IRawSqlCommandBuilder rawSqlCommandBuilder IDiagnosticsLogger < DbLoggerCategory.Database.Command > commandLogger Returns Type Description ValueGenerator Implements INpgsqlSequenceValueGeneratorFactory"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.ArrayIndexExpression.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal.ArrayIndexExpression.html",
    "title": "Class ArrayIndexExpression | Npgsql Documentation",
    "keywords": "Class ArrayIndexExpression An SQL expression that represents an indexing into a PostgreSQL array. Inheritance System.Object ArrayIndexExpression Implements System.IEquatable < ArrayIndexExpression > Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.Expressions.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class ArrayIndexExpression : SqlExpression, IEquatable<ArrayIndexExpression> Remarks specifically disallows having an of value System.Linq.Expressions.ExpressionType.ArrayIndex as arrays are a PostgreSQL-only feature. Constructors | Improve this Doc View Source ArrayIndexExpression(SqlExpression, SqlExpression, Type, RelationalTypeMapping) Declaration public ArrayIndexExpression(SqlExpression array, SqlExpression index, Type type, RelationalTypeMapping typeMapping) Parameters Type Name Description SqlExpression array SqlExpression index System.Type type RelationalTypeMapping typeMapping Properties | Improve this Doc View Source Array The array being indexes. Declaration public virtual SqlExpression Array { get; } Property Value Type Description SqlExpression | Improve this Doc View Source Index The index in the array. Declaration public virtual SqlExpression Index { get; } Property Value Type Description SqlExpression Methods | Improve this Doc View Source Accept(ExpressionVisitor) Declaration protected override Expression Accept(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source Equals(ArrayIndexExpression) Declaration public bool Equals(ArrayIndexExpression other) Parameters Type Name Description ArrayIndexExpression other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 | Improve this Doc View Source Print(ExpressionPrinter) Declaration public override void Print(ExpressionPrinter expressionPrinter) Parameters Type Name Description ExpressionPrinter expressionPrinter | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String | Improve this Doc View Source Update(SqlExpression, SqlExpression) Declaration public ArrayIndexExpression Update(SqlExpression array, SqlExpression index) Parameters Type Name Description SqlExpression array SqlExpression index Returns Type Description ArrayIndexExpression | Improve this Doc View Source VisitChildren(ExpressionVisitor) Declaration protected override Expression VisitChildren(ExpressionVisitor visitor) Parameters Type Name Description System.Linq.Expressions.ExpressionVisitor visitor Returns Type Description System.Linq.Expressions.Expression Implements System.IEquatable<T>"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlObjectToStringTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlObjectToStringTranslator.html",
    "title": "Class NpgsqlObjectToStringTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlObjectToStringTranslator Inheritance System.Object NpgsqlObjectToStringTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlObjectToStringTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlObjectToStringTranslator(ISqlExpressionFactory) Declaration public NpgsqlObjectToStringTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>) Declaration public SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description SqlExpression instance System.Reflection.MethodInfo method System.Collections.Generic.IReadOnlyList < SqlExpression > arguments Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCharacterTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlCharacterTypeMapping.html",
    "title": "Class NpgsqlCharacterTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlCharacterTypeMapping The type mapping for the PostgreSQL 'character' data type. Inheritance System.Object NpgsqlCharacterTypeMapping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlCharacterTypeMapping : StringTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-character.html Constructors | Improve this Doc View Source NpgsqlCharacterTypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlCharacterTypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters | Improve this Doc View Source NpgsqlCharacterTypeMapping(String, Nullable<Int32>) Declaration public NpgsqlCharacterTypeMapping(string storeType, int? size = default(int? )) Parameters Type Name Description System.String storeType System.Nullable < System.Int32 > size Properties | Improve this Doc View Source Comparer Declaration public override ValueComparer Comparer { get; } Property Value Type Description ValueComparer | Improve this Doc View Source KeyComparer Declaration public override ValueComparer KeyComparer { get; } Property Value Type Description ValueComparer Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source ConfigureParameter(DbParameter) Declaration protected override void ConfigureParameter(DbParameter parameter) Parameters Type Name Description System.Data.Common.DbParameter parameter"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlDesignTimeServices.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal.NpgsqlDesignTimeServices.html",
    "title": "Class NpgsqlDesignTimeServices | Npgsql Documentation",
    "keywords": "Class NpgsqlDesignTimeServices Enables configuring Npgsql-specific design-time services. Tools will automatically discover implementations of this interface that are in the startup assembly. Inheritance System.Object NpgsqlDesignTimeServices Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Design.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDesignTimeServices : IDesignTimeServices Methods | Improve this Doc View Source ConfigureDesignTimeServices(IServiceCollection) Declaration public virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Classes NpgsqlNetTopologySuiteOptionsExtension NpgsqlNodaTimeOptionsExtension NpgsqlOptionsExtension Represents options managed by the Npgsql. UserRangeDefinition Interfaces INpgsqlNetTopologySuiteOptions Represents options for Npgsql NetTopologySuite that can only be set at the System.IServiceProvider singleton level. INpgsqlOptions Represents options for Npgsql that can only be set at the System.IServiceProvider singleton level."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.Operations Classes NpgsqlCreateDatabaseOperation NpgsqlDropDatabaseOperation"
  },
  "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlEntityFrameworkServicesBuilderExtensions.html": {
    "href": "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlEntityFrameworkServicesBuilderExtensions.html",
    "title": "Class NpgsqlEntityFrameworkServicesBuilderExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlEntityFrameworkServicesBuilderExtensions Provides extension methods to configure Entity Framework Core for Npgsql. Inheritance System.Object NpgsqlEntityFrameworkServicesBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlEntityFrameworkServicesBuilderExtensions Methods | Improve this Doc View Source AddEntityFrameworkNpgsql(IServiceCollection) Adds the services required by the Npgsql database provider for Entity Framework to an . You use this method when using dependency injection in your application, such as with ASP.NET. For more information on setting up dependency injection, see http://go.microsoft.com/fwlink/?LinkId=526890 . You only need to use this functionality when you want Entity Framework to resolve the services it uses from an external . If you are not using an external Entity Framework will take care of creating the services it requires. Declaration public static IServiceCollection AddEntityFrameworkNpgsql(this IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection The to add services to. Returns Type Description IServiceCollection A builder that allows further Entity Framework specific setup of the . Examples public void ConfigureServices(IServiceCollection services) { var connectionString = \"connection string to database\"; services .AddEntityFrameworkSqlServer() .AddDbContext<MyContext>(options => options.UseNpgsql(connectionString)); }"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.Metadata.Conventions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.Metadata.Conventions.html",
    "title": "Namespace Microsoft.EntityFrameworkCore.Metadata.Conventions | Npgsql Documentation",
    "keywords": "Namespace Microsoft.EntityFrameworkCore.Metadata.Conventions Classes NpgsqlStoreGenerationConvention A convention that ensures that properties aren't configured to have a default value, as computed column or using a NpgsqlValueGenerationStrategy at the same time. NpgsqlValueGenerationConvention A convention that configures store value generation as on properties that are part of the primary key and not part of any foreign keys, were configured to have a database default value or were configured to use a NpgsqlValueGenerationStrategy . It also configures properties as if they were configured as computed columns."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime Classes NpgsqlNodaTimeMemberTranslator Provides translation services for Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime members. NpgsqlNodaTimeMemberTranslatorPlugin Provides translation services for Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime members. NpgsqlNodaTimeMethodCallTranslator Provides translation services for NodaTime method calls. NpgsqlNodaTimeMethodCallTranslatorPlugin Provides translation services for Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime members."
  },
  "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlNetTopologySuiteServiceCollectionExtensions.html": {
    "href": "efcore/api/Microsoft.Extensions.DependencyInjection.NpgsqlNetTopologySuiteServiceCollectionExtensions.html",
    "title": "Class NpgsqlNetTopologySuiteServiceCollectionExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlNetTopologySuiteServiceCollectionExtensions Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite extension methods for . Inheritance System.Object NpgsqlNetTopologySuiteServiceCollectionExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.Extensions.DependencyInjection Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public static class NpgsqlNetTopologySuiteServiceCollectionExtensions Methods | Improve this Doc View Source AddEntityFrameworkNpgsqlNetTopologySuite(IServiceCollection) Adds the services required for NetTopologySuite support in the Npgsql provider for Entity Framework. Declaration public static IServiceCollection AddEntityFrameworkNpgsqlNetTopologySuite(this IServiceCollection serviceCollection) Parameters Type Name Description IServiceCollection serviceCollection The to add services to. Returns Type Description IServiceCollection The same service collection so that multiple calls can be chained."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.NpgsqlMigrationsSqlGenerator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Migrations.NpgsqlMigrationsSqlGenerator.html",
    "title": "Class NpgsqlMigrationsSqlGenerator | Npgsql Documentation",
    "keywords": "Class NpgsqlMigrationsSqlGenerator Inheritance System.Object NpgsqlMigrationsSqlGenerator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Migrations Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMigrationsSqlGenerator : MigrationsSqlGenerator Constructors | Improve this Doc View Source NpgsqlMigrationsSqlGenerator(MigrationsSqlGeneratorDependencies, IMigrationsAnnotationProvider, INpgsqlOptions) Declaration public NpgsqlMigrationsSqlGenerator(MigrationsSqlGeneratorDependencies dependencies, IMigrationsAnnotationProvider migrationsAnnotations, INpgsqlOptions npgsqlOptions) Parameters Type Name Description MigrationsSqlGeneratorDependencies dependencies IMigrationsAnnotationProvider migrationsAnnotations INpgsqlOptions npgsqlOptions Methods | Improve this Doc View Source ColumnDefinition(String, String, String, ColumnOperation, IModel, MigrationCommandListBuilder) Declaration protected override void ColumnDefinition(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description System.String schema System.String table System.String name ColumnOperation operation IModel model MigrationCommandListBuilder builder | Improve this Doc View Source ComputedColumnDefinition(String, String, String, ColumnOperation, IModel, MigrationCommandListBuilder) Generates a SQL fragment for a computed column definition for the given column metadata. Declaration protected override void ComputedColumnDefinition(string schema, string table, string name, ColumnOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description System.String schema The schema that contains the table, or null to use the default schema. System.String table The table that contains the column. System.String name The column name. ColumnOperation operation The column metadata. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to add the SQL fragment. | Improve this Doc View Source Generate(AddColumnOperation, IModel, MigrationCommandListBuilder, Boolean) Declaration protected override void Generate(AddColumnOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description AddColumnOperation operation IModel model MigrationCommandListBuilder builder System.Boolean terminate | Improve this Doc View Source Generate(AlterColumnOperation, IModel, MigrationCommandListBuilder) Declaration protected override void Generate(AlterColumnOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterColumnOperation operation IModel model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(AlterDatabaseOperation, IModel, MigrationCommandListBuilder) Declaration protected override void Generate(AlterDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterDatabaseOperation operation IModel model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(AlterTableOperation, IModel, MigrationCommandListBuilder) Declaration protected override void Generate(AlterTableOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterTableOperation operation IModel model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(CreateIndexOperation, IModel, MigrationCommandListBuilder, Boolean) Declaration protected override void Generate(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description CreateIndexOperation operation IModel model MigrationCommandListBuilder builder System.Boolean terminate | Improve this Doc View Source Generate(CreateSequenceOperation, IModel, MigrationCommandListBuilder) Declaration protected override void Generate(CreateSequenceOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description CreateSequenceOperation operation IModel model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(CreateTableOperation, IModel, MigrationCommandListBuilder, Boolean) Declaration protected override void Generate(CreateTableOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description CreateTableOperation operation IModel model MigrationCommandListBuilder builder System.Boolean terminate | Improve this Doc View Source Generate(DropColumnOperation, IModel, MigrationCommandListBuilder, Boolean) Declaration protected override void Generate(DropColumnOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description DropColumnOperation operation IModel model MigrationCommandListBuilder builder System.Boolean terminate | Improve this Doc View Source Generate(DropIndexOperation, IModel, MigrationCommandListBuilder, Boolean) Declaration protected override void Generate(DropIndexOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description DropIndexOperation operation IModel model MigrationCommandListBuilder builder System.Boolean terminate | Improve this Doc View Source Generate(EnsureSchemaOperation, IModel, MigrationCommandListBuilder) Declaration protected override void Generate(EnsureSchemaOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description EnsureSchemaOperation operation IModel model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(InsertDataOperation, IModel, MigrationCommandListBuilder, Boolean) Builds commands for the given by making calls on the given , and then terminates the final command. Declaration protected override void Generate(InsertDataOperation operation, IModel model, MigrationCommandListBuilder builder, bool terminate = true) Parameters Type Name Description InsertDataOperation operation The operation. IModel model The target model which may be null if the operations exist without a model. MigrationCommandListBuilder builder The command builder to use to build the commands. System.Boolean terminate Indicates whether or not to terminate the command after generating SQL for the operation. | Improve this Doc View Source Generate(MigrationOperation, IModel, MigrationCommandListBuilder) Declaration protected override void Generate(MigrationOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description MigrationOperation operation IModel model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(NpgsqlCreateDatabaseOperation, IModel, MigrationCommandListBuilder) Declaration protected virtual void Generate(NpgsqlCreateDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description NpgsqlCreateDatabaseOperation operation IModel model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(NpgsqlDropDatabaseOperation, IModel, MigrationCommandListBuilder) Declaration public virtual void Generate(NpgsqlDropDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description NpgsqlDropDatabaseOperation operation IModel model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(RenameColumnOperation, IModel, MigrationCommandListBuilder) Declaration protected override void Generate(RenameColumnOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description RenameColumnOperation operation IModel model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(RenameIndexOperation, IModel, MigrationCommandListBuilder) Declaration protected override void Generate(RenameIndexOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description RenameIndexOperation operation IModel model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(RenameSequenceOperation, IModel, MigrationCommandListBuilder) Declaration protected override void Generate(RenameSequenceOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description RenameSequenceOperation operation IModel model MigrationCommandListBuilder builder | Improve this Doc View Source Generate(RenameTableOperation, IModel, MigrationCommandListBuilder) Declaration protected override void Generate(RenameTableOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description RenameTableOperation operation IModel model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateCreateEnum(PostgresEnum, IModel, MigrationCommandListBuilder) Declaration protected virtual void GenerateCreateEnum(PostgresEnum enumType, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresEnum enumType IModel model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateCreateExtension(PostgresExtension, IModel, MigrationCommandListBuilder) Declaration protected virtual void GenerateCreateExtension(PostgresExtension extension, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresExtension extension IModel model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateCreateRange(PostgresRange, IModel, MigrationCommandListBuilder) Declaration protected virtual void GenerateCreateRange(PostgresRange rangeType, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresRange rangeType IModel model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateDropEnum(PostgresEnum, IModel, MigrationCommandListBuilder) Declaration protected virtual void GenerateDropEnum(PostgresEnum enumType, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresEnum enumType IModel model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateDropRange(PostgresRange, IModel, MigrationCommandListBuilder) Declaration protected virtual void GenerateDropRange(PostgresRange rangeType, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description PostgresRange rangeType IModel model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateEnumStatements(AlterDatabaseOperation, IModel, MigrationCommandListBuilder) Declaration protected virtual void GenerateEnumStatements(AlterDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterDatabaseOperation operation IModel model MigrationCommandListBuilder builder | Improve this Doc View Source GenerateRangeStatements(AlterDatabaseOperation, IModel, MigrationCommandListBuilder) Declaration protected virtual void GenerateRangeStatements(AlterDatabaseOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description AlterDatabaseOperation operation IModel model MigrationCommandListBuilder builder | Improve this Doc View Source IdentityDefinition(ColumnOperation, MigrationCommandListBuilder) Declaration protected virtual void IdentityDefinition(ColumnOperation operation, MigrationCommandListBuilder builder) Parameters Type Name Description ColumnOperation operation MigrationCommandListBuilder builder | Improve this Doc View Source IndexOptions(CreateIndexOperation, IModel, MigrationCommandListBuilder) Declaration protected override void IndexOptions(CreateIndexOperation operation, IModel model, MigrationCommandListBuilder builder) Parameters Type Name Description CreateIndexOperation operation IModel model MigrationCommandListBuilder builder | Improve this Doc View Source Rename(String, String, String, String, MigrationCommandListBuilder) Renames a database object such as a table, index, or sequence. Declaration public virtual void Rename(string schema, string name, string newName, string type, MigrationCommandListBuilder builder) Parameters Type Name Description System.String schema The current schema of the object to rename. System.String name The current name of the object to rename. System.String newName The new name. System.String type The type of the object (e.g. TABLE, INDEX, SEQUENCE). MigrationCommandListBuilder builder The builder to which operations are appended. | Improve this Doc View Source Transfer(String, String, String, String, MigrationCommandListBuilder) Transfers a database object such as a table, index, or sequence between schemas. Declaration public virtual void Transfer(string newSchema, string schema, string name, string type, MigrationCommandListBuilder builder) Parameters Type Name Description System.String newSchema The new schema. System.String schema The current schema. System.String name The name of the object to transfer. System.String type The type of the object (e.g. TABLE, INDEX, SEQUENCE). MigrationCommandListBuilder builder The builder to which operations are appended."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlUintTypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlUintTypeMapping.html",
    "title": "Class NpgsqlUintTypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlUintTypeMapping Inheritance System.Object NpgsqlTypeMapping NpgsqlUintTypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlUintTypeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source NpgsqlUintTypeMapping(RelationalTypeMappingParameters, NpgsqlDbType) Declaration protected NpgsqlUintTypeMapping(RelationalTypeMappingParameters parameters, NpgsqlDbType npgsqlDbType) Parameters Type Name Description RelationalTypeMappingParameters parameters NpgsqlDbType npgsqlDbType | Improve this Doc View Source NpgsqlUintTypeMapping(String, NpgsqlDbType) Declaration public NpgsqlUintTypeMapping(string storeType, NpgsqlDbType npgsqlDbType) Parameters Type Name Description System.String storeType NpgsqlDbType npgsqlDbType Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMethodCallTranslatorProvider.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMethodCallTranslatorProvider.html",
    "title": "Class NpgsqlMethodCallTranslatorProvider | Npgsql Documentation",
    "keywords": "Class NpgsqlMethodCallTranslatorProvider Inheritance System.Object NpgsqlMethodCallTranslatorProvider Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMethodCallTranslatorProvider : RelationalMethodCallTranslatorProvider Constructors | Improve this Doc View Source NpgsqlMethodCallTranslatorProvider(RelationalMethodCallTranslatorProviderDependencies, IRelationalTypeMappingSource) Declaration public NpgsqlMethodCallTranslatorProvider(RelationalMethodCallTranslatorProviderDependencies dependencies, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description RelationalMethodCallTranslatorProviderDependencies dependencies IRelationalTypeMappingSource typeMappingSource"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal.NpgsqlNodaTimeCodeGeneratorPlugin.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal.NpgsqlNodaTimeCodeGeneratorPlugin.html",
    "title": "Class NpgsqlNodaTimeCodeGeneratorPlugin | Npgsql Documentation",
    "keywords": "Class NpgsqlNodaTimeCodeGeneratorPlugin Inheritance System.Object NpgsqlNodaTimeCodeGeneratorPlugin Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.Scaffolding.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class NpgsqlNodaTimeCodeGeneratorPlugin : ProviderCodeGeneratorPlugin Methods | Improve this Doc View Source GenerateProviderOptions() Declaration public override MethodCallCodeFragment GenerateProviderOptions() Returns Type Description MethodCallCodeFragment"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategyFactory.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategyFactory.html",
    "title": "Class NpgsqlExecutionStrategyFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlExecutionStrategyFactory Inheritance System.Object NpgsqlExecutionStrategyFactory Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlExecutionStrategyFactory : RelationalExecutionStrategyFactory Constructors | Improve this Doc View Source NpgsqlExecutionStrategyFactory(ExecutionStrategyDependencies) Declaration public NpgsqlExecutionStrategyFactory(ExecutionStrategyDependencies dependencies) Parameters Type Name Description ExecutionStrategyDependencies dependencies Methods | Improve this Doc View Source CreateDefaultStrategy(ExecutionStrategyDependencies) Declaration protected override IExecutionStrategy CreateDefaultStrategy(ExecutionStrategyDependencies dependencies) Parameters Type Name Description ExecutionStrategyDependencies dependencies Returns Type Description IExecutionStrategy"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlEntityTypeExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlEntityTypeExtensions.html",
    "title": "Class NpgsqlEntityTypeExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlEntityTypeExtensions Extension methods for for Npgsql-specific metadata. Inheritance System.Object NpgsqlEntityTypeExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlEntityTypeExtensions Methods | Improve this Doc View Source GetCockroachDbInterleaveInParent(IEntityType) Declaration public static CockroachDbInterleaveInParent GetCockroachDbInterleaveInParent(this IEntityType entityType) Parameters Type Name Description IEntityType entityType Returns Type Description CockroachDbInterleaveInParent | Improve this Doc View Source GetIsUnlogged(IEntityType) Declaration public static bool GetIsUnlogged(this IEntityType entityType) Parameters Type Name Description IEntityType entityType Returns Type Description System.Boolean | Improve this Doc View Source GetStorageParameter(IEntityType, String) Declaration public static string GetStorageParameter(this IEntityType entityType, string parameterName) Parameters Type Name Description IEntityType entityType System.String parameterName Returns Type Description System.String | Improve this Doc View Source GetStorageParameters(IEntityType) Declaration public static Dictionary<string, object> GetStorageParameters(this IEntityType entityType) Parameters Type Name Description IEntityType entityType Returns Type Description System.Collections.Generic.Dictionary < System.String , System.Object > | Improve this Doc View Source SetIsUnlogged(IConventionEntityType, Boolean, Boolean) Declaration public static void SetIsUnlogged(this IConventionEntityType entityType, bool isUnlogged, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityType entityType System.Boolean isUnlogged System.Boolean fromDataAnnotation | Improve this Doc View Source SetIsUnlogged(IMutableEntityType, Boolean) Declaration public static void SetIsUnlogged(this IMutableEntityType entityType, bool isUnlogged) Parameters Type Name Description IMutableEntityType entityType System.Boolean isUnlogged | Improve this Doc View Source SetStorageParameter(IConventionEntityType, String, Object, Boolean) Declaration public static void SetStorageParameter(this IConventionEntityType entityType, string parameterName, object parameterValue, bool fromDataAnnotation = false) Parameters Type Name Description IConventionEntityType entityType System.String parameterName System.Object parameterValue System.Boolean fromDataAnnotation | Improve this Doc View Source SetStorageParameter(IMutableEntityType, String, Object) Declaration public static void SetStorageParameter(this IMutableEntityType entityType, string parameterName, object parameterValue) Parameters Type Name Description IMutableEntityType entityType System.String parameterName System.Object parameterValue"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlLikeTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlLikeTranslator.html",
    "title": "Class NpgsqlLikeTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlLikeTranslator Translates DbFunctionsExtensions.Like methods into PostgreSQL LIKE expressions. Inheritance System.Object NpgsqlLikeTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlLikeTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlLikeTranslator(NpgsqlSqlExpressionFactory) Initializes a new instance of the NpgsqlMathTranslator class. Declaration public NpgsqlLikeTranslator(NpgsqlSqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description NpgsqlSqlExpressionFactory sqlExpressionFactory The SQL expression factory to use when generating expressions.. Methods | Improve this Doc View Source Translate(SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>) Declaration public SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description SqlExpression instance System.Reflection.MethodInfo method System.Collections.Generic.IReadOnlyList < SqlExpression > arguments Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMathTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlMathTranslator.html",
    "title": "Class NpgsqlMathTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlMathTranslator Provides translation services for static System.Math methods.. Inheritance System.Object NpgsqlMathTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMathTranslator : IMethodCallTranslator Remarks See: https://www.postgresql.org/docs/current/static/functions-math.html https://www.postgresql.org/docs/current/static/functions-conditional.html#FUNCTIONS-GREATEST-LEAST Constructors | Improve this Doc View Source NpgsqlMathTranslator(ISqlExpressionFactory) Initializes a new instance of the NpgsqlMathTranslator class. Declaration public NpgsqlMathTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory The SQL expression factory to use when generating expressions.. Methods | Improve this Doc View Source Translate(SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>) Declaration public SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description SqlExpression instance System.Reflection.MethodInfo method System.Collections.Generic.IReadOnlyList < SqlExpression > arguments Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.NpgsqlArrayConverter-2.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion.NpgsqlArrayConverter-2.html",
    "title": "Class NpgsqlArrayConverter<TModelArray, TProviderArray> | Npgsql Documentation",
    "keywords": "Class NpgsqlArrayConverter<TModelArray, TProviderArray> A value converter that can convert between array types, given another for the elements. Inheritance System.Object NpgsqlArrayConverter<TModelArray, TProviderArray> Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.ValueConversion Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlArrayConverter<TModelArray, TProviderArray> : ValueConverter<TModelArray, TProviderArray> Type Parameters Name Description TModelArray TProviderArray Constructors | Improve this Doc View Source NpgsqlArrayConverter(ValueConverter) Declaration public NpgsqlArrayConverter(ValueConverter elementConverter) Parameters Type Name Description ValueConverter elementConverter Methods | Improve this Doc View Source ForLoop(ParameterExpression, Expression, Expression, Expression, Expression) Declaration public static Expression ForLoop(ParameterExpression loopVar, Expression initValue, Expression condition, Expression increment, Expression loopContent) Parameters Type Name Description System.Linq.Expressions.ParameterExpression loopVar System.Linq.Expressions.Expression initValue System.Linq.Expressions.Expression condition System.Linq.Expressions.Expression increment System.Linq.Expressions.Expression loopContent Returns Type Description System.Linq.Expressions.Expression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlDatabaseCreator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlDatabaseCreator.html",
    "title": "Class NpgsqlDatabaseCreator | Npgsql Documentation",
    "keywords": "Class NpgsqlDatabaseCreator Inheritance System.Object NpgsqlDatabaseCreator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDatabaseCreator : RelationalDatabaseCreator Constructors | Improve this Doc View Source NpgsqlDatabaseCreator(RelationalDatabaseCreatorDependencies, INpgsqlRelationalConnection, IRawSqlCommandBuilder) Declaration public NpgsqlDatabaseCreator(RelationalDatabaseCreatorDependencies dependencies, INpgsqlRelationalConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder) Parameters Type Name Description RelationalDatabaseCreatorDependencies dependencies INpgsqlRelationalConnection connection IRawSqlCommandBuilder rawSqlCommandBuilder Properties | Improve this Doc View Source RetryDelay Declaration public virtual TimeSpan RetryDelay { get; set; } Property Value Type Description System.TimeSpan | Improve this Doc View Source RetryTimeout Declaration public virtual TimeSpan RetryTimeout { get; set; } Property Value Type Description System.TimeSpan Methods | Improve this Doc View Source Create() Declaration public override void Create() | Improve this Doc View Source CreateAsync(CancellationToken) Declaration public override Task CreateAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source CreateTables() Declaration public override void CreateTables() | Improve this Doc View Source CreateTablesAsync(CancellationToken) Declaration public override Task CreateTablesAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Delete() Declaration public override void Delete() | Improve this Doc View Source DeleteAsync(CancellationToken) Declaration public override Task DeleteAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Exists() Declaration public override bool Exists() Returns Type Description System.Boolean | Improve this Doc View Source ExistsAsync(CancellationToken) Declaration public override Task<bool> ExistsAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Boolean > | Improve this Doc View Source HasTables() Declaration public override bool HasTables() Returns Type Description System.Boolean | Improve this Doc View Source HasTablesAsync(CancellationToken) Declaration public override Task<bool> HasTablesAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Boolean >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlStrings.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Internal.NpgsqlStrings.html",
    "title": "Class NpgsqlStrings | Npgsql Documentation",
    "keywords": "Class NpgsqlStrings This is an internal API that supports the Entity Framework Core infrastructure and not subject to the same compatibility standards as public APIs. It may be changed or removed without notice in any release. You should only use it directly in your code with extreme caution and knowing that doing so can result in application failures when updating to a new Entity Framework Core release. Inheritance System.Object NpgsqlStrings Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlStrings Properties | Improve this Doc View Source FreeTextFunctionOnClient The 'FreeText' method is not supported because the query has switched to client-evaluation. Inspect the log to determine which query expressions are triggering client-evaluation. Declaration public static string FreeTextFunctionOnClient { get; } Property Value Type Description System.String | Improve this Doc View Source TransientExceptionDetected An exception has been raised that is likely due to a transient failure. Consider enabling transient error resiliency by adding 'EnableRetryOnFailure()' to the 'UseSqlServer' call. Declaration public static string TransientExceptionDetected { get; } Property Value Type Description System.String Methods | Improve this Doc View Source DuplicateColumnNameValueGenerationStrategyMismatch(Object, Object, Object, Object, Object, Object) '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured with different value generation strategies. Declaration public static string DuplicateColumnNameValueGenerationStrategyMismatch(object entityType1, object property1, object entityType2, object property2, object columnName, object table) Parameters Type Name Description System.Object entityType1 System.Object property1 System.Object entityType2 System.Object property2 System.Object columnName System.Object table Returns Type Description System.String | Improve this Doc View Source IncludePropertyDuplicated(Object, Object) Include property '{entityType}.{property}' cannot be defined multiple times Declaration public static string IncludePropertyDuplicated(object entityType, object property) Parameters Type Name Description System.Object entityType System.Object property Returns Type Description System.String | Improve this Doc View Source IncludePropertyInIndex(Object, Object) Include property '{entityType}.{property}' is already included in the index Declaration public static string IncludePropertyInIndex(object entityType, object property) Parameters Type Name Description System.Object entityType System.Object property Returns Type Description System.String | Improve this Doc View Source IncludePropertyNotFound(Object, Object) Include property '{entityType}.{property}' not found Declaration public static string IncludePropertyNotFound(object entityType, object property) Parameters Type Name Description System.Object entityType System.Object property Returns Type Description System.String | Improve this Doc View Source InvalidTableToIncludeInScaffolding(Object) The specified table '{table}' is not valid. Specify tables using the format '[schema].[table]'. Declaration public static string InvalidTableToIncludeInScaffolding(object table) Parameters Type Name Description System.Object table Returns Type Description System.String | Improve this Doc View Source NonKeyValueGeneration(Object, Object) The property '{property}' on entity type '{entityType}' is configured to use 'SequenceHiLo' value generator, which is only intended for keys. If this was intentional configure an alternate key on the property, otherwise call 'ValueGeneratedNever' or configure store generation for this property. Declaration public static string NonKeyValueGeneration(object property, object entityType) Parameters Type Name Description System.Object property System.Object entityType Returns Type Description System.String | Improve this Doc View Source SequenceBadType(Object, Object, Object) PostgreSQL sequences cannot be used to generate values for the property '{property}' on entity type '{entityType}' because the property type is '{propertyType}'. Sequences can only be used with integer properties. Declaration public static string SequenceBadType(object property, object entityType, object propertyType) Parameters Type Name Description System.Object property System.Object entityType System.Object propertyType Returns Type Description System.String"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.html",
    "title": "Namespace Microsoft.EntityFrameworkCore | Npgsql Documentation",
    "keywords": "Namespace Microsoft.EntityFrameworkCore Classes NpgsqlAlterDatabaseOperationExtensions Extension methods for for Npgsql-specific metadata. NpgsqlDatabaseFacadeExtensions Npgsql specific extension methods for . NpgsqlDatabaseModelExtensions NpgsqlDbContextOptionsExtensions Provides extension methods on and used to configure a to context to a PostgreSQL database with Npgsql. NpgsqlDbFunctionsExtensions Provides Npgsql-specific extension methods on . NpgsqlEntityTypeBuilderExtensions NpgsqlEntityTypeExtensions Extension methods for for Npgsql-specific metadata. NpgsqlFullTextSearchDbFunctionsExtensions NpgsqlFullTextSearchLinqExtensions NpgsqlIndexBuilderExtensions Npgsql specific extension methods for . NpgsqlIndexExtensions Extension methods for for Npgsql-specific metadata. NpgsqlMigrationBuilderExtensions NpgsqlModelBuilderExtensions Npgsql specific extension methods for . NpgsqlModelExtensions NpgsqlNetTopologySuiteDbContextOptionsBuilderExtensions NetTopologySuite specific extension methods for NpgsqlDbContextOptionsBuilder . NpgsqlNetworkExtensions Provides extension methods supporting operator translation for PostgreSQL network types. NpgsqlNodaTimeDbContextOptionsBuilderExtensions NodaTime specific extension methods for NpgsqlDbContextOptionsBuilder . NpgsqlPropertyBuilderExtensions Npgsql specific extension methods for . NpgsqlPropertyExtensions NpgsqlRangeExtensions Provides extension methods for supporting PostgreSQL translation. Enums NpgsqlTsRankingNormalization Specifies whether and how a document's length should impact its rank. This is used with the ranking functions in NpgsqlFullTextSearchLinqExtensions . See http://www.postgresql.org/docs/current/static/textsearch-controls.html#TEXTSEARCH-RANKING for more information about the behaviors that are controlled by this value."
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlDateTimeMethodTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlDateTimeMethodTranslator.html",
    "title": "Class NpgsqlDateTimeMethodTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlDateTimeMethodTranslator Provides expression translation for System.DateTime addition methods. Inheritance System.Object NpgsqlDateTimeMethodTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlDateTimeMethodTranslator : IMethodCallTranslator Constructors | Improve this Doc View Source NpgsqlDateTimeMethodTranslator(ISqlExpressionFactory, IRelationalTypeMappingSource) Initializes a new instance of the NpgsqlDateTimeMethodTranslator class. Declaration public NpgsqlDateTimeMethodTranslator(ISqlExpressionFactory sqlExpressionFactory, IRelationalTypeMappingSource typeMappingSource) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory IRelationalTypeMappingSource typeMappingSource Methods | Improve this Doc View Source Translate(SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>) Declaration public SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description SqlExpression instance System.Reflection.MethodInfo method System.Collections.Generic.IReadOnlyList < SqlExpression > arguments Returns Type Description SqlExpression"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMacaddr8TypeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping.NpgsqlMacaddr8TypeMapping.html",
    "title": "Class NpgsqlMacaddr8TypeMapping | Npgsql Documentation",
    "keywords": "Class NpgsqlMacaddr8TypeMapping The type mapping for the PostgreSQL macaddr8 type. Inheritance System.Object NpgsqlTypeMapping NpgsqlMacaddr8TypeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.Mapping Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlMacaddr8TypeMapping : NpgsqlTypeMapping Remarks See: https://www.postgresql.org/docs/current/static/datatype-net-types.html#DATATYPE-MACADDR8 Constructors | Improve this Doc View Source NpgsqlMacaddr8TypeMapping() Constructs an instance of the NpgsqlMacaddr8TypeMapping class. Declaration public NpgsqlMacaddr8TypeMapping() | Improve this Doc View Source NpgsqlMacaddr8TypeMapping(RelationalTypeMappingParameters) Declaration protected NpgsqlMacaddr8TypeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlAlterDatabaseOperationExtensions.html": {
    "href": "efcore/api/Microsoft.EntityFrameworkCore.NpgsqlAlterDatabaseOperationExtensions.html",
    "title": "Class NpgsqlAlterDatabaseOperationExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlAlterDatabaseOperationExtensions Extension methods for for Npgsql-specific metadata. Inheritance System.Object NpgsqlAlterDatabaseOperationExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Microsoft.EntityFrameworkCore Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public static class NpgsqlAlterDatabaseOperationExtensions Methods | Improve this Doc View Source GetOldPostgresEnums(AlterDatabaseOperation) Declaration public static IReadOnlyList<PostgresEnum> GetOldPostgresEnums(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description System.Collections.Generic.IReadOnlyList < PostgresEnum > | Improve this Doc View Source GetOldPostgresExtensions(AlterDatabaseOperation) Declaration public static IReadOnlyList<PostgresExtension> GetOldPostgresExtensions(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description System.Collections.Generic.IReadOnlyList < PostgresExtension > | Improve this Doc View Source GetOldPostgresRanges(AlterDatabaseOperation) Declaration public static IReadOnlyList<PostgresRange> GetOldPostgresRanges(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description System.Collections.Generic.IReadOnlyList < PostgresRange > | Improve this Doc View Source GetOrAddPostgresExtension(AlterDatabaseOperation, String, String, String) Declaration public static PostgresExtension GetOrAddPostgresExtension(this AlterDatabaseOperation operation, string schema, string name, string version) Parameters Type Name Description AlterDatabaseOperation operation System.String schema System.String name System.String version Returns Type Description PostgresExtension | Improve this Doc View Source GetPostgresEnums(AlterDatabaseOperation) Declaration public static IReadOnlyList<PostgresEnum> GetPostgresEnums(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description System.Collections.Generic.IReadOnlyList < PostgresEnum > | Improve this Doc View Source GetPostgresExtensions(AlterDatabaseOperation) Declaration public static IReadOnlyList<PostgresExtension> GetPostgresExtensions(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description System.Collections.Generic.IReadOnlyList < PostgresExtension > | Improve this Doc View Source GetPostgresRanges(AlterDatabaseOperation) Declaration public static IReadOnlyList<PostgresRange> GetPostgresRanges(this AlterDatabaseOperation operation) Parameters Type Name Description AlterDatabaseOperation operation Returns Type Description System.Collections.Generic.IReadOnlyList < PostgresRange >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlUpdateSqlGenerator.ResultsGrouping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal.NpgsqlUpdateSqlGenerator.ResultsGrouping.html",
    "title": "Enum NpgsqlUpdateSqlGenerator.ResultsGrouping | Npgsql Documentation",
    "keywords": "Enum NpgsqlUpdateSqlGenerator.ResultsGrouping Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Update.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public enum ResultsGrouping Fields Name Description OneCommandPerResultSet OneResultSet"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlSqlGenerationHelper.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlSqlGenerationHelper.html",
    "title": "Class NpgsqlSqlGenerationHelper | Npgsql Documentation",
    "keywords": "Class NpgsqlSqlGenerationHelper Inheritance System.Object NpgsqlSqlGenerationHelper Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlSqlGenerationHelper : RelationalSqlGenerationHelper Constructors | Improve this Doc View Source NpgsqlSqlGenerationHelper(RelationalSqlGenerationHelperDependencies) Declaration public NpgsqlSqlGenerationHelper(RelationalSqlGenerationHelperDependencies dependencies) Parameters Type Name Description RelationalSqlGenerationHelperDependencies dependencies Methods | Improve this Doc View Source DelimitIdentifier(String) Declaration public override string DelimitIdentifier(string identifier) Parameters Type Name Description System.String identifier Returns Type Description System.String | Improve this Doc View Source DelimitIdentifier(StringBuilder, String) Declaration public override void DelimitIdentifier(StringBuilder builder, string identifier) Parameters Type Name Description System.Text.StringBuilder builder System.String identifier"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzInstantMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzInstantMapping.html",
    "title": "Class TimestampTzInstantMapping | Npgsql Documentation",
    "keywords": "Class TimestampTzInstantMapping Inheritance System.Object NpgsqlTypeMapping TimestampTzInstantMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimestampTzInstantMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source TimestampTzInstantMapping() Declaration public TimestampTzInstantMapping() | Improve this Doc View Source TimestampTzInstantMapping(RelationalTypeMappingParameters) Declaration protected TimestampTzInstantMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description System.String storeType System.Nullable < System.Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(ValueConverter) Declaration public override CoreTypeMapping Clone(ValueConverter converter) Parameters Type Name Description ValueConverter converter Returns Type Description CoreTypeMapping | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.INpgsqlOptions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.INpgsqlOptions.html",
    "title": "Interface INpgsqlOptions | Npgsql Documentation",
    "keywords": "Interface INpgsqlOptions Represents options for Npgsql that can only be set at the System.IServiceProvider singleton level. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public interface INpgsqlOptions : ISingletonOptions Properties | Improve this Doc View Source PostgresVersion The backend version to target. Declaration Version PostgresVersion { get; } Property Value Type Description System.Version | Improve this Doc View Source ReverseNullOrderingEnabled True if reverse null ordering is enabled; otherwise, false. Declaration bool ReverseNullOrderingEnabled { get; } Property Value Type Description System.Boolean | Improve this Doc View Source UserRangeDefinitions The collection of range mappings. Declaration IReadOnlyList<UserRangeDefinition> UserRangeDefinitions { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < UserRangeDefinition >"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.INpgsqlNetTopologySuiteOptions.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal.INpgsqlNetTopologySuiteOptions.html",
    "title": "Interface INpgsqlNetTopologySuiteOptions | Npgsql Documentation",
    "keywords": "Interface INpgsqlNetTopologySuiteOptions Represents options for Npgsql NetTopologySuite that can only be set at the System.IServiceProvider singleton level. Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Infrastructure.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.dll Syntax public interface INpgsqlNetTopologySuiteOptions : ISingletonOptions Properties | Improve this Doc View Source IsGeographyDefault True if geography is to be used by default instead of geometry Declaration bool IsGeographyDefault { get; } Property Value Type Description System.Boolean"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzOffsetDateTimeMapping.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.TimestampTzOffsetDateTimeMapping.html",
    "title": "Class TimestampTzOffsetDateTimeMapping | Npgsql Documentation",
    "keywords": "Class TimestampTzOffsetDateTimeMapping Inheritance System.Object NpgsqlTypeMapping TimestampTzOffsetDateTimeMapping Inherited Members NpgsqlTypeMapping.NpgsqlDbType NpgsqlTypeMapping.ConfigureParameter(DbParameter) Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.NodaTime.dll Syntax public class TimestampTzOffsetDateTimeMapping : NpgsqlTypeMapping Constructors | Improve this Doc View Source TimestampTzOffsetDateTimeMapping() Declaration public TimestampTzOffsetDateTimeMapping() | Improve this Doc View Source TimestampTzOffsetDateTimeMapping(RelationalTypeMappingParameters) Declaration protected TimestampTzOffsetDateTimeMapping(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Methods | Improve this Doc View Source Clone(RelationalTypeMappingParameters) Declaration protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters) Parameters Type Name Description RelationalTypeMappingParameters parameters Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(String, Nullable<Int32>) Declaration public override RelationalTypeMapping Clone(string storeType, int? size) Parameters Type Name Description System.String storeType System.Nullable < System.Int32 > size Returns Type Description RelationalTypeMapping | Improve this Doc View Source Clone(ValueConverter) Declaration public override CoreTypeMapping Clone(ValueConverter converter) Parameters Type Name Description ValueConverter converter Returns Type Description CoreTypeMapping | Improve this Doc View Source GenerateCodeLiteral(Object) Declaration public override Expression GenerateCodeLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.Linq.Expressions.Expression | Improve this Doc View Source GenerateNonNullSqlLiteral(Object) Declaration protected override string GenerateNonNullSqlLiteral(object value) Parameters Type Name Description System.Object value Returns Type Description System.String"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.Metadata.Internal Classes CockroachDbAnnotationNames IdentitySequenceOptionsData NpgsqlAnnotationNames"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRangeTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlRangeTranslator.html",
    "title": "Class NpgsqlRangeTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlRangeTranslator Provides translation services for PostgreSQL range operators. Inheritance System.Object NpgsqlRangeTranslator Implements IMemberTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlRangeTranslator : IMethodCallTranslator, IMemberTranslator Remarks See: https://www.postgresql.org/docs/current/static/functions-range.html Constructors | Improve this Doc View Source NpgsqlRangeTranslator(ISqlExpressionFactory) Declaration public NpgsqlRangeTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(SqlExpression, MemberInfo, Type) Declaration public SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType) Parameters Type Name Description SqlExpression instance System.Reflection.MemberInfo member System.Type returnType Returns Type Description SqlExpression | Improve this Doc View Source Translate(SqlExpression, MethodInfo, IReadOnlyList<SqlExpression>) Declaration public SqlExpression Translate(SqlExpression instance, MethodInfo method, IReadOnlyList<SqlExpression> arguments) Parameters Type Name Description SqlExpression instance System.Reflection.MethodInfo method System.Collections.Generic.IReadOnlyList < SqlExpression > arguments Returns Type Description SqlExpression Implements IMemberTranslator"
  },
  "doc/api/Npgsql.TypeHandlers.NetworkHandlers.MacaddrHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.NetworkHandlers.MacaddrHandler.html",
    "title": "Class MacaddrHandler | Npgsql Documentation",
    "keywords": "Class MacaddrHandler A type handler for the PostgreSQL macaddr and macaddr8 data types. Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler < System.Net.NetworkInformation.PhysicalAddress > NpgsqlSimpleTypeHandler < System.Net.NetworkInformation.PhysicalAddress > MacaddrHandler Implements INpgsqlTypeHandler < System.Net.NetworkInformation.PhysicalAddress > INpgsqlSimpleTypeHandler < System.Net.NetworkInformation.PhysicalAddress > Inherited Members NpgsqlSimpleTypeHandler<PhysicalAddress>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<PhysicalAddress>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<PhysicalAddress>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<PhysicalAddress>.Write(PhysicalAddress, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<PhysicalAddress>.ValidateAndGetLength(PhysicalAddress, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<PhysicalAddress>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<PhysicalAddress>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<PhysicalAddress>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<PhysicalAddress>.CreateArrayHandler(PostgresArrayType) NpgsqlTypeHandler<PhysicalAddress>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers.NetworkHandlers Assembly : Npgsql.dll Syntax public class MacaddrHandler : NpgsqlSimpleTypeHandler<PhysicalAddress>, INpgsqlTypeHandler<PhysicalAddress>, INpgsqlSimpleTypeHandler<PhysicalAddress> Remarks See http://www.postgresql.org/docs/current/static/datatype-net-types.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source MacaddrHandler(PostgresType) Declaration public MacaddrHandler(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration public override PhysicalAddress Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description System.Net.NetworkInformation.PhysicalAddress Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Net.NetworkInformation.PhysicalAddress>.Read(Npgsql.NpgsqlReadBuffer, System.Int32, Npgsql.BackendMessages.FieldDescription) | Improve this Doc View Source ValidateAndGetLength(PhysicalAddress, NpgsqlParameter) Declaration public override int ValidateAndGetLength(PhysicalAddress value, NpgsqlParameter parameter) Parameters Type Name Description System.Net.NetworkInformation.PhysicalAddress value NpgsqlParameter parameter Returns Type Description System.Int32 Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Net.NetworkInformation.PhysicalAddress>.ValidateAndGetLength(System.Net.NetworkInformation.PhysicalAddress, Npgsql.NpgsqlParameter) | Improve this Doc View Source Write(PhysicalAddress, NpgsqlWriteBuffer, NpgsqlParameter) Declaration public override void Write(PhysicalAddress value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description System.Net.NetworkInformation.PhysicalAddress value NpgsqlWriteBuffer buf NpgsqlParameter parameter Overrides Npgsql.TypeHandling.NpgsqlSimpleTypeHandler<System.Net.NetworkInformation.PhysicalAddress>.Write(System.Net.NetworkInformation.PhysicalAddress, Npgsql.NpgsqlWriteBuffer, Npgsql.NpgsqlParameter) Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.PostgresTypes.UnknownBackendType.html": {
    "href": "doc/api/Npgsql.PostgresTypes.UnknownBackendType.html",
    "title": "Class UnknownBackendType | Npgsql Documentation",
    "keywords": "Class UnknownBackendType Represents a PostgreSQL data type that isn't known to Npgsql and cannot be handled. Inheritance System.Object PostgresType UnknownBackendType Inherited Members PostgresType.OID PostgresType.Namespace PostgresType.Name PostgresType.FullName PostgresType.DisplayName PostgresType.InternalName PostgresType.Array PostgresType.Range PostgresType.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql.PostgresTypes Assembly : Npgsql.dll Syntax public class UnknownBackendType : PostgresType"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlValueGeneratorSelector.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal.NpgsqlValueGeneratorSelector.html",
    "title": "Class NpgsqlValueGeneratorSelector | Npgsql Documentation",
    "keywords": "Class NpgsqlValueGeneratorSelector Inheritance System.Object NpgsqlValueGeneratorSelector Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.ValueGeneration.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlValueGeneratorSelector : RelationalValueGeneratorSelector Constructors | Improve this Doc View Source NpgsqlValueGeneratorSelector(ValueGeneratorSelectorDependencies, INpgsqlSequenceValueGeneratorFactory, INpgsqlRelationalConnection, IRawSqlCommandBuilder, IDiagnosticsLogger<DbLoggerCategory.Database.Command>) Declaration public NpgsqlValueGeneratorSelector(ValueGeneratorSelectorDependencies dependencies, INpgsqlSequenceValueGeneratorFactory sequenceFactory, INpgsqlRelationalConnection connection, IRawSqlCommandBuilder rawSqlCommandBuilder, IDiagnosticsLogger<DbLoggerCategory.Database.Command> commandLogger) Parameters Type Name Description ValueGeneratorSelectorDependencies dependencies INpgsqlSequenceValueGeneratorFactory sequenceFactory INpgsqlRelationalConnection connection IRawSqlCommandBuilder rawSqlCommandBuilder IDiagnosticsLogger < DbLoggerCategory.Database.Command > commandLogger Properties | Improve this Doc View Source Cache This API supports the Entity Framework Core infrastructure and is not intended to be used directly from your code. This API may change or be removed in future releases. Declaration public virtual INpgsqlValueGeneratorCache Cache { get; } Property Value Type Description INpgsqlValueGeneratorCache Methods | Improve this Doc View Source Create(IProperty, IEntityType) Declaration public override ValueGenerator Create(IProperty property, IEntityType entityType) Parameters Type Name Description IProperty property IEntityType entityType Returns Type Description ValueGenerator | Improve this Doc View Source Select(IProperty, IEntityType) Declaration public override ValueGenerator Select(IProperty property, IEntityType entityType) Parameters Type Name Description IProperty property IEntityType entityType Returns Type Description ValueGenerator"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal.html",
    "title": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal | Npgsql Documentation",
    "keywords": "Namespace Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite.Scaffolding.Internal Classes NpgsqlNetTopologySuiteCodeGeneratorPlugin"
  },
  "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStringMemberTranslator.html": {
    "href": "efcore/api/Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal.NpgsqlStringMemberTranslator.html",
    "title": "Class NpgsqlStringMemberTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlStringMemberTranslator Translates string.Length to 'LENGTH(text)'. Inheritance System.Object NpgsqlStringMemberTranslator Namespace : Npgsql.EntityFrameworkCore.PostgreSQL.Query.ExpressionTranslators.Internal Assembly : Npgsql.EntityFrameworkCore.PostgreSQL.dll Syntax public class NpgsqlStringMemberTranslator : IMemberTranslator Constructors | Improve this Doc View Source NpgsqlStringMemberTranslator(ISqlExpressionFactory) Declaration public NpgsqlStringMemberTranslator(ISqlExpressionFactory sqlExpressionFactory) Parameters Type Name Description ISqlExpressionFactory sqlExpressionFactory Methods | Improve this Doc View Source Translate(SqlExpression, MemberInfo, Type) Declaration public SqlExpression Translate(SqlExpression instance, MemberInfo member, Type returnType) Parameters Type Name Description SqlExpression instance System.Reflection.MemberInfo member System.Type returnType Returns Type Description SqlExpression"
  },
  "doc/api/NpgsqlTypes.NpgsqlDbType.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlDbType.html",
    "title": "Enum NpgsqlDbType | Npgsql Documentation",
    "keywords": "Enum NpgsqlDbType Represents a PostgreSQL data type that can be written or read to the database. Used in places such as NpgsqlDbType to unambiguously specify how to encode or decode values. Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public enum NpgsqlDbType Remarks See http://www.postgresql.org/docs/current/static/datatype.html Fields Name Description Abstime Corresponds to the obsolete PostgreSQL \"abstime\" type. Array Corresponds to the PostgreSQL \"array\" type, a variable-length multidimensional array of another type. This value must be combined with another value from NpgsqlDbType via a bit OR (e.g. NpgsqlDbType.Array | NpgsqlDbType.Integer) Bigint Corresponds to the PostgreSQL 8-byte \"bigint\" type. Bit Corresponds to the PostgreSQL \"bit\" type. Boolean Corresponds to the PostgreSQL \"boolean\" type. Box Corresponds to the PostgreSQL geometric \"box\" type. Bytea Corresponds to the PostgreSQL \"bytea\" type, holding a raw byte string. Char Corresponds to the PostgreSQL \"char(n)\" type. Cid Corresponds to the PostgreSQL \"cid\" type, an internal command identifier. Cidr Corresponds to the PostgreSQL \"cidr\" type, a field storing an IPv4 or IPv6 network. Circle Corresponds to the PostgreSQL geometric \"circle\" type. Citext Corresponds to the PostgreSQL \"citext\" type for the citext module. Date Corresponds to the PostgreSQL \"date\" type. Double Corresponds to the PostgreSQL 8-byte floating-point \"double\" type. Geography The geography (geodetic) type for PostgreSQL spatial extension PostGIS. Geometry The geometry type for PostgreSQL spatial extension PostGIS. Hstore Corresponds to the PostgreSQL \"hstore\" type, a dictionary of string key-value pairs. Inet Corresponds to the PostgreSQL \"inet\" type. Int2Vector Corresponds to the PostgreSQL internal \"int2vector\" type. Integer Corresponds to the PostgreSQL 4-byte \"integer\" type. InternalChar Corresponds to the PostgreSQL \"char\" type. Interval Corresponds to the PostgreSQL \"interval\" type. Json Corresponds to the PostgreSQL \"json\" type, a field storing JSON in text format. Jsonb Corresponds to the PostgreSQL \"jsonb\" type, a field storing JSON in an optimized binary format. Line Corresponds to the PostgreSQL geometric \"line\" type. LSeg Corresponds to the PostgreSQL geometric \"lseg\" type. MacAddr Corresponds to the PostgreSQL \"macaddr\" type, a field storing a 6-byte physical address. MacAddr8 Corresponds to the PostgreSQL \"macaddr8\" type, a field storing a 6-byte or 8-byte physical address. Money Corresponds to the PostgreSQL \"money\" type. Name Corresponds to the PostgreSQL internal \"name\" type. Numeric Corresponds to the PostgreSQL arbitrary-precision \"numeric\" type. Oid Corresponds to the PostgreSQL \"oid\" type. Oidvector Corresponds to the PostgreSQL internal \"oidvector\" type. Path Corresponds to the PostgreSQL geometric \"path\" type. Point Corresponds to the PostgreSQL geometric \"point\" type. Polygon Corresponds to the PostgreSQL geometric \"polygon\" type. Range Corresponds to the PostgreSQL \"range\" type, continuous range of values of specific type. This value must be combined with another value from NpgsqlDbType via a bit OR (e.g. NpgsqlDbType.Range | NpgsqlDbType.Integer) Real Corresponds to the PostgreSQL floating-point \"real\" type. Refcursor Corresponds to the PostgreSQL \"refcursor\" type. Regconfig Corresponds to the PostgreSQL \"tsquery\" type. Regtype Corresponds to the PostgreSQL \"regtype\" type, a numeric (OID) ID of a type in the pg_type table. Smallint Corresponds to the PostgreSQL 2-byte \"smallint\" type. Text Corresponds to the PostgreSQL \"text\" type. Tid Corresponds to the PostgreSQL \"tid\" type, a tuple id identifying the physical location of a row within its table. Time Corresponds to the PostgreSQL \"time\" type. Timestamp Corresponds to the PostgreSQL \"timestamp\" type. TimestampTz Corresponds to the PostgreSQL \"timestamp with time zone\" type. TimestampTZ Corresponds to the PostgreSQL \"timestamp with time zone\" type. TimeTz Corresponds to the PostgreSQL \"time with time zone\" type. TimeTZ Corresponds to the PostgreSQL \"time with time zone\" type. TsQuery Corresponds to the PostgreSQL \"tsquery\" type. TsVector Corresponds to the PostgreSQL \"tsvector\" type. Unknown A special value that can be used to send parameter values to the database without specifying their type, allowing the database to cast them to another value based on context. The value will be converted to a string and send as text. Uuid Corresponds to the PostgreSQL \"uuid\" type. Varbit Corresponds to the PostgreSQL \"varbit\" type, a field storing a variable-length string of bits. Varchar Corresponds to the PostgreSQL \"varchar\" type. Xid Corresponds to the PostgreSQL \"xid\" type, an internal transaction identifier. Xml Corresponds to the PostgreSQL \"xml\" type."
  },
  "doc/api/Npgsql.NodaTime.DateHandlerFactory.html": {
    "href": "doc/api/Npgsql.NodaTime.DateHandlerFactory.html",
    "title": "Class DateHandlerFactory | Npgsql Documentation",
    "keywords": "Class DateHandlerFactory Inheritance System.Object NpgsqlTypeHandlerFactory NpgsqlTypeHandlerFactory < LocalDate > DateHandlerFactory Inherited Members NpgsqlTypeHandlerFactory<LocalDate>.CreateNonGeneric(PostgresType, NpgsqlConnection) NpgsqlTypeHandlerFactory<LocalDate>.DefaultValueType System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.NodaTime Assembly : Npgsql.NodaTime.dll Syntax public class DateHandlerFactory : NpgsqlTypeHandlerFactory<LocalDate> Methods | Improve this Doc View Source Create(PostgresType, NpgsqlConnection) Declaration public override NpgsqlTypeHandler<LocalDate> Create(PostgresType postgresType, NpgsqlConnection conn) Parameters Type Name Description PostgresType postgresType NpgsqlConnection conn Returns Type Description NpgsqlTypeHandler < LocalDate > Overrides Npgsql.TypeHandling.NpgsqlTypeHandlerFactory<LocalDate>.Create(Npgsql.PostgresTypes.PostgresType, Npgsql.NpgsqlConnection)"
  },
  "doc/api/Npgsql.NpgsqlGeoJSONExtensions.html": {
    "href": "doc/api/Npgsql.NpgsqlGeoJSONExtensions.html",
    "title": "Class NpgsqlGeoJSONExtensions | Npgsql Documentation",
    "keywords": "Class NpgsqlGeoJSONExtensions Extension allowing adding the GeoJSON plugin to an Npgsql type mapper. Inheritance System.Object NpgsqlGeoJSONExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.GeoJSON.dll Syntax public static class NpgsqlGeoJSONExtensions Methods | Improve this Doc View Source UseGeoJson(INpgsqlTypeMapper, GeoJSONOptions, Boolean) Sets up GeoJSON mappings for the PostGIS types. Declaration public static INpgsqlTypeMapper UseGeoJson(this INpgsqlTypeMapper mapper, GeoJSONOptions options = GeoJSONOptions.None, bool geographyAsDefault = false) Parameters Type Name Description INpgsqlTypeMapper mapper The type mapper to set up (global or connection-specific) GeoJSONOptions options Options to use when constructing objects. System.Boolean geographyAsDefault Specifies that the geography type is used for mapping by default. Returns Type Description INpgsqlTypeMapper"
  },
  "doc/api/Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv-2.html": {
    "href": "doc/api/Npgsql.TypeHandling.NpgsqlSimpleTypeHandlerWithPsv-2.html",
    "title": "Class NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv> | Npgsql Documentation",
    "keywords": "Class NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv> A simple type handler that supports a provider-specific value in addition to its default value. This is necessary mainly in cases where the CLR type cannot represent the full range of the PostgreSQL type, and a custom CLR type is needed (e.g. System.DateTime and NpgsqlDateTime ). The provider-specific type TPsv will be returned from calls to System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32) . Inheritance System.Object NpgsqlTypeHandler NpgsqlTypeHandler <TDefault> NpgsqlSimpleTypeHandler <TDefault> NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv> DateHandler IntervalHandler TimestampHandler InetHandler Implements INpgsqlTypeHandler <TDefault> INpgsqlSimpleTypeHandler <TDefault> INpgsqlSimpleTypeHandler <TPsv> Inherited Members NpgsqlSimpleTypeHandler<TDefault>.Read(NpgsqlReadBuffer, Int32, FieldDescription) NpgsqlSimpleTypeHandler<TDefault>.Read(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<TDefault>.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlSimpleTypeHandler<TDefault>.ValidateAndGetLength(TDefault, NpgsqlParameter) NpgsqlSimpleTypeHandler<TDefault>.Write(TDefault, NpgsqlWriteBuffer, NpgsqlParameter) NpgsqlSimpleTypeHandler<TDefault>.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<TDefault>.Write(TDefault, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlSimpleTypeHandler<TDefault>.ValidateAndGetLength(TDefault, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<TDefault>.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlSimpleTypeHandler<TDefault>.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<TDefault>.WriteWithLength<TAny>(TAny, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler<TDefault>.CreateRangeHandler(PostgresRangeType) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandling Assembly : Npgsql.dll Syntax public abstract class NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv> : NpgsqlSimpleTypeHandler<TDefault>, INpgsqlTypeHandler<TDefault>, INpgsqlSimpleTypeHandler<TDefault>, INpgsqlSimpleTypeHandler<TPsv> Type Parameters Name Description TDefault The default CLR type that this handler will read and write. For example, calling System.Data.Common.DbDataReader.GetValue(System.Int32) on a column with this handler will return a value with type TDefault . Type handlers can support additional types by implementing INpgsqlTypeHandler<T> . TPsv The provider-specific CLR type that this handler will read and write. Constructors | Improve this Doc View Source NpgsqlSimpleTypeHandlerWithPsv(PostgresType) Constructs an NpgsqlSimpleTypeHandlerWithPsv<TDefault, TPsv> Declaration protected NpgsqlSimpleTypeHandlerWithPsv(PostgresType postgresType) Parameters Type Name Description PostgresType postgresType Methods | Improve this Doc View Source CreateArrayHandler(PostgresArrayType) Declaration public override ArrayHandler CreateArrayHandler(PostgresArrayType arrayBackendType) Parameters Type Name Description PostgresArrayType arrayBackendType Returns Type Description ArrayHandler Overrides Npgsql.TypeHandling.NpgsqlTypeHandler<TDefault>.CreateArrayHandler(Npgsql.PostgresTypes.PostgresArrayType) | Improve this Doc View Source ReadPsv(NpgsqlReadBuffer, Int32, FieldDescription) Reads a value of type TPsv with the given length from the provided buffer, with the assumption that it is entirely present in the provided memory buffer and no I/O will be required. Declaration protected abstract TPsv ReadPsv(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription = null) Parameters Type Name Description NpgsqlReadBuffer buf The buffer from which to read. System.Int32 len The byte length of the value. The buffer might not contain the full length, requiring I/O to be performed. FieldDescription fieldDescription Additional PostgreSQL information about the type, such as the length in varchar(30). Returns Type Description TPsv The fully-read value. | Improve this Doc View Source ValidateAndGetLength(TPsv, NpgsqlParameter) Responsible for validating that a value represents a value of the correct and which can be written for PostgreSQL - if the value cannot be written for any reason, an exception shold be thrown. Also returns the byte length needed to write the value. Declaration public abstract int ValidateAndGetLength(TPsv value, NpgsqlParameter parameter) Parameters Type Name Description TPsv value The value to be written to PostgreSQL NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Returns Type Description System.Int32 The number of bytes required to write the value. | Improve this Doc View Source Write(TPsv, NpgsqlWriteBuffer, NpgsqlParameter) Writes a value to the provided buffer, with the assumption that there is enough space in the buffer (no I/O will occur). The Npgsql core will have taken care of that. Declaration public abstract void Write(TPsv value, NpgsqlWriteBuffer buf, NpgsqlParameter parameter) Parameters Type Name Description TPsv value The value to write. NpgsqlWriteBuffer buf The buffer to which to write. NpgsqlParameter parameter The NpgsqlParameter instance where this value resides. Can be used to access additional information relevant to the write process (e.g. Size ). Explicit Interface Implementations | Improve this Doc View Source INpgsqlSimpleTypeHandler<TPsv>.Read(NpgsqlReadBuffer, Int32, FieldDescription) Declaration TPsv INpgsqlSimpleTypeHandler<TPsv>.Read(NpgsqlReadBuffer buf, int len, FieldDescription fieldDescription) Parameters Type Name Description NpgsqlReadBuffer buf System.Int32 len FieldDescription fieldDescription Returns Type Description TPsv Implements INpgsqlTypeHandler<T> INpgsqlSimpleTypeHandler<T> INpgsqlSimpleTypeHandler<T>"
  },
  "doc/api/Npgsql.BackendMessages.FieldDescription.html": {
    "href": "doc/api/Npgsql.BackendMessages.FieldDescription.html",
    "title": "Class FieldDescription | Npgsql Documentation",
    "keywords": "Class FieldDescription A descriptive record on a single field received from PostgreSQL. See RowDescription in http://www.postgresql.org/docs/current/static/protocol-message-formats.html Inheritance System.Object FieldDescription Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Npgsql.BackendMessages Assembly : Npgsql.dll Syntax public sealed class FieldDescription Constructors | Improve this Doc View Source FieldDescription() Creates a new instance. Declaration public FieldDescription() Remarks Exists for backwards compat with 4.0, has been removed for 5.0. Properties | Improve this Doc View Source TypeModifier The type modifier (see pg_attribute.atttypmod). The meaning of the modifier is type-specific. Declaration public int TypeModifier { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TypeSize The data type size (see pg_type.typlen). Note that negative values denote variable-width types. Declaration public short TypeSize { get; set; } Property Value Type Description System.Int16 Methods | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "doc/api/Npgsql.Logging.ConsoleLoggingProvider.html": {
    "href": "doc/api/Npgsql.Logging.ConsoleLoggingProvider.html",
    "title": "Class ConsoleLoggingProvider | Npgsql Documentation",
    "keywords": "Class ConsoleLoggingProvider An logging provider that outputs Npgsql logging messages to standard error. Inheritance System.Object ConsoleLoggingProvider Implements INpgsqlLoggingProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.Logging Assembly : Npgsql.dll Syntax public class ConsoleLoggingProvider : INpgsqlLoggingProvider Constructors | Improve this Doc View Source ConsoleLoggingProvider(NpgsqlLogLevel, Boolean, Boolean) Constructs a new ConsoleLoggingProvider Declaration public ConsoleLoggingProvider(NpgsqlLogLevel minLevel = NpgsqlLogLevel.Info, bool printLevel = false, bool printConnectorId = false) Parameters Type Name Description NpgsqlLogLevel minLevel Only messages of this level of higher will be logged System.Boolean printLevel If true, will output the log level (e.g. WARN). Defaults to false. System.Boolean printConnectorId If true, will output the connector ID. Defaults to false. Methods | Improve this Doc View Source CreateLogger(String) Creates a new Npgsql.Logging.ConsoleLogger instance of the given name. Declaration public NpgsqlLogger CreateLogger(string name) Parameters Type Name Description System.String name Returns Type Description NpgsqlLogger Implements INpgsqlLoggingProvider"
  },
  "doc/api/Npgsql.TypeMapping.NpgsqlTypeMappingBuilder.html": {
    "href": "doc/api/Npgsql.TypeMapping.NpgsqlTypeMappingBuilder.html",
    "title": "Class NpgsqlTypeMappingBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlTypeMappingBuilder Builds instances of NpgsqlTypeMapping for addition into INpgsqlTypeMapper . Inheritance System.Object NpgsqlTypeMappingBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeMapping Assembly : Npgsql.dll Syntax public class NpgsqlTypeMappingBuilder Properties | Improve this Doc View Source ClrTypes A set of CLR types that correspond to this type. Setting an NpgsqlParameter 's Value property to one of these types will make Npgsql write its value to PostgreSQL with this mapping. Declaration public Type[] ClrTypes { get; set; } Property Value Type Description System.Type [] | Improve this Doc View Source DbTypes A set of System.Data.DbType s that correspond to this type. Setting an NpgsqlParameter 's DbType property to one of these values will make Npgsql write its value to PostgreSQL with this mapping. Declaration public DbType[] DbTypes { get; set; } Property Value Type Description System.Data.DbType [] | Improve this Doc View Source InferredDbType Determines what is returned from DbType when this mapping is used. Declaration public DbType? InferredDbType { get; set; } Property Value Type Description System.Nullable < System.Data.DbType > | Improve this Doc View Source NpgsqlDbType The NpgsqlDbType that corresponds to this type. Setting an NpgsqlParameter 's NpgsqlDbType property to this value will make Npgsql write its value to PostgreSQL with this mapping. Declaration public NpgsqlDbType? NpgsqlDbType { get; set; } Property Value Type Description System.Nullable < NpgsqlDbType > | Improve this Doc View Source PgTypeName The name of the PostgreSQL type name, as it appears in the pg_type catalog. Declaration public string PgTypeName { get; set; } Property Value Type Description System.String Remarks This can a a partial name (without the schema), or a fully-qualified name (schema.typename) - the latter can be used if you have two types with the same name in different schemas. | Improve this Doc View Source TypeHandlerFactory A factory for a type handler that will be used to read and write values for PostgreSQL type. Declaration public NpgsqlTypeHandlerFactory TypeHandlerFactory { get; set; } Property Value Type Description NpgsqlTypeHandlerFactory Methods | Improve this Doc View Source Build() Builds an NpgsqlTypeMapping that can be added to an INpgsqlTypeMapper . Declaration public NpgsqlTypeMapping Build() Returns Type Description NpgsqlTypeMapping"
  },
  "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.html": {
    "href": "doc/api/Npgsql.TypeHandlers.DateTimeHandlers.html",
    "title": "Namespace Npgsql.TypeHandlers.DateTimeHandlers | Npgsql Documentation",
    "keywords": "Namespace Npgsql.TypeHandlers.DateTimeHandlers Classes DateHandler A type handler for the PostgreSQL date data type. DateHandlerFactory A factory for type handlers for the PostgreSQL date data type. IntervalHandler A type handler for the PostgreSQL date interval type. IntervalHandlerFactory A factory for type handlers for the PostgreSQL interval data type. TimeHandler A type handler for the PostgreSQL time data type. TimeHandlerFactory A factory for type handlers for the PostgreSQL time data type. TimestampHandler A type handler for the PostgreSQL timestamp data type. TimestampHandlerFactory A factory for type handlers for the PostgreSQL timestamp data type. TimestampTzHandler A type handler for the PostgreSQL timestamptz data type. TimestampTzHandlerFactory A factory for type handlers for the PostgreSQL timestamptz data type. TimeTzHandler A type handler for the PostgreSQL timetz data type. TimeTzHandlerFactory A factory for type handlers for the PostgreSQL timetz data type."
  },
  "doc/api/Npgsql.TypeHandlers.NumericHandlers.html": {
    "href": "doc/api/Npgsql.TypeHandlers.NumericHandlers.html",
    "title": "Namespace Npgsql.TypeHandlers.NumericHandlers | Npgsql Documentation",
    "keywords": "Namespace Npgsql.TypeHandlers.NumericHandlers Classes DoubleHandler A type handler for the PostgreSQL double precision data type. Int16Handler A type handler for the PostgreSQL smallint data type. Int32Handler A type handler for the PostgreSQL integer data type. Int64Handler A type handler for the PostgreSQL bigint data type. MoneyHandler A type handler for the PostgreSQL money data type. NumericHandler A type handler for the PostgreSQL numeric data type. SingleHandler A type handler for the PostgreSQL real data type. UInt32Handler A type handler for the PostgreSQL real data type."
  },
  "doc/api/Npgsql.LegacyPostgis.PostgisPolygon.html": {
    "href": "doc/api/Npgsql.LegacyPostgis.PostgisPolygon.html",
    "title": "Class PostgisPolygon | Npgsql Documentation",
    "keywords": "Class PostgisPolygon Represents an Postgis 2D Polygon. Inheritance System.Object PostgisGeometry PostgisPolygon Implements System.IEquatable < PostgisPolygon > System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < Coordinate2D >> System.Collections.IEnumerable Inherited Members PostgisGeometry.SRID System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.LegacyPostgis Assembly : Npgsql.LegacyPostgis.dll Syntax public class PostgisPolygon : PostgisGeometry, IEquatable<PostgisPolygon>, IEnumerable<IEnumerable<Coordinate2D>>, IEnumerable Constructors | Improve this Doc View Source PostgisPolygon(Coordinate2D[][]) Declaration public PostgisPolygon(Coordinate2D[][] rings) Parameters Type Name Description Coordinate2D [][] rings | Improve this Doc View Source PostgisPolygon(IEnumerable<IEnumerable<Coordinate2D>>) Declaration public PostgisPolygon(IEnumerable<IEnumerable<Coordinate2D>> rings) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < Coordinate2D >> rings Properties | Improve this Doc View Source Item[Int32] Declaration public Coordinate2D[] this[int ringIndex] { get; } Parameters Type Name Description System.Int32 ringIndex Property Value Type Description Coordinate2D [] | Improve this Doc View Source Item[Int32, Int32] Declaration public Coordinate2D this[int ringIndex, int pointIndex] { get; } Parameters Type Name Description System.Int32 ringIndex System.Int32 pointIndex Property Value Type Description Coordinate2D | Improve this Doc View Source RingCount Declaration public int RingCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TotalPointCount Declaration public int TotalPointCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(PostgisPolygon) Declaration public bool Equals(PostgisPolygon other) Parameters Type Name Description PostgisPolygon other Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<IEnumerable<Coordinate2D>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.IEnumerable < Coordinate2D >> | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetLenHelper() Declaration protected override int GetLenHelper() Returns Type Description System.Int32 Overrides PostgisGeometry.GetLenHelper() Operators | Improve this Doc View Source Equality(PostgisPolygon, PostgisPolygon) Declaration public static bool operator ==(PostgisPolygon x, PostgisPolygon y) Parameters Type Name Description PostgisPolygon x PostgisPolygon y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(PostgisPolygon, PostgisPolygon) Declaration public static bool operator !=(PostgisPolygon x, PostgisPolygon y) Parameters Type Name Description PostgisPolygon x PostgisPolygon y Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.IEquatable<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "doc/api/Npgsql.NpgsqlCopyTextWriter.html": {
    "href": "doc/api/Npgsql.NpgsqlCopyTextWriter.html",
    "title": "Class NpgsqlCopyTextWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlCopyTextWriter Writer for a text import, initiated by BeginTextImport(String) . Inheritance System.Object System.MarshalByRefObject System.IO.TextWriter System.IO.StreamWriter NpgsqlCopyTextWriter Implements System.IAsyncDisposable System.IDisposable Inherited Members System.IO.StreamWriter.Null System.IO.StreamWriter.Close() System.IO.StreamWriter.Dispose(System.Boolean) System.IO.StreamWriter.DisposeAsync() System.IO.StreamWriter.Flush() System.IO.StreamWriter.FlushAsync() System.IO.StreamWriter.Write(System.Char) System.IO.StreamWriter.Write(System.Char[]) System.IO.StreamWriter.Write(System.Char[], System.Int32, System.Int32) System.IO.StreamWriter.Write(System.ReadOnlySpan<System.Char>) System.IO.StreamWriter.Write(System.String) System.IO.StreamWriter.WriteAsync(System.Char) System.IO.StreamWriter.WriteAsync(System.Char[], System.Int32, System.Int32) System.IO.StreamWriter.WriteAsync(System.ReadOnlyMemory<System.Char>, System.Threading.CancellationToken) System.IO.StreamWriter.WriteAsync(System.String) System.IO.StreamWriter.WriteLine(System.ReadOnlySpan<System.Char>) System.IO.StreamWriter.WriteLine(System.String) System.IO.StreamWriter.WriteLineAsync() System.IO.StreamWriter.WriteLineAsync(System.Char) System.IO.StreamWriter.WriteLineAsync(System.Char[], System.Int32, System.Int32) System.IO.StreamWriter.WriteLineAsync(System.ReadOnlyMemory<System.Char>, System.Threading.CancellationToken) System.IO.StreamWriter.WriteLineAsync(System.String) System.IO.StreamWriter.AutoFlush System.IO.StreamWriter.BaseStream System.IO.StreamWriter.Encoding System.IO.TextWriter.CoreNewLine System.IO.TextWriter.Dispose() System.IO.TextWriter.Synchronized(System.IO.TextWriter) System.IO.TextWriter.Write(System.Boolean) System.IO.TextWriter.Write(System.Decimal) System.IO.TextWriter.Write(System.Double) System.IO.TextWriter.Write(System.Int32) System.IO.TextWriter.Write(System.Int64) System.IO.TextWriter.Write(System.Object) System.IO.TextWriter.Write(System.Single) System.IO.TextWriter.Write(System.String, System.Object) System.IO.TextWriter.Write(System.String, System.Object, System.Object) System.IO.TextWriter.Write(System.String, System.Object, System.Object, System.Object) System.IO.TextWriter.Write(System.String, System.Object[]) System.IO.TextWriter.Write(System.UInt32) System.IO.TextWriter.Write(System.UInt64) System.IO.TextWriter.WriteAsync(System.Char[]) System.IO.TextWriter.WriteLine() System.IO.TextWriter.WriteLine(System.Boolean) System.IO.TextWriter.WriteLine(System.Char) System.IO.TextWriter.WriteLine(System.Char[]) System.IO.TextWriter.WriteLine(System.Char[], System.Int32, System.Int32) System.IO.TextWriter.WriteLine(System.Decimal) System.IO.TextWriter.WriteLine(System.Double) System.IO.TextWriter.WriteLine(System.Int32) System.IO.TextWriter.WriteLine(System.Int64) System.IO.TextWriter.WriteLine(System.Object) System.IO.TextWriter.WriteLine(System.Single) System.IO.TextWriter.WriteLine(System.String, System.Object) System.IO.TextWriter.WriteLine(System.String, System.Object, System.Object) System.IO.TextWriter.WriteLine(System.String, System.Object, System.Object, System.Object) System.IO.TextWriter.WriteLine(System.String, System.Object[]) System.IO.TextWriter.WriteLine(System.UInt32) System.IO.TextWriter.WriteLine(System.UInt64) System.IO.TextWriter.WriteLineAsync(System.Char[]) System.IO.TextWriter.FormatProvider System.IO.TextWriter.NewLine System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql Assembly : Npgsql.dll Syntax public sealed class NpgsqlCopyTextWriter : StreamWriter, IAsyncDisposable, ICancelable, IDisposable Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . Methods | Improve this Doc View Source Cancel() Cancels and terminates an ongoing import. Any data already written will be discarded. Declaration public void Cancel() | Improve this Doc View Source CancelAsync() Cancels and terminates an ongoing import. Any data already written will be discarded. Declaration public Task CancelAsync() Returns Type Description System.Threading.Tasks.Task Implements System.IAsyncDisposable System.IDisposable"
  },
  "doc/api/Npgsql.TypeHandlers.ArrayHandler.html": {
    "href": "doc/api/Npgsql.TypeHandlers.ArrayHandler.html",
    "title": "Class ArrayHandler | Npgsql Documentation",
    "keywords": "Class ArrayHandler Non-generic base class for all type handlers which handle PostgreSQL arrays. Extend from ArrayHandler<TElement> instead. Inheritance System.Object NpgsqlTypeHandler ArrayHandler ArrayHandler <TElement> Inherited Members NpgsqlTypeHandler.Read<TAny>(NpgsqlReadBuffer, Int32, Boolean, FieldDescription) NpgsqlTypeHandler.ValidateAndGetLength<TAny>(TAny, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.ValidateObjectAndGetLength(Object, NpgsqlLengthCache, NpgsqlParameter) NpgsqlTypeHandler.WriteObjectWithLength(Object, NpgsqlWriteBuffer, NpgsqlLengthCache, NpgsqlParameter, Boolean) NpgsqlTypeHandler.CreateConversionButNoParamException(Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Npgsql.TypeHandlers Assembly : Npgsql.dll Syntax public abstract class ArrayHandler : NpgsqlTypeHandler Remarks http://www.postgresql.org/docs/current/static/arrays.html . The type handler API allows customizing Npgsql's behavior in powerful ways. However, although it is public, it should be considered somewhat unstable, and may change in breaking ways, including in non-major releases. Use it at your own risk. Constructors | Improve this Doc View Source ArrayHandler(PostgresType) Declaration protected ArrayHandler(PostgresType arrayPostgresType) Parameters Type Name Description PostgresType arrayPostgresType Methods | Improve this Doc View Source CreateArrayHandler(PostgresArrayType) Creates a type handler for arrays of this handler's type. Declaration public override ArrayHandler CreateArrayHandler(PostgresArrayType arrayBackendType) Parameters Type Name Description PostgresArrayType arrayBackendType Returns Type Description ArrayHandler Overrides NpgsqlTypeHandler.CreateArrayHandler(PostgresArrayType) | Improve this Doc View Source CreateRangeHandler(PostgresRangeType) Creates a type handler for ranges of this handler's type. Declaration public override RangeHandler CreateRangeHandler(PostgresRangeType rangeBackendType) Parameters Type Name Description PostgresRangeType rangeBackendType Returns Type Description RangeHandler Overrides NpgsqlTypeHandler.CreateRangeHandler(PostgresRangeType)"
  },
  "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.html": {
    "href": "doc/api/NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.html",
    "title": "Struct NpgsqlTsVector.Lexeme.WordEntryPos | Npgsql Documentation",
    "keywords": "Struct NpgsqlTsVector.Lexeme.WordEntryPos Represents a word entry position and an optional weight. Implements System.IEquatable < NpgsqlTsVector.Lexeme.WordEntryPos > Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : NpgsqlTypes Assembly : Npgsql.dll Syntax public struct WordEntryPos : IEquatable<NpgsqlTsVector.Lexeme.WordEntryPos> Constructors | Improve this Doc View Source WordEntryPos(Int32, NpgsqlTsVector.Lexeme.Weight) Creates a WordEntryPos with a given position and weight. Declaration public WordEntryPos(int pos, NpgsqlTsVector.Lexeme.Weight weight = NpgsqlTsVector.Lexeme.Weight.D) Parameters Type Name Description System.Int32 pos Position values can range from 1 to 16383; larger numbers are silently set to 16383. NpgsqlTsVector.Lexeme.Weight weight A weight labeled between A and D. Properties | Improve this Doc View Source Pos The position is a 14-bit unsigned integer indicating the position in the text this lexeme occurs. Cannot be 0. Declaration public int Pos { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Weight The weight is labeled from A to D. D is the default, and not printed. Declaration public NpgsqlTsVector.Lexeme.Weight Weight { get; } Property Value Type Description NpgsqlTsVector.Lexeme.Weight Methods | Improve this Doc View Source Equals(NpgsqlTsVector.Lexeme.WordEntryPos) Determines whether the specified object is equal to the current object. Declaration public bool Equals(NpgsqlTsVector.Lexeme.WordEntryPos o) Parameters Type Name Description NpgsqlTsVector.Lexeme.WordEntryPos o Returns Type Description System.Boolean | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object o) Parameters Type Name Description System.Object o Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Gets a hash code for the current object. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Prints this lexeme in PostgreSQL's format, i.e. position is followed by weight (weight is only printed if A, B or C). Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlTsVector.Lexeme.WordEntryPos, NpgsqlTsVector.Lexeme.WordEntryPos) Determines whether the specified object is equal to the current object. Declaration public static bool operator ==(NpgsqlTsVector.Lexeme.WordEntryPos left, NpgsqlTsVector.Lexeme.WordEntryPos right) Parameters Type Name Description NpgsqlTsVector.Lexeme.WordEntryPos left NpgsqlTsVector.Lexeme.WordEntryPos right Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlTsVector.Lexeme.WordEntryPos, NpgsqlTsVector.Lexeme.WordEntryPos) Determines whether the specified object is unequal to the current object. Declaration public static bool operator !=(NpgsqlTsVector.Lexeme.WordEntryPos left, NpgsqlTsVector.Lexeme.WordEntryPos right) Parameters Type Name Description NpgsqlTsVector.Lexeme.WordEntryPos left NpgsqlTsVector.Lexeme.WordEntryPos right Returns Type Description System.Boolean Implements System.IEquatable<T>"
  }
}